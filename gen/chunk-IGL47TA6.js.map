{
  "version": 3,
  "sources": ["../src/common/video/tms9918a.ts", "../src/machine/vdp_z80.ts"],
  "sourcesContent": ["/*\n * js99'er - TI-99/4A emulator written in JavaScript\n *\n * Created 2014 by Rasmus Moustgaard <rasmus.moustgaard@gmail.com>\n *\n * TMS9918A VDP emulation.\n *\n * https://github.com/Rasmus-M/Js99er\n * GNU General Public License v2.0\n */\n\nimport { hex, lpad, RGBA } from \"../util\";\nimport { ProbeVRAM, NullProbe } from \"../devices\";\n\nenum TMS9918A_Mode {\n  GRAPHICS = 0,\n  TEXT = 1,\n  BITMAP = 2,\n  MULTICOLOR = 3,\n  MODE4 = 4,\n  BITMAP_TEXT = 5,\n  BITMAP_MULTICOLOR = 6,\n  ILLEGAL = 7,\n};\n\ninterface CPUInterface {\n    setVDPInterrupt(b:boolean);\n}\n\nexport class TMS9918A {\n\n  cru : { setVDPInterrupt: (b:boolean) => void };\n  enableFlicker : boolean;\n  probe : ProbeVRAM = new NullProbe();\n\n  ram = new Uint8Array(16384); // VDP RAM\n  registers = new Uint8Array(8);\n  spriteBuffer = new Uint8Array(256);\n  addressRegister : number;\n  statusRegister : number;\n\n  palette : number[];\n\n  latch : boolean;\n  prefetchByte : number;\n\n  displayOn : boolean = false;\n  interruptsOn : boolean = false;\n  screenMode : number;\n  bitmapMode : boolean;\n  textMode : boolean;\n  colorTable : number;\n  nameTable : number;\n  charPatternTable : number;\n  spriteAttributeTable : number;\n  spritePatternTable : number;\n  colorTableMask : number;\n  patternTableMask : number;\n  ramMask : number;\n  fgColor : number;\n  bgColor : number;\n\n  flicker : boolean;\n  redrawRequired : boolean;\n\n  fb32 : Uint32Array;\n\n  width : number;\n  height : number;\n\n  constructor(fb32:Uint32Array, cru:CPUInterface, enableFlicker:boolean) {\n\n    this.fb32 = fb32;\n    this.cru = cru;\n    this.enableFlicker = enableFlicker;\n\n    this.palette = [\n        RGBA(0, 0, 0),\n        RGBA(0, 0, 0),\n        RGBA(33, 200, 66),\n        RGBA(94, 220, 120),\n        RGBA(84, 85, 237),\n        RGBA(125, 118, 252),\n        RGBA(212, 82, 77),\n        RGBA(66, 235, 245),\n        RGBA(252, 85, 84),\n        RGBA(255, 121, 120),\n        RGBA(212, 193, 84),\n        RGBA(230, 206, 128),\n        RGBA(33, 176, 59),\n        RGBA(201, 91, 186),\n        RGBA(204, 204, 204),\n        RGBA(255, 255, 255)\n    ];\n  }\n\n    reset() {\n\n        var i;\n        this.ram.fill(0);\n        this.registers.fill(0);\n        \n        this.addressRegister = 0;\n        this.statusRegister = 0;\n\n        this.prefetchByte = 0;\n        this.latch = false;\n\n        this.displayOn = false;\n        this.interruptsOn = false;\n        this.screenMode = TMS9918A_Mode.GRAPHICS;\n        this.bitmapMode = false;\n        this.textMode = false;\n        this.colorTable = 0;\n        this.nameTable = 0;\n        this.charPatternTable = 0;\n        this.spriteAttributeTable = 0;\n        this.spritePatternTable = 0;\n        this.colorTableMask = 0x3FFF;\n        this.patternTableMask = 0x3FFF;\n        this.ramMask = 0x3FFF;\n        this.fgColor = 0;\n        this.bgColor = 0;\n\n        this.flicker = this.enableFlicker;\n        this.redrawRequired = true;\n\n        this.width = 304;\n        this.height = 240;\n    }\n\n    drawScanline(y:number) {\n        var imageData = this.fb32,\n            width = this.width,\n            imageDataAddr = (y * width),\n            screenMode = this.screenMode,\n            textMode = this.textMode,\n            bitmapMode = this.bitmapMode,\n            drawWidth = !textMode ? 256 : 240,\n            drawHeight = 192,\n            hBorder = (width - drawWidth) >> 1,\n            vBorder = (this.height - drawHeight) >> 1,\n            fgColor = this.fgColor,\n            bgColor = this.bgColor,\n            ram = this.ram,\n            nameTable = this.nameTable,\n            colorTable = this.colorTable,\n            charPatternTable = this.charPatternTable,\n            colorTableMask = this.colorTableMask,\n            patternTableMask = this.patternTableMask,\n            spriteAttributeTable = this.spriteAttributeTable,\n            spritePatternTable = this.spritePatternTable,\n            spriteSize = (this.registers[1] & 0x2) !== 0,\n            spriteMagnify = this.registers[1] & 0x1,\n            spriteDimension = (spriteSize ? 16 : 8) << (spriteMagnify ? 1 : 0),\n            maxSpritesOnLine = this.flicker ? 4 : 32,\n            palette = this.palette,\n            collision = false, fifthSprite = false, fifthSpriteIndex = 31,\n            x, color, rgbColor, name, tableOffset, colorByte, patternByte;\n        if (y >= vBorder && y < vBorder + drawHeight && this.displayOn) {\n            var y1 = y - vBorder;\n            // Pre-process sprites\n            if (!textMode) {\n                var spriteBuffer = this.spriteBuffer;\n                spriteBuffer.fill(0);\n                var spritesOnLine = 0;\n                var endMarkerFound = false;\n                var spriteAttributeAddr = spriteAttributeTable;\n                var s;\n                for (s = 0; s < 32 && spritesOnLine <= maxSpritesOnLine && !endMarkerFound; s++) {\n                    var sy = ram[spriteAttributeAddr];\n                    if (sy !== 0xD0) {\n                        if (sy > 0xD0) {\n                            sy -= 256;\n                        }\n                        sy++;\n                        var sy1 = sy + spriteDimension;\n                        var y2 = -1;\n                        if (s < 8 || !bitmapMode) {\n                            if (y1 >= sy && y1 < sy1) {\n                                y2 = y1;\n                            }\n                        }\n                        else {\n                            // Emulate sprite duplication bug\n                            var yMasked = y1 & (((this.registers[4] & 0x03) << 6) | 0x3F);\n                            if (yMasked >= sy && yMasked < sy1) {\n                                y2 = yMasked;\n                            }\n                            else if (y1 >= 64 && y1 < 128 && y1 >= sy && y1 < sy1) {\n                                y2 = y1;\n                            }\n                        }\n                        if (y2 !== -1) {\n                            if (spritesOnLine < maxSpritesOnLine) {\n                                var sx = ram[spriteAttributeAddr + 1];\n                                var sPatternNo = ram[spriteAttributeAddr + 2] & (spriteSize ? 0xFC : 0xFF);\n                                var sColor = ram[spriteAttributeAddr + 3] & 0x0F;\n                                if ((ram[spriteAttributeAddr + 3] & 0x80) !== 0) {\n                                    sx -= 32;\n                                }\n                                var sLine = (y2 - sy) >> spriteMagnify;\n                                var sPatternBase = spritePatternTable + (sPatternNo << 3) + sLine;\n                                for (var sx1 = 0; sx1 < spriteDimension; sx1++) {\n                                    var sx2 = sx + sx1;\n                                    if (sx2 >= 0 && sx2 < drawWidth) {\n                                        var sx3 = sx1 >> spriteMagnify;\n                                        var sPatternByte = ram[sPatternBase + (sx3 >= 8 ? 16 : 0)];\n                                        if ((sPatternByte & (0x80 >> (sx3 & 0x07))) !== 0) {\n                                            if (spriteBuffer[sx2] === 0) {\n                                                spriteBuffer[sx2] = sColor + 1;\n                                            }\n                                            else {\n                                                collision = true;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            spritesOnLine++;\n                        }\n                        spriteAttributeAddr += 4;\n                    }\n                    else {\n                        endMarkerFound = true;\n                    }\n                }\n                if (spritesOnLine > 4) {\n                    fifthSprite = true;\n                    fifthSpriteIndex = s;\n                }\n            }\n            // Draw\n            var rowOffset = !textMode ? (y1 >> 3) << 5 : (y1 >> 3) * 40;\n            var lineOffset = y1 & 7;\n            for (x = 0; x < width; x++) {\n                if (x >= hBorder && x < hBorder + drawWidth) {\n                    var x1 = x - hBorder;\n                    // Tiles\n                    switch (screenMode) {\n                        case TMS9918A_Mode.GRAPHICS:\n                            name = ram[nameTable + rowOffset + (x1 >> 3)];\n                            colorByte = ram[colorTable + (name >> 3)];\n                            patternByte = ram[charPatternTable + (name << 3) + lineOffset];\n                            color = (patternByte & (0x80 >> (x1 & 7))) !== 0 ? (colorByte & 0xF0) >> 4 : colorByte & 0x0F;\n                            break;\n                        case TMS9918A_Mode.BITMAP:\n                            name = ram[nameTable + rowOffset + (x1 >> 3)];\n                            tableOffset = ((y1 & 0xC0) << 5) + (name << 3);\n                            colorByte = ram[colorTable + (tableOffset & colorTableMask) + lineOffset];\n                            patternByte = ram[charPatternTable + (tableOffset & patternTableMask) + lineOffset];\n                            color = (patternByte & (0x80 >> (x1 & 7))) !== 0 ? (colorByte & 0xF0) >> 4 : colorByte & 0x0F;\n                            break;\n                        case TMS9918A_Mode.MULTICOLOR:\n                            name = ram[nameTable + rowOffset + (x1 >> 3)];\n                            lineOffset = (y1 & 0x1C) >> 2;\n                            patternByte = ram[charPatternTable + (name << 3) + lineOffset];\n                            color = (x1 & 4) === 0 ? (patternByte & 0xF0) >> 4 : patternByte & 0x0F;\n                            break;\n                        case TMS9918A_Mode.TEXT:\n                            name = ram[nameTable + rowOffset + Math.floor(x1 / 6)];\n                            patternByte = ram[charPatternTable + (name << 3) + lineOffset];\n                            color = (patternByte & (0x80 >> (x1 % 6))) !== 0 ? fgColor : bgColor;\n                            break;\n                        case TMS9918A_Mode.BITMAP_TEXT:\n                            name = ram[nameTable + rowOffset + Math.floor(x1 / 6)];\n                            tableOffset = ((y1 & 0xC0) << 5) + (name << 3);\n                            patternByte = ram[charPatternTable + (tableOffset & patternTableMask) + lineOffset];\n                            color = (patternByte & (0x80 >> (x1 % 6))) !== 0 ? fgColor : bgColor;\n                            break;\n                        case TMS9918A_Mode.BITMAP_MULTICOLOR:\n                            name = ram[nameTable + rowOffset + (x1 >> 3)];\n                            lineOffset = (y1 & 0x1C) >> 2;\n                            tableOffset = ((y1 & 0xC0) << 5) + (name << 3);\n                            patternByte = ram[charPatternTable + (tableOffset & patternTableMask) + lineOffset];\n                            color = (x1 & 4) === 0 ? (patternByte & 0xF0) >> 4 : patternByte & 0x0F;\n                            break;\n                        case TMS9918A_Mode.ILLEGAL:\n                            color = (x1 & 4) === 0 ? fgColor : bgColor;\n                            break;\n                    }\n                    if (color === 0) {\n                        color = bgColor;\n                    }\n                    // Sprites\n                    if (!textMode) {\n                        var spriteColor = spriteBuffer[x1] - 1;\n                        if (spriteColor > 0) {\n                            color = spriteColor;\n                        }\n                    }\n                }\n                else {\n                    color = bgColor;\n                }\n                rgbColor = palette[color];\n                imageData[imageDataAddr++] = rgbColor;\n            }\n        }\n        // Top/bottom border\n        else {\n            rgbColor = palette[bgColor];\n            for (x = 0; x < width; x++) {\n                imageData[imageDataAddr++] = rgbColor;\n            }\n        }\n        if (y === vBorder + drawHeight) {\n            this.statusRegister |= 0x80;\n            if (this.interruptsOn) {\n                this.cru.setVDPInterrupt(true);\n            }\n        }\n        if (collision) {\n            this.statusRegister |= 0x20;\n        }\n        if ((this.statusRegister & 0x40) === 0) {\n            this.statusRegister |= fifthSpriteIndex;\n        }\n        if (fifthSprite) {\n            this.statusRegister |= 0x40;\n        }\n    }\n\n    setReadAddress(i:number) {\n        this.addressRegister = ((i & 0x3f) << 8) | (this.addressRegister & 0x00FF);\n        this.prefetchByte = this.ram[this.addressRegister++];\n        this.addressRegister &= 0x3FFF;\n    }\n    \n    setWriteAddress(i:number) {\n        this.addressRegister = ((i & 0x3f) << 8) | (this.addressRegister & 0x00FF);\n    }\n    \n    setVDPWriteRegister(i:number) {\n        var regmask = this.registers.length-1;\n        this.registers[i & regmask] = this.addressRegister & 0x00FF;\n        switch (i & regmask) {\n            // Mode\n            case 0:\n                this.updateMode(this.registers[0], this.registers[1]);\n                break;\n            case 1:\n                this.ramMask = (this.registers[1] & 0x80) !== 0 ? 0x3FFF : 0x1FFF;\n                this.displayOn = (this.registers[1] & 0x40) !== 0;\n                this.interruptsOn = (this.registers[1] & 0x20) !== 0;\n                this.updateMode(this.registers[0], this.registers[1]);\n                break;\n            // Name table\n            case 2:\n                this.nameTable = (this.registers[2] & 0xf) << 10;\n                break;\n            // Color table\n            case 3:\n                if (this.bitmapMode) {\n                    this.colorTable = (this.registers[3] & 0x80) << 6;\n                }\n                else {\n                    this.colorTable = this.registers[3] << 6;\n                }\n                this.updateTableMasks();\n                break;\n            // Pattern table\n            case 4:\n                if (this.bitmapMode) {\n                    this.charPatternTable = (this.registers[4] & 0x4) << 11;\n                }\n                else {\n                    this.charPatternTable = (this.registers[4] & 0x7) << 11;\n                }\n                this.updateTableMasks();\n                break;\n            // Sprite attribute table\n            case 5:\n                this.spriteAttributeTable = (this.registers[5] & 0x7f) << 7;\n                break;\n            // Sprite pattern table\n            case 6:\n                this.spritePatternTable = (this.registers[6] & 0x7) << 11;\n                break;\n            // Background\n            case 7:\n                this.fgColor = (this.registers[7] & 0xf0) >> 4;\n                this.bgColor = this.registers[7] & 0x0f;\n                break;\n        }\n        // this.logRegisters();\n        // this.log.info(\"Name table: \" + this.nameTable.toHexWord());\n        // this.log.info(\"Pattern table: \" + this.charPatternTable.toHexWord());\n    }\n\n    setVDPWriteCommand3(i:number) {\n            this.setVDPWriteRegister(i);\n    }\n    \n    writeAddress(i:number) {\n        if (!this.latch) {\n            this.addressRegister = (this.addressRegister & 0xFF00) | i;\n        } else {\n            switch ((i & 0xc0) >> 6) {\n                // Set read address\n                case 0:\n                    this.setReadAddress(i);\n                    break;\n                // Set write address\n                case 1:\n                    this.setWriteAddress(i);\n                    break;\n                // Write register\n                case 2:\n                    this.setVDPWriteRegister(i);\n                    break;\n                // Color RAM (SMS only)\n                case 3:\n                    this.setVDPWriteCommand3(i);\n                    break;\n            }\n            this.redrawRequired = true;\n        }\n        this.latch = !this.latch;\n    }\n\n    updateMode(reg0:number, reg1:number) {\n        this.bitmapMode = (reg0 & 0x02) !== 0;\n        this.textMode = (reg1 & 0x10) !== 0;\n        // Check bitmap mode bit, not text or multicolor\n        if (this.bitmapMode) {\n            switch ((reg1 & 0x18) >> 3) {\n                case 0:\n                    // Bitmap mode\n                    this.screenMode = TMS9918A_Mode.BITMAP;\n                    break;\n                case 1:\n                    // Multicolor mode\n                    this.screenMode = TMS9918A_Mode.BITMAP_MULTICOLOR;\n                    break;\n                case 2:\n                    // Text mode\n                    this.screenMode = TMS9918A_Mode.BITMAP_TEXT;\n                    break;\n                case 3:\n                    // Illegal\n                    this.screenMode = TMS9918A_Mode.ILLEGAL;\n                    break;\n            }\n        } else {\n            switch ((reg1 & 0x18) >> 3) {\n                case 0:\n                    // Graphics mode 0\n                    this.screenMode = TMS9918A_Mode.GRAPHICS;\n                    break;\n                case 1:\n                    // Multicolor mode\n                    this.screenMode = TMS9918A_Mode.MULTICOLOR;\n                    break;\n                case 2:\n                    // Text mode\n                    this.screenMode = TMS9918A_Mode.TEXT;\n                    break;\n                case 3:\n                    // Illegal\n                    this.screenMode = TMS9918A_Mode.ILLEGAL;\n                    break;\n            }\n        }\n        if (this.bitmapMode) {\n            this.colorTable = (this.registers[3] & 0x80) << 6;\n            this.charPatternTable = (this.registers[4] & 0x4) << 11;\n            this.updateTableMasks();\n        } else {\n            this.colorTable = this.registers[3] << 6;\n            this.charPatternTable = (this.registers[4] & 0x7) << 11;\n        }\n        this.nameTable = (this.registers[2] & 0xf) << 10;\n        this.spriteAttributeTable = (this.registers[5] & 0x7f) << 7;\n        this.spritePatternTable = (this.registers[6] & 0x7) << 11;\n    }\n\n    updateTableMasks() {\n        if (this.screenMode === TMS9918A_Mode.BITMAP) {\n            this.colorTableMask = ((this.registers[3] & 0x7F) << 6) | 0x3F; // 000CCCCCCC111111\n            this.patternTableMask  = ((this.registers[4] & 0x03) << 11) | (this.colorTableMask & 0x7FF); // 000PPCCCCC111111\n            // this.log.info(\"colorTableMask:\" + this.colorTableMask);\n            // this.log.info(\"patternTableMask:\" + this.patternTableMask);\n        }\n        else if (this.screenMode === TMS9918A_Mode.BITMAP_TEXT || this.screenMode === TMS9918A_Mode.BITMAP_MULTICOLOR) {\n            this.colorTableMask = this.ramMask;\n            this.patternTableMask  = ((this.registers[4] & 0x03) << 11) | 0x7FF; // 000PP11111111111\n        }\n        else {\n            this.colorTableMask = this.ramMask;\n            this.patternTableMask = this.ramMask;\n        }\n    }\n\n    writeData(i:number) {\n        this.probe.logVRAMWrite(this.addressRegister, i);\n        this.ram[this.addressRegister++] = i;\n        this.prefetchByte = i;\n        this.addressRegister &= this.ramMask;\n        this.latch = false;\n        this.redrawRequired = true;\n    }\n\n    readStatus() : number {\n        var i = this.statusRegister;\n        this.statusRegister = 0x1F; // TODO: & 0x1f?\n        if (this.interruptsOn) {\n            this.cru.setVDPInterrupt(false);\n        }\n        this.latch = false;\n        return i;\n    }\n\n    readData() : number {\n        var i = this.prefetchByte;\n        this.prefetchByte = this.ram[this.addressRegister++];\n        this.probe.logVRAMRead(this.addressRegister-1, this.prefetchByte);\n        this.addressRegister &= this.ramMask;\n        this.latch = false;\n        return i;\n    }\n\n    getRAM() : Uint8Array {\n        return this.ram;\n    }\n\n    colorTableSize() : number {\n        if (this.screenMode === TMS9918A_Mode.GRAPHICS) {\n            return 0x20;\n        }\n        else if (this.screenMode === TMS9918A_Mode.BITMAP) {\n            return Math.min(this.colorTableMask + 1, 0x1800);\n        }\n        else {\n            return 0;\n        }\n    }\n\n    patternTableSize() : number {\n        if (this.bitmapMode) {\n            return Math.min(this.patternTableMask + 1, 0x1800);\n        }\n        else {\n            return 0x800;\n        }\n    }\n    getDebugTables() {\n        var tables : [string,number,number][] = [\n            [\"Pattern Table\", this.charPatternTable, this.patternTableSize()],\n            [\"Name Table\", this.nameTable, 0x300],\n            [\"Color Table\", this.colorTable, this.colorTableSize()],\n            [\"Sprite Patterns\", this.spritePatternTable, 64*32],\n            [\"Sprite Attributes\", this.spriteAttributeTable, 4*32],\n        ];\n        return tables;\n    }\n    getRegsString() : string {\n        const w = 20;\n        var s = \"Registers:\";\n        for (var i = 0; i < this.registers.length; i++) {\n            s += \" \" + hex(this.registers[i],2);\n        }\n        s += \"\\n\\n\";\n        var tables = this.getDebugTables();\n        for (var row of tables) {\n            if (row[2] > 0)\n                s += lpad(row[0], w) + \": $\" + hex(row[1],4) + \" - $\" + hex(row[1]+row[2]-1,4) + \"\\n\";\n        }\n        s += lpad(\"Address Register\",w) + \": $\" + hex(this.addressRegister,4) + \"\\n\";\n        s += lpad(\"Status Register\",w) + \": $\" + hex(this.statusRegister,2) + \"\\n\";\n        s += lpad(\"Screen Mode\",w) + \":  \" + this.screenMode + \"\\n\";\n        s += lpad(\"Display On\",w) + \":  \" + this.displayOn + \"\\n\";\n        if (this.ramMask != 0x3fff)\n            s += lpad(\"RAM Mask\",w) + \": $\" + hex(this.ramMask) + \"\\n\";\n        return s;\n    }\n\n    hexView(start:number, length:number, anchorAddr:number) : {text,lineCount,anchorLine} {\n        var text = \"\";\n        var anchorLine = null;\n        var addr = start;\n        var line = 0;\n        for (var i = 0; i < length && addr < 0x4000; addr++, i++) {\n            if ((i & 0x000F) === 0) {\n                text += \"\\n\" + hex(addr,4) + \":\";\n                line++;\n            }\n            text += \" \";\n            if (anchorAddr && anchorAddr === addr) {\n                anchorLine = line;\n            }\n            var hx = this.ram[addr].toString(16).toUpperCase();\n            if (hx.length === 1) {\n                text += \"0\";\n            }\n            text += hx;\n        }\n        return {text: text.substr(1), lineCount: line, anchorLine: anchorLine - 1};\n    }\n\n    getWord(addr:number) : number {\n        return addr < 0x4000 ? this.ram[addr] << 8 | this.ram[addr+1] : 0;\n    }\n\n    getCharAt(x:number, y:number) : number {\n        x -= 24;\n        y -= 24;\n        if (!this.textMode) {\n            return this.ram[this.nameTable + Math.floor(x / 8) + Math.floor(y / 8)  * 32];\n        }\n        else {\n            return this.ram[this.nameTable + Math.floor((x - 8) / 6) + Math.floor(y / 8)  * 40];\n        }\n    }\n\n    setFlicker(value:boolean) {\n        this.flicker = value;\n        this.enableFlicker = value;\n    }\n\n    getState() {\n        return {\n            ram: this.ram.slice(0),\n            registers: this.registers.slice(0),\n            addressRegister: this.addressRegister,\n            statusRegister: this.statusRegister,\n            latch: this.latch,\n            prefetchByte: this.prefetchByte,\n            displayOn: this.displayOn,\n            interruptsOn: this.interruptsOn,\n            screenMode: this.screenMode,\n            bitmapMode: this.bitmapMode,\n            textMode: this.textMode,\n            colorTable: this.colorTable,\n            nameTable: this.nameTable,\n            charPatternTable: this.charPatternTable,\n            spriteAttributeTable: this.spriteAttributeTable,\n            spritePatternTable: this.spritePatternTable,\n            colorTableMask: this.colorTableMask,\n            patternTableMask: this.patternTableMask,\n            ramMask: this.ramMask,\n            fgColor: this.fgColor,\n            bgColor: this.bgColor,\n            flicker: this.flicker\n        };\n    }\n\n    restoreState(state) {\n        this.ram.set(state.ram);\n        this.registers.set(state.registers);\n        this.addressRegister = state.addressRegister;\n        this.statusRegister = state.statusRegister;\n        this.latch = state.latch;\n        this.prefetchByte = state.prefetchByte;\n        this.displayOn = state.displayOn;\n        this.interruptsOn = state.interruptsOn;\n        this.screenMode = state.screenMode;\n        this.bitmapMode = state.bitmapMode;\n        this.textMode = state.textMode;\n        this.colorTable = state.colorTable;\n        this.nameTable = state.nameTable;\n        this.charPatternTable = state.charPatternTable;\n        this.spriteAttributeTable = state.spriteAttributeTable;\n        this.spritePatternTable = state.spritePatternTable;\n        this.colorTableMask = state.colorTableMask;\n        this.patternTableMask = state.patternTableMask;\n        this.ramMask = state.ramMask;\n        this.fgColor = state.fgColor;\n        this.bgColor = state.bgColor;\n        this.flicker = state.flicker;\n        this.redrawRequired = true;\n    }\n};\n\nexport class SMSVDP extends TMS9918A {\n\n    writeToCRAM : boolean;\n    cram = new Uint8Array(32); // color RAM\n    cpalette = new Uint32Array(32); // color RAM (RGBA)\n    registers = new Uint8Array(16); // 8 more registers (actually only 5)\n    vramUntwiddled = new Uint8Array(0x8000);\n    numVisibleLines = 192;\n    lineCounter = 0; // TODO: state\n    lineInterruptPending = false; // TODO: state\n\n    reset() {\n        super.reset();\n        this.writeToCRAM = false;\n        this.cram.fill(0);\n        this.cpalette.fill(0);\n        this.vramUntwiddled.fill(0);        \n    }\n    readStatus() {\n        this.lineInterruptPending = false;\n        return super.readStatus();\n    }\n    updateMode(reg0:number, reg1:number) {\n        if (reg0 & 0x04) {\n            this.screenMode = TMS9918A_Mode.MODE4;\n            this.nameTable = ((this.registers[2] & 0xf) << 10) & 0x3800;\n            this.spriteAttributeTable = (this.registers[5] & 0x7e) << 7;\n        } else {\n            super.updateMode(reg0, reg1);\n        }\n    }\n    setReadAddress(i:number) {\n        super.setReadAddress(i);\n        this.writeToCRAM = false;\n    }\n    setWriteAddress(i:number) {\n        super.setWriteAddress(i);\n        this.writeToCRAM = false;\n    }\n    setVDPWriteRegister(i:number) {\n        super.setVDPWriteRegister(i);\n        //this.writeToCRAM = false; // TODO?\n        this.ramMask = 0x3fff;\n    }\n    setVDPWriteCommand3(i:number) {\n        this.writeToCRAM = true;\n        //this.addressRegister &= 0x1f; // TODO?\n    }\n    writeData(i:number) {\n        if (this.writeToCRAM) {\n            var palindex = this.addressRegister++ & (this.cram.length-1);\n            this.cram[palindex] = i;\n            this.cpalette[palindex] = RGBA((i&3)*85, ((i>>2)&3)*85, ((i>>4)&3)*85);\n            this.prefetchByte = i;\n            this.addressRegister &= this.ramMask;\n            this.redrawRequired = true;\n        } else {\n            var oldAddress = this.addressRegister;\n            super.writeData(i);\n            this.writeTwiddled(oldAddress, i);\n        }\n        this.latch = false;\n    }\n    writeTwiddled(vdp_addr:number, val:number) {\n        var planarBase = vdp_addr & 0x3ffc;\n        var twiddledBase = planarBase * 2;\n        var val0 = this.ram[planarBase];\n        var val1 = this.ram[planarBase + 1];\n        var val2 = this.ram[planarBase + 2];\n        var val3 = this.ram[planarBase + 3];\n        for (var i = 0; i < 8; ++i) {\n            var effectiveBit = 7 - i;\n            var index = (((val0 >>> effectiveBit) & 1))\n                | (((val1 >>> effectiveBit) & 1) << 1)\n                | (((val2 >>> effectiveBit) & 1) << 2)\n                | (((val3 >>> effectiveBit) & 1) << 3);\n            this.vramUntwiddled[twiddledBase + i] = index;\n        }\n    }\n    getState() {\n        var state = super.getState();\n        state['cram'] = this.cram.slice(0);\n        return state;\n    }\n    restoreState(state) {\n        super.restoreState(state);\n        this.cram.set(state.cram);\n    }\n    drawScanline(y:number) {\n        if (this.screenMode == TMS9918A_Mode.MODE4)\n            this.rasterize_line(y);\t// special mode 4\n        else\n            super.drawScanline(y);\n    }\n\n    findSprites(line:number) {\n        var spriteInfo = this.spriteAttributeTable;\n        var active = [];\n        var spriteHeight = 8;\n        var i;\n        if (this.registers[1] & 2) {\n            spriteHeight = 16;\n        }\n        for (i = 0; i < 64; i++) {\n            var y = this.ram[spriteInfo + i];\n            if (y === 208) {\n                break;\n            }\n            if (y >= 240) y -= 256;\n            if (line >= y && line < (y + spriteHeight)) {\n                if (active.length === 8) {\n                    this.statusRegister |= 0x40;  // Sprite overflow\n                    break;\n                }\n                active.push([\n                    this.ram[spriteInfo + 128 + i * 2],\n                    this.ram[spriteInfo + 128 + i * 2 + 1],\n                    y]);\n            }\n        }\n        return active;\n    }\n\n\n    rasterize_background(lineAddr:number, pixelOffset:number, tileData:number, tileDef:number, transparent:boolean) {\n        lineAddr = lineAddr | 0;\n        pixelOffset = pixelOffset | 0;\n        tileData = tileData | 0;\n        tileDef = (tileDef | 0) * 2;\n        var i, tileDefInc;\n        if ((tileData & (1 << 9))) {\n            tileDefInc = -1;\n            tileDef += 7;\n        } else {\n            tileDefInc = 1;\n        }\n        const paletteOffset = (tileData & (1 << 11)) ? 16 : 0;\n        var index;\n        if (transparent && paletteOffset === 0) {\n            for (i = 0; i < 8; i++) {\n                index = this.vramUntwiddled[tileDef];\n                tileDef += tileDefInc;\n                if (index !== 0) this.fb32[lineAddr + pixelOffset] = this.cpalette[index];\n                pixelOffset = (pixelOffset + 1) & 255;\n            }\n        } else {\n            for (i = 0; i < 8; i++) {\n                index = this.vramUntwiddled[tileDef] + paletteOffset;\n                tileDef += tileDefInc;\n                this.fb32[lineAddr + pixelOffset] = this.cpalette[index];\n                pixelOffset = (pixelOffset + 1) & 255;\n            }\n        }\n    }\n\n    \n    clear_background(lineAddr:number, pixelOffset:number) {\n        lineAddr = lineAddr | 0;\n        pixelOffset = pixelOffset | 0;\n        var i;\n        const rgb = this.cpalette[0];\n        for (i = 0; i < 8; ++i) {\n            this.fb32[lineAddr + pixelOffset] = rgb;\n            pixelOffset = (pixelOffset + 1) & 255;\n        }\n    }\n\n    rasterize_background_line(lineAddr:number, pixelOffset:number, nameAddr:number, yMod:number) {\n        lineAddr = lineAddr | 0;\n        pixelOffset = pixelOffset | 0;\n        nameAddr = nameAddr | 0;\n        const yOffset = (yMod | 0) * 4;\n        for (var i = 0; i < 32; i++) {\n            // TODO: static left-hand rows.\n            var tileData = this.ram[nameAddr + i * 2] | (this.ram[nameAddr + i * 2 + 1] << 8);\n            var tileNum = tileData & 511;\n            var tileDef = 32 * tileNum;\n            if (tileData & (1 << 10)) {\n                tileDef += 28 - yOffset;\n            } else {\n                tileDef += yOffset;\n            }\n            if ((tileData & (1 << 12)) === 0) {\n                this.rasterize_background(lineAddr, pixelOffset, tileData, tileDef, false);\n            } else {\n                this.clear_background(lineAddr, pixelOffset);\n            }\n            pixelOffset = (pixelOffset + 8) & 255;\n        }\n    }\n\n    rasterize_foreground_line(lineAddr:number, pixelOffset:number, nameAddr:number, yMod:number) {\n        lineAddr = lineAddr | 0;\n        pixelOffset = pixelOffset | 0;\n        nameAddr = nameAddr | 0;\n        const yOffset = (yMod | 0) * 4;\n        for (var i = 0; i < 32; i++) {\n            // TODO: static left-hand rows.\n            var tileData = this.ram[nameAddr + i * 2] | (this.ram[nameAddr + i * 2 + 1] << 8);\n            if ((tileData & (1 << 12)) === 0) continue;\n            var tileNum = tileData & 511;\n            var tileDef = 32 * tileNum;\n            if (tileData & (1 << 10)) {\n                tileDef += 28 - yOffset;\n            } else {\n                tileDef += yOffset;\n            }\n            this.rasterize_background(lineAddr, ((i * 8) + pixelOffset & 0xff), tileData, tileDef, true);\n        }\n    }\n\n\n    rasterize_sprites(line:number, lineAddr:number, pixelOffset:number, sprites) {\n        lineAddr = lineAddr | 0;\n        pixelOffset = pixelOffset | 0;\n        const spriteBase = (this.registers[6] & 4) ? 0x2000 : 0;\n        // TODO: sprite X-8 shift\n        // TODO: sprite double size\n        for (var i = 0; i < 256; ++i) {\n            var xPos = i;//(i + this.registers[8]) & 0xff;\n            var spriteFoundThisX = false;\n            var writtenTo = false;\n            var minDistToNext = 256;\n            for (var k = 0; k < sprites.length; k++) {\n                var sprite = sprites[k];\n                var offset = xPos - sprite[0];\n                // Sprite to the right of the current X?\n                if (offset < 0) {\n                    // Find out how far it would be to skip to this sprite\n                    var distToSprite = -offset;\n                    // Keep the minimum distance to the next sprite to the right.\n                    if (distToSprite < minDistToNext) minDistToNext = distToSprite;\n                    continue;\n                }\n                if (offset >= 8) continue;\n                spriteFoundThisX = true;\n                var spriteLine = line - sprite[2];\n                var spriteAddr = spriteBase + sprite[1] * 32 + spriteLine * 4;\n                var untwiddledAddr = spriteAddr * 2 + offset;\n                var index = this.vramUntwiddled[untwiddledAddr];\n                if (index === 0) {\n                    continue;\n                }\n                if (writtenTo) {\n                    // We have a collision!.\n                    this.statusRegister |= 0x20;\n                    break;\n                }\n                this.fb32[lineAddr + ((pixelOffset + i - this.registers[8]) & 0xff)] = this.cpalette[16 + index];\n                writtenTo = true;\n            }\n            if (!spriteFoundThisX && minDistToNext > 1) {\n                // If we didn't find a sprite on this X, then we can skip ahead by the minimum\n                // dist to next (minus one to account for loop add)\n                i += minDistToNext - 1;\n            }\n        }\n    }\n\n    border_clear(lineAddr:number, count:number) {\n        lineAddr = lineAddr | 0;\n        count = count | 0;\n        const borderIndex = 16 + (this.registers[7] & 0xf);\n        const borderRGB = this.cpalette[borderIndex];\n        this.fb32.fill(borderRGB, lineAddr, lineAddr+count);\n    }\n\n    rasterize_line(line:number) {\n        line |= 0;\n        var vdp_regs = this.registers;\n        var drawWidth = 256;\n        var drawHeight = this.numVisibleLines; // TODO?\n        var hBorder = (this.width - drawWidth) >> 1;\n        var vBorder = (this.height - drawHeight) >> 1; // TODO?\n        const startAddr = ((line + vBorder) * this.width) | 0;\n        const lineAddr = (startAddr + hBorder) | 0;\n        if (!this.displayOn || line < 0 || line >= drawHeight) {\n            if (line < this.height)\n                this.border_clear(startAddr, this.width);\n            else if (line >= 262-vBorder)\n                this.border_clear((line-262+vBorder)*this.width, this.width);\n        } else {\n            var effectiveLine = line + vdp_regs[9];\n            if (effectiveLine >= 224) {\n                effectiveLine -= 224;\n            }\n            const sprites = this.findSprites(line);\n            const pixelOffset = ((vdp_regs[0] & 64) && line < 16) ? 0 : vdp_regs[8];\n            const nameAddr = this.nameTable + (effectiveLine >>> 3) * 64;\n            const yMod = effectiveLine & 7;\n\n            this.rasterize_background_line(lineAddr, pixelOffset, nameAddr, yMod);\n            this.rasterize_sprites(line, lineAddr, pixelOffset, sprites);\n            this.rasterize_foreground_line(lineAddr, pixelOffset, nameAddr, yMod);\n\n            this.border_clear(startAddr, hBorder);\n            this.border_clear(lineAddr + 256, hBorder);\n            if (vdp_regs[0] & (1 << 5)) {\n                // Blank out left hand column.\n                this.border_clear(lineAddr, 8);\n            }\n        }\n        // frame interrupts\n        if (line == drawHeight) {\n            this.statusRegister |= 0x80;\n            if (this.interruptsOn) {\n                this.cru.setVDPInterrupt(true);\n            }\n        }\n        // line interrupts\n        if (line <= drawHeight) {\n            if (this.lineCounter > 0) {\n                this.lineCounter--;\n            } else {\n                this.lineCounter = this.registers[0xa];\n                this.lineInterruptPending = true;\n            }\n        } else {\n            this.lineCounter = this.registers[0xa];\n        }\n        if (this.lineInterruptPending) {\n            if (this.registers[0] & 0x10) {\n                // TODO this.cru.setVDPInterrupt(true);\n            }\n        }\n    }\n\n    getDebugTables() {\n        if (this.screenMode == TMS9918A_Mode.MODE4) {\n            var tables : [string,number,number][] = [\n                [\"Pattern Table\", 0, 512*32],\n                [\"Name Table\", this.nameTable, 32*32*2], // TODO: size\n                [\"Sprite Attributes\", this.spriteAttributeTable, 256],\n            ]\n            return tables;\n        } else {\n            return super.getDebugTables();\n        }\n    }\n};\n\nexport class GameGearVDP extends SMSVDP {\n    cram = new Uint8Array(64); // color RAM\n    cram_latch = 0;\n\n    writeData(value: number) {\n        if (this.writeToCRAM) {\n            //console.log(hex(this.addressRegister), hex(value), hex(this.cram_latch));\n            if (this.addressRegister & 1) { // odd address?\n                let rgb4 = this.cram_latch + (value << 8);\n                let rgba = RGBA((rgb4&15)*17, ((rgb4>>4)&15)*17, ((rgb4>>8)&15)*17);\n                let palindex = this.addressRegister & (this.cram.length-1);\n                this.cram[palindex-1] = this.cram_latch;\n                this.cram[palindex] = value;\n                this.cpalette[palindex >> 1] = rgba;\n                this.prefetchByte = value;\n                this.addressRegister &= this.ramMask;\n                this.redrawRequired = true;\n            } else {\n                this.cram_latch = value; // even address\n            }\n            this.addressRegister++;\n        } else {\n            super.writeData(value);\n        }\n        this.latch = false;\n    }\n}\n", "\nimport { Z80, Z80State } from \"../common/cpu/ZilogZ80\";\nimport { BasicScanlineMachine, Bus, ProbeAll } from \"../common/devices\";\nimport { newAddressDecoder, newKeyboardHandler } from \"../common/emu\";\nimport { TssChannelAdapter } from \"../common/audio\";\nimport { TMS9918A } from \"../common/video/tms9918a\";\n\nconst audioOversample = 2;\n\nexport abstract class BaseZ80VDPBasedMachine extends BasicScanlineMachine {\n\n  cpuFrequency = 3579545; // MHz\n  canvasWidth = 304;\n  numTotalScanlines = 262;\n  numVisibleScanlines = 240;\n  cpuCyclesPerLine = this.cpuFrequency / (262*60);\n  sampleRate = 262*60*audioOversample;\n  overscan = true;\n\n  cpu: Z80 = new Z80();\n  vdp: TMS9918A;\n  psg;\n  audioadapter;\n\n  abstract vdpInterrupt();\n  abstract getKeyboardMap();\n  getKeyboardFunction() { return null; }\n  \n  init(membus:Bus, iobus:Bus, psg) {\n    this.connectCPUMemoryBus(membus);\n    this.connectCPUIOBus(iobus);\n    this.handler = newKeyboardHandler(this.inputs, this.getKeyboardMap(), this.getKeyboardFunction());\n    this.psg = psg;\n    this.audioadapter = psg && new TssChannelAdapter(psg.psg, audioOversample, this.sampleRate);\n  }\n  \n  connectVideo(pixels) {\n    super.connectVideo(pixels);\n    var cru = {\n      setVDPInterrupt: (b) => {\n        if (b) {\n          this.vdpInterrupt();\n        } else {\n          // TODO: reset interrupt?\n        }\n      }\n    };\n    this.vdp = this.newVDP(this.pixels, cru, true);\n  }\n\n  connectProbe(probe: ProbeAll) : void {\n    super.connectProbe(probe);\n    this.vdp.probe = probe || this.nullProbe;\n  }\n\n  newVDP(frameData, cru, flicker) {\n    return new TMS9918A(frameData, cru, flicker);\n  }\n  \n  startScanline() {\n    this.audio && this.audioadapter && this.audioadapter.generate(this.audio);\n  }\n\n  drawScanline() {\n    this.vdp.drawScanline(this.scanline);\n  }\n\n  loadState(state) {\n    super.loadState(state);\n    this.vdp.restoreState(state['vdp']);\n  }\n  saveState() {\n    var state = super.saveState();\n    state['vdp'] = this.vdp.getState();\n    return state;\n  }\n  reset() {\n    super.reset();\n    this.vdp.reset();\n    this.psg.reset();\n  }\n\n  getDebugCategories() {\n    return ['CPU','Stack','VDP'];\n  }\n  getDebugInfo(category, state) {\n    switch (category) {\n      case 'VDP': return this.vdpStateToLongString(state.vdp);\n    }\n  }\n  vdpStateToLongString(ppu) {\n    return this.vdp.getRegsString();\n  }\n  readVRAMAddress(a : number) : number {\n    return this.vdp.ram[a & 0x3fff];\n  }\n}\n\n"],
  "mappings": "0HA6BO,IAAMA,EAAN,KAAe,CAyCpB,YAAYC,EAAkBC,EAAkBC,EAAuB,CArCvE,WAAoB,IAAIC,GAExB,SAAM,IAAI,WAAW,KAAK,EAC1B,eAAY,IAAI,WAAW,CAAC,EAC5B,kBAAe,IAAI,WAAW,GAAG,EASjC,eAAsB,GACtB,kBAAyB,GAyBvB,KAAK,KAAOH,EACZ,KAAK,IAAMC,EACX,KAAK,cAAgBC,EAErB,KAAK,QAAU,CACXE,EAAK,EAAG,EAAG,CAAC,EACZA,EAAK,EAAG,EAAG,CAAC,EACZA,EAAK,GAAI,IAAK,EAAE,EAChBA,EAAK,GAAI,IAAK,GAAG,EACjBA,EAAK,GAAI,GAAI,GAAG,EAChBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,GAAI,EAAE,EAChBA,EAAK,GAAI,IAAK,GAAG,EACjBA,EAAK,IAAK,GAAI,EAAE,EAChBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,IAAK,EAAE,EACjBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,GAAI,IAAK,EAAE,EAChBA,EAAK,IAAK,GAAI,GAAG,EACjBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,IAAK,GAAG,CACtB,CACF,CAEE,OAAQ,CAEJ,IAAIC,EACJ,KAAK,IAAI,KAAK,CAAC,EACf,KAAK,UAAU,KAAK,CAAC,EAErB,KAAK,gBAAkB,EACvB,KAAK,eAAiB,EAEtB,KAAK,aAAe,EACpB,KAAK,MAAQ,GAEb,KAAK,UAAY,GACjB,KAAK,aAAe,GACpB,KAAK,WAAa,EAClB,KAAK,WAAa,GAClB,KAAK,SAAW,GAChB,KAAK,WAAa,EAClB,KAAK,UAAY,EACjB,KAAK,iBAAmB,EACxB,KAAK,qBAAuB,EAC5B,KAAK,mBAAqB,EAC1B,KAAK,eAAiB,MACtB,KAAK,iBAAmB,MACxB,KAAK,QAAU,MACf,KAAK,QAAU,EACf,KAAK,QAAU,EAEf,KAAK,QAAU,KAAK,cACpB,KAAK,eAAiB,GAEtB,KAAK,MAAQ,IACb,KAAK,OAAS,GAClB,CAEA,aAAaC,EAAU,CACnB,IAAIC,EAAY,KAAK,KACjBC,EAAQ,KAAK,MACbC,EAAiBH,EAAIE,EACrBE,EAAa,KAAK,WAClBC,EAAW,KAAK,SAChBC,EAAa,KAAK,WAClBC,EAAaF,EAAiB,IAAN,IACxBG,EAAa,IACbC,EAAWP,EAAQK,GAAc,EACjCG,EAAW,KAAK,OAASF,GAAe,EACxCG,EAAU,KAAK,QACfC,EAAU,KAAK,QACfC,EAAM,KAAK,IACXC,EAAY,KAAK,UACjBC,EAAa,KAAK,WAClBC,EAAmB,KAAK,iBACxBC,EAAiB,KAAK,eACtBC,EAAmB,KAAK,iBACxBC,GAAuB,KAAK,qBAC5BC,GAAqB,KAAK,mBAC1BC,GAAc,KAAK,UAAU,CAAC,EAAI,KAAS,EAC3CC,EAAgB,KAAK,UAAU,CAAC,EAAI,EACpCC,GAAmBF,EAAa,GAAK,KAAOC,EAAgB,EAAI,GAChEE,EAAmB,KAAK,QAAU,EAAI,GACtCC,EAAU,KAAK,QACfC,EAAY,GAAOC,EAAc,GAAOC,EAAmB,GAC3DC,EAAGC,EAAOC,EAAUC,EAAMC,EAAaC,EAAWC,EACtD,GAAInC,GAAKU,GAAWV,EAAIU,EAAUF,GAAc,KAAK,UAAW,CAC5D,IAAI4B,EAAKpC,EAAIU,EAEb,GAAI,CAACL,EAAU,CACX,IAAIgC,EAAe,KAAK,aACxBA,EAAa,KAAK,CAAC,EACnB,IAAIC,EAAgB,EAChBC,GAAiB,GACjBC,EAAsBrB,GACtBsB,EACJ,IAAKA,EAAI,EAAGA,EAAI,IAAMH,GAAiBd,GAAoB,CAACe,GAAgBE,IAAK,CAC7E,IAAIC,EAAK7B,EAAI2B,CAAmB,EAChC,GAAIE,IAAO,IAAM,CACTA,EAAK,MACLA,GAAM,KAEVA,IACA,IAAIC,EAAMD,EAAKnB,EACXqB,EAAK,GACT,GAAIH,EAAI,GAAK,CAACnC,EACN8B,GAAMM,GAAMN,EAAKO,IACjBC,EAAKR,OAGR,CAED,IAAIS,EAAUT,IAAQ,KAAK,UAAU,CAAC,EAAI,IAAS,EAAK,IACpDS,GAAWH,GAAMG,EAAUF,EAC3BC,EAAKC,EAEAT,GAAM,IAAMA,EAAK,KAAOA,GAAMM,GAAMN,EAAKO,IAC9CC,EAAKR,EAEb,CACA,GAAIQ,IAAO,GAAI,CACX,GAAIN,EAAgBd,EAAkB,CAClC,IAAIsB,GAAKjC,EAAI2B,EAAsB,CAAC,EAChCO,GAAalC,EAAI2B,EAAsB,CAAC,GAAKnB,EAAa,IAAO,KACjE2B,GAASnC,EAAI2B,EAAsB,CAAC,EAAI,IACvC3B,EAAI2B,EAAsB,CAAC,EAAI,OAAU,IAC1CM,IAAM,IAIV,QAFIG,GAASL,EAAKF,GAAOpB,EACrB4B,GAAe9B,IAAsB2B,IAAc,GAAKE,GACnDE,EAAM,EAAGA,EAAM5B,EAAiB4B,IAAO,CAC5C,IAAIC,EAAMN,GAAKK,EACf,GAAIC,GAAO,GAAKA,EAAM7C,EAAW,CAC7B,IAAI8C,GAAMF,GAAO7B,EACbgC,GAAezC,EAAIqC,IAAgBG,IAAO,EAAI,GAAK,EAAE,GACpDC,GAAgB,MAASD,GAAM,MAAY,IACxChB,EAAae,CAAG,IAAM,EACtBf,EAAae,CAAG,EAAIJ,GAAS,EAG7BtB,EAAY,GAGxB,CACJ,CACJ,CACAY,GACJ,CACAE,GAAuB,CAC3B,MAEID,GAAiB,EAEzB,CACID,EAAgB,IAChBX,EAAc,GACdC,EAAmBa,EAE3B,CAEA,IAAIc,EAAalD,GAA6B+B,GAAM,GAAK,GAA5BA,GAAM,GAAM,EACrCoB,EAAapB,EAAK,EACtB,IAAKP,EAAI,EAAGA,EAAI3B,EAAO2B,IAAK,CACxB,GAAIA,GAAKpB,GAAWoB,EAAIpB,EAAUF,EAAW,CACzC,IAAIkD,EAAK5B,EAAIpB,EAEb,OAAQL,EAAY,CAChB,IAAK,GACD4B,EAAOnB,EAAIC,EAAYyC,GAAaE,GAAM,EAAE,EAC5CvB,EAAYrB,EAAIE,GAAciB,GAAQ,EAAE,EACxCG,EAActB,EAAIG,GAAoBgB,GAAQ,GAAKwB,CAAU,EAC7D1B,GAASK,EAAe,MAASsB,EAAK,MAAS,GAAKvB,EAAY,MAAS,EAAIA,EAAY,GACzF,MACJ,IAAK,GACDF,EAAOnB,EAAIC,EAAYyC,GAAaE,GAAM,EAAE,EAC5CxB,IAAgBG,EAAK,MAAS,IAAMJ,GAAQ,GAC5CE,EAAYrB,EAAIE,GAAckB,EAAchB,GAAkBuC,CAAU,EACxErB,EAActB,EAAIG,GAAoBiB,EAAcf,GAAoBsC,CAAU,EAClF1B,GAASK,EAAe,MAASsB,EAAK,MAAS,GAAKvB,EAAY,MAAS,EAAIA,EAAY,GACzF,MACJ,IAAK,GACDF,EAAOnB,EAAIC,EAAYyC,GAAaE,GAAM,EAAE,EAC5CD,GAAcpB,EAAK,KAAS,EAC5BD,EAActB,EAAIG,GAAoBgB,GAAQ,GAAKwB,CAAU,EAC7D1B,GAAS2B,EAAK,KAAO,GAAKtB,EAAc,MAAS,EAAIA,EAAc,GACnE,MACJ,IAAK,GACDH,EAAOnB,EAAIC,EAAYyC,EAAY,KAAK,MAAME,EAAK,CAAC,CAAC,EACrDtB,EAActB,EAAIG,GAAoBgB,GAAQ,GAAKwB,CAAU,EAC7D1B,GAASK,EAAe,KAASsB,EAAK,KAAS,EAAI9C,EAAUC,EAC7D,MACJ,IAAK,GACDoB,EAAOnB,EAAIC,EAAYyC,EAAY,KAAK,MAAME,EAAK,CAAC,CAAC,EACrDxB,IAAgBG,EAAK,MAAS,IAAMJ,GAAQ,GAC5CG,EAActB,EAAIG,GAAoBiB,EAAcf,GAAoBsC,CAAU,EAClF1B,GAASK,EAAe,KAASsB,EAAK,KAAS,EAAI9C,EAAUC,EAC7D,MACJ,IAAK,GACDoB,EAAOnB,EAAIC,EAAYyC,GAAaE,GAAM,EAAE,EAC5CD,GAAcpB,EAAK,KAAS,EAC5BH,IAAgBG,EAAK,MAAS,IAAMJ,GAAQ,GAC5CG,EAActB,EAAIG,GAAoBiB,EAAcf,GAAoBsC,CAAU,EAClF1B,GAAS2B,EAAK,KAAO,GAAKtB,EAAc,MAAS,EAAIA,EAAc,GACnE,MACJ,IAAK,GACDL,GAAS2B,EAAK,KAAO,EAAI9C,EAAUC,EACnC,KACR,CAKA,GAJIkB,IAAU,IACVA,EAAQlB,GAGR,CAACP,EAAU,CACX,IAAIqD,GAAcrB,EAAaoB,CAAE,EAAI,EACjCC,GAAc,IACd5B,EAAQ4B,GAEhB,CACJ,MAEI5B,EAAQlB,EAEZmB,EAAWN,EAAQK,CAAK,EACxB7B,EAAUE,GAAe,EAAI4B,CACjC,CACJ,KAII,KADAA,EAAWN,EAAQb,CAAO,EACrBiB,EAAI,EAAGA,EAAI3B,EAAO2B,IACnB5B,EAAUE,GAAe,EAAI4B,EAGjC/B,IAAMU,EAAUF,IAChB,KAAK,gBAAkB,IACnB,KAAK,cACL,KAAK,IAAI,gBAAgB,EAAI,GAGjCkB,IACA,KAAK,gBAAkB,KAEtB,KAAK,eAAiB,MAAU,IACjC,KAAK,gBAAkBE,GAEvBD,IACA,KAAK,gBAAkB,GAE/B,CAEA,eAAe5B,EAAU,CACrB,KAAK,iBAAoBA,EAAI,KAAS,EAAM,KAAK,gBAAkB,IACnE,KAAK,aAAe,KAAK,IAAI,KAAK,iBAAiB,EACnD,KAAK,iBAAmB,KAC5B,CAEA,gBAAgBA,EAAU,CACtB,KAAK,iBAAoBA,EAAI,KAAS,EAAM,KAAK,gBAAkB,GACvE,CAEA,oBAAoBA,EAAU,CAC1B,IAAI4D,EAAU,KAAK,UAAU,OAAO,EAEpC,OADA,KAAK,UAAU5D,EAAI4D,CAAO,EAAI,KAAK,gBAAkB,IAC7C5D,EAAI4D,EAAS,CAEjB,IAAK,GACD,KAAK,WAAW,KAAK,UAAU,CAAC,EAAG,KAAK,UAAU,CAAC,CAAC,EACpD,MACJ,IAAK,GACD,KAAK,SAAW,KAAK,UAAU,CAAC,EAAI,OAAU,EAAI,MAAS,KAC3D,KAAK,WAAa,KAAK,UAAU,CAAC,EAAI,MAAU,EAChD,KAAK,cAAgB,KAAK,UAAU,CAAC,EAAI,MAAU,EACnD,KAAK,WAAW,KAAK,UAAU,CAAC,EAAG,KAAK,UAAU,CAAC,CAAC,EACpD,MAEJ,IAAK,GACD,KAAK,WAAa,KAAK,UAAU,CAAC,EAAI,KAAQ,GAC9C,MAEJ,IAAK,GACG,KAAK,WACL,KAAK,YAAc,KAAK,UAAU,CAAC,EAAI,MAAS,EAGhD,KAAK,WAAa,KAAK,UAAU,CAAC,GAAK,EAE3C,KAAK,iBAAiB,EACtB,MAEJ,IAAK,GACG,KAAK,WACL,KAAK,kBAAoB,KAAK,UAAU,CAAC,EAAI,IAAQ,GAGrD,KAAK,kBAAoB,KAAK,UAAU,CAAC,EAAI,IAAQ,GAEzD,KAAK,iBAAiB,EACtB,MAEJ,IAAK,GACD,KAAK,sBAAwB,KAAK,UAAU,CAAC,EAAI,MAAS,EAC1D,MAEJ,IAAK,GACD,KAAK,oBAAsB,KAAK,UAAU,CAAC,EAAI,IAAQ,GACvD,MAEJ,IAAK,GACD,KAAK,SAAW,KAAK,UAAU,CAAC,EAAI,MAAS,EAC7C,KAAK,QAAU,KAAK,UAAU,CAAC,EAAI,GACnC,KACR,CAIJ,CAEA,oBAAoB5D,EAAU,CACtB,KAAK,oBAAoBA,CAAC,CAClC,CAEA,aAAaA,EAAU,CACnB,GAAI,CAAC,KAAK,MACN,KAAK,gBAAmB,KAAK,gBAAkB,MAAUA,MACtD,CACH,QAASA,EAAI,MAAS,EAAG,CAErB,IAAK,GACD,KAAK,eAAeA,CAAC,EACrB,MAEJ,IAAK,GACD,KAAK,gBAAgBA,CAAC,EACtB,MAEJ,IAAK,GACD,KAAK,oBAAoBA,CAAC,EAC1B,MAEJ,IAAK,GACD,KAAK,oBAAoBA,CAAC,EAC1B,KACR,CACA,KAAK,eAAiB,EAC1B,CACA,KAAK,MAAQ,CAAC,KAAK,KACvB,CAEA,WAAW6D,EAAaC,EAAa,CAIjC,GAHA,KAAK,YAAcD,EAAO,KAAU,EACpC,KAAK,UAAYC,EAAO,MAAU,EAE9B,KAAK,WACL,QAASA,EAAO,KAAS,EAAG,CACxB,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,KACR,KAEA,SAASA,EAAO,KAAS,EAAG,CACxB,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,MACJ,IAAK,GAED,KAAK,WAAa,EAClB,KACR,CAEA,KAAK,YACL,KAAK,YAAc,KAAK,UAAU,CAAC,EAAI,MAAS,EAChD,KAAK,kBAAoB,KAAK,UAAU,CAAC,EAAI,IAAQ,GACrD,KAAK,iBAAiB,IAEtB,KAAK,WAAa,KAAK,UAAU,CAAC,GAAK,EACvC,KAAK,kBAAoB,KAAK,UAAU,CAAC,EAAI,IAAQ,IAEzD,KAAK,WAAa,KAAK,UAAU,CAAC,EAAI,KAAQ,GAC9C,KAAK,sBAAwB,KAAK,UAAU,CAAC,EAAI,MAAS,EAC1D,KAAK,oBAAsB,KAAK,UAAU,CAAC,EAAI,IAAQ,EAC3D,CAEA,kBAAmB,CACX,KAAK,aAAe,GACpB,KAAK,gBAAmB,KAAK,UAAU,CAAC,EAAI,MAAS,EAAK,GAC1D,KAAK,kBAAsB,KAAK,UAAU,CAAC,EAAI,IAAS,GAAO,KAAK,eAAiB,MAIhF,KAAK,aAAe,GAA6B,KAAK,aAAe,GAC1E,KAAK,eAAiB,KAAK,QAC3B,KAAK,kBAAsB,KAAK,UAAU,CAAC,EAAI,IAAS,GAAM,OAG9D,KAAK,eAAiB,KAAK,QAC3B,KAAK,iBAAmB,KAAK,QAErC,CAEA,UAAU9D,EAAU,CAChB,KAAK,MAAM,aAAa,KAAK,gBAAiBA,CAAC,EAC/C,KAAK,IAAI,KAAK,iBAAiB,EAAIA,EACnC,KAAK,aAAeA,EACpB,KAAK,iBAAmB,KAAK,QAC7B,KAAK,MAAQ,GACb,KAAK,eAAiB,EAC1B,CAEA,YAAsB,CAClB,IAAIA,EAAI,KAAK,eACb,YAAK,eAAiB,GAClB,KAAK,cACL,KAAK,IAAI,gBAAgB,EAAK,EAElC,KAAK,MAAQ,GACNA,CACX,CAEA,UAAoB,CAChB,IAAIA,EAAI,KAAK,aACb,YAAK,aAAe,KAAK,IAAI,KAAK,iBAAiB,EACnD,KAAK,MAAM,YAAY,KAAK,gBAAgB,EAAG,KAAK,YAAY,EAChE,KAAK,iBAAmB,KAAK,QAC7B,KAAK,MAAQ,GACNA,CACX,CAEA,QAAsB,CAClB,OAAO,KAAK,GAChB,CAEA,gBAA0B,CACtB,OAAI,KAAK,aAAe,EACb,GAEF,KAAK,aAAe,EAClB,KAAK,IAAI,KAAK,eAAiB,EAAG,IAAM,EAGxC,CAEf,CAEA,kBAA4B,CACxB,OAAI,KAAK,WACE,KAAK,IAAI,KAAK,iBAAmB,EAAG,IAAM,EAG1C,IAEf,CACA,gBAAiB,CACb,IAAI+D,EAAoC,CACpC,CAAC,gBAAiB,KAAK,iBAAkB,KAAK,iBAAiB,CAAC,EAChE,CAAC,aAAc,KAAK,UAAW,GAAK,EACpC,CAAC,cAAe,KAAK,WAAY,KAAK,eAAe,CAAC,EACtD,CAAC,kBAAmB,KAAK,mBAAoB,IAAK,EAClD,CAAC,oBAAqB,KAAK,qBAAsB,GAAI,CACzD,EACA,OAAOA,CACX,CACA,eAAyB,CAGrB,QADIrB,EAAI,aACC1C,EAAI,EAAGA,EAAI,KAAK,UAAU,OAAQA,IACvC0C,GAAK,IAAMsB,EAAI,KAAK,UAAUhE,CAAC,EAAE,CAAC,EAEtC0C,GAAK;AAAA;AAAA,EACL,IAAIqB,EAAS,KAAK,eAAe,EACjC,QAASE,KAAOF,EACRE,EAAI,CAAC,EAAI,IACTvB,GAAKwB,EAAKD,EAAI,CAAC,EAAG,EAAC,EAAI,MAAQD,EAAIC,EAAI,CAAC,EAAE,CAAC,EAAI,OAASD,EAAIC,EAAI,CAAC,EAAEA,EAAI,CAAC,EAAE,EAAE,CAAC,EAAI;AAAA,GAEzF,OAAAvB,GAAKwB,EAAK,mBAAmB,EAAC,EAAI,MAAQF,EAAI,KAAK,gBAAgB,CAAC,EAAI;AAAA,EACxEtB,GAAKwB,EAAK,kBAAkB,EAAC,EAAI,MAAQF,EAAI,KAAK,eAAe,CAAC,EAAI;AAAA,EACtEtB,GAAKwB,EAAK,cAAc,EAAC,EAAI,MAAQ,KAAK,WAAa;AAAA,EACvDxB,GAAKwB,EAAK,aAAa,EAAC,EAAI,MAAQ,KAAK,UAAY;AAAA,EACjD,KAAK,SAAW,QAChBxB,GAAKwB,EAAK,WAAW,EAAC,EAAI,MAAQF,EAAI,KAAK,OAAO,EAAI;AAAA,GACnDtB,CACX,CAEA,QAAQyB,EAAcC,EAAeC,EAAiD,CAKlF,QAJIC,EAAO,GACPC,EAAa,KACbC,EAAOL,EACPM,EAAO,EACFzE,EAAI,EAAGA,EAAIoE,GAAUI,EAAO,MAAQA,IAAQxE,IAAK,EACjDA,EAAI,MAAY,IACjBsE,GAAQ;AAAA,EAAON,EAAIQ,EAAK,CAAC,EAAI,IAC7BC,KAEJH,GAAQ,IACJD,GAAcA,IAAeG,IAC7BD,EAAaE,GAEjB,IAAIC,EAAK,KAAK,IAAIF,CAAI,EAAE,SAAS,EAAE,EAAE,YAAY,EAC7CE,EAAG,SAAW,IACdJ,GAAQ,KAEZA,GAAQI,CACZ,CACA,MAAO,CAAC,KAAMJ,EAAK,OAAO,CAAC,EAAG,UAAWG,EAAM,WAAYF,EAAa,CAAC,CAC7E,CAEA,QAAQC,EAAsB,CAC1B,OAAOA,EAAO,MAAS,KAAK,IAAIA,CAAI,GAAK,EAAI,KAAK,IAAIA,EAAK,CAAC,EAAI,CACpE,CAEA,UAAU1C,EAAU7B,EAAmB,CAGnC,OAFA6B,GAAK,GACL7B,GAAK,GACA,KAAK,SAIC,KAAK,IAAI,KAAK,UAAY,KAAK,OAAO6B,EAAI,GAAK,CAAC,EAAI,KAAK,MAAM7B,EAAI,CAAC,EAAK,EAAE,EAH3E,KAAK,IAAI,KAAK,UAAY,KAAK,MAAM6B,EAAI,CAAC,EAAI,KAAK,MAAM7B,EAAI,CAAC,EAAK,EAAE,CAKpF,CAEA,WAAW0E,EAAe,CACtB,KAAK,QAAUA,EACf,KAAK,cAAgBA,CACzB,CAEA,UAAW,CACP,MAAO,CACH,IAAK,KAAK,IAAI,MAAM,CAAC,EACrB,UAAW,KAAK,UAAU,MAAM,CAAC,EACjC,gBAAiB,KAAK,gBACtB,eAAgB,KAAK,eACrB,MAAO,KAAK,MACZ,aAAc,KAAK,aACnB,UAAW,KAAK,UAChB,aAAc,KAAK,aACnB,WAAY,KAAK,WACjB,WAAY,KAAK,WACjB,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,UAAW,KAAK,UAChB,iBAAkB,KAAK,iBACvB,qBAAsB,KAAK,qBAC3B,mBAAoB,KAAK,mBACzB,eAAgB,KAAK,eACrB,iBAAkB,KAAK,iBACvB,QAAS,KAAK,QACd,QAAS,KAAK,QACd,QAAS,KAAK,QACd,QAAS,KAAK,OAClB,CACJ,CAEA,aAAaC,EAAO,CAChB,KAAK,IAAI,IAAIA,EAAM,GAAG,EACtB,KAAK,UAAU,IAAIA,EAAM,SAAS,EAClC,KAAK,gBAAkBA,EAAM,gBAC7B,KAAK,eAAiBA,EAAM,eAC5B,KAAK,MAAQA,EAAM,MACnB,KAAK,aAAeA,EAAM,aAC1B,KAAK,UAAYA,EAAM,UACvB,KAAK,aAAeA,EAAM,aAC1B,KAAK,WAAaA,EAAM,WACxB,KAAK,WAAaA,EAAM,WACxB,KAAK,SAAWA,EAAM,SACtB,KAAK,WAAaA,EAAM,WACxB,KAAK,UAAYA,EAAM,UACvB,KAAK,iBAAmBA,EAAM,iBAC9B,KAAK,qBAAuBA,EAAM,qBAClC,KAAK,mBAAqBA,EAAM,mBAChC,KAAK,eAAiBA,EAAM,eAC5B,KAAK,iBAAmBA,EAAM,iBAC9B,KAAK,QAAUA,EAAM,QACrB,KAAK,QAAUA,EAAM,QACrB,KAAK,QAAUA,EAAM,QACrB,KAAK,QAAUA,EAAM,QACrB,KAAK,eAAiB,EAC1B,CACJ,EAEaC,EAAN,cAAqBnF,CAAS,CAA9B,kCAGH,UAAO,IAAI,WAAW,EAAE,EACxB,cAAW,IAAI,YAAY,EAAE,EAC7B,eAAY,IAAI,WAAW,EAAE,EAC7B,oBAAiB,IAAI,WAAW,KAAM,EACtC,qBAAkB,IAClB,iBAAc,EACd,0BAAuB,GAEvB,OAAQ,CACJ,MAAM,MAAM,EACZ,KAAK,YAAc,GACnB,KAAK,KAAK,KAAK,CAAC,EAChB,KAAK,SAAS,KAAK,CAAC,EACpB,KAAK,eAAe,KAAK,CAAC,CAC9B,CACA,YAAa,CACT,YAAK,qBAAuB,GACrB,MAAM,WAAW,CAC5B,CACA,WAAWmE,EAAaC,EAAa,CAC7BD,EAAO,GACP,KAAK,WAAa,EAClB,KAAK,WAAc,KAAK,UAAU,CAAC,EAAI,KAAQ,GAAM,MACrD,KAAK,sBAAwB,KAAK,UAAU,CAAC,EAAI,MAAS,GAE1D,MAAM,WAAWA,EAAMC,CAAI,CAEnC,CACA,eAAe9D,EAAU,CACrB,MAAM,eAAeA,CAAC,EACtB,KAAK,YAAc,EACvB,CACA,gBAAgBA,EAAU,CACtB,MAAM,gBAAgBA,CAAC,EACvB,KAAK,YAAc,EACvB,CACA,oBAAoBA,EAAU,CAC1B,MAAM,oBAAoBA,CAAC,EAE3B,KAAK,QAAU,KACnB,CACA,oBAAoBA,EAAU,CAC1B,KAAK,YAAc,EAEvB,CACA,UAAUA,EAAU,CAChB,GAAI,KAAK,YAAa,CAClB,IAAI8E,EAAW,KAAK,kBAAqB,KAAK,KAAK,OAAO,EAC1D,KAAK,KAAKA,CAAQ,EAAI9E,EACtB,KAAK,SAAS8E,CAAQ,EAAI/E,GAAMC,EAAE,GAAG,IAAMA,GAAG,EAAG,GAAG,IAAMA,GAAG,EAAG,GAAG,EAAE,EACrE,KAAK,aAAeA,EACpB,KAAK,iBAAmB,KAAK,QAC7B,KAAK,eAAiB,EAC1B,KAAO,CACH,IAAI+E,EAAa,KAAK,gBACtB,MAAM,UAAU/E,CAAC,EACjB,KAAK,cAAc+E,EAAY/E,CAAC,CACpC,CACA,KAAK,MAAQ,EACjB,CACA,cAAcgF,EAAiBC,EAAY,CAOvC,QANIC,EAAaF,EAAW,MACxBG,EAAeD,EAAa,EAC5BE,EAAO,KAAK,IAAIF,CAAU,EAC1BG,EAAO,KAAK,IAAIH,EAAa,CAAC,EAC9BI,EAAO,KAAK,IAAIJ,EAAa,CAAC,EAC9BK,EAAO,KAAK,IAAIL,EAAa,CAAC,EACzBlF,EAAI,EAAGA,EAAI,EAAG,EAAEA,EAAG,CACxB,IAAIwF,EAAe,EAAIxF,EACnByF,EAAWL,IAASI,EAAgB,GAC/BH,IAASG,EAAgB,IAAM,GAC/BF,IAASE,EAAgB,IAAM,GAC/BD,IAASC,EAAgB,IAAM,EACxC,KAAK,eAAeL,EAAenF,CAAC,EAAIyF,CAC5C,CACJ,CACA,UAAW,CACP,IAAIb,EAAQ,MAAM,SAAS,EAC3B,OAAAA,EAAM,KAAU,KAAK,KAAK,MAAM,CAAC,EAC1BA,CACX,CACA,aAAaA,EAAO,CAChB,MAAM,aAAaA,CAAK,EACxB,KAAK,KAAK,IAAIA,EAAM,IAAI,CAC5B,CACA,aAAa3E,EAAU,CACf,KAAK,YAAc,EACnB,KAAK,eAAeA,CAAC,EAErB,MAAM,aAAaA,CAAC,CAC5B,CAEA,YAAYwE,EAAa,CACrB,IAAIiB,EAAa,KAAK,qBAClBC,EAAS,CAAC,EACVC,EAAe,EACf5F,EAIJ,IAHI,KAAK,UAAU,CAAC,EAAI,IACpB4F,EAAe,IAEd5F,EAAI,EAAGA,EAAI,GAAIA,IAAK,CACrB,IAAIC,EAAI,KAAK,IAAIyF,EAAa1F,CAAC,EAC/B,GAAIC,IAAM,IACN,MAGJ,GADIA,GAAK,MAAKA,GAAK,KACfwE,GAAQxE,GAAKwE,EAAQxE,EAAI2F,EAAe,CACxC,GAAID,EAAO,SAAW,EAAG,CACrB,KAAK,gBAAkB,GACvB,KACJ,CACAA,EAAO,KAAK,CACR,KAAK,IAAID,EAAa,IAAM1F,EAAI,CAAC,EACjC,KAAK,IAAI0F,EAAa,IAAM1F,EAAI,EAAI,CAAC,EACrCC,CAAC,CAAC,CACV,CACJ,CACA,OAAO0F,CACX,CAGA,qBAAqBE,EAAiBC,EAAoBC,EAAiBC,EAAgBC,EAAqB,CAC5GJ,EAAWA,EAAW,EACtBC,EAAcA,EAAc,EAC5BC,EAAWA,EAAW,EACtBC,GAAWA,EAAU,GAAK,EAC1B,IAAIhG,EAAGkG,EACFH,EAAY,KACbG,EAAa,GACbF,GAAW,GAEXE,EAAa,EAEjB,IAAMC,EAAiBJ,EAAY,KAAY,GAAK,EACpD,IAAIN,EACJ,GAAIQ,GAAeE,IAAkB,EACjC,IAAKnG,EAAI,EAAGA,EAAI,EAAGA,IACfyF,EAAQ,KAAK,eAAeO,CAAO,EACnCA,GAAWE,EACPT,IAAU,IAAG,KAAK,KAAKI,EAAWC,CAAW,EAAI,KAAK,SAASL,CAAK,GACxEK,EAAeA,EAAc,EAAK,QAGtC,KAAK9F,EAAI,EAAGA,EAAI,EAAGA,IACfyF,EAAQ,KAAK,eAAeO,CAAO,EAAIG,EACvCH,GAAWE,EACX,KAAK,KAAKL,EAAWC,CAAW,EAAI,KAAK,SAASL,CAAK,EACvDK,EAAeA,EAAc,EAAK,GAG9C,CAGA,iBAAiBD,EAAiBC,EAAoB,CAClDD,EAAWA,EAAW,EACtBC,EAAcA,EAAc,EAC5B,IAAI9F,EACJ,IAAMoG,EAAM,KAAK,SAAS,CAAC,EAC3B,IAAKpG,EAAI,EAAGA,EAAI,EAAG,EAAEA,EACjB,KAAK,KAAK6F,EAAWC,CAAW,EAAIM,EACpCN,EAAeA,EAAc,EAAK,GAE1C,CAEA,0BAA0BD,EAAiBC,EAAoBO,EAAiBC,EAAa,CACzFT,EAAWA,EAAW,EACtBC,EAAcA,EAAc,EAC5BO,EAAWA,EAAW,EACtB,IAAME,GAAWD,EAAO,GAAK,EAC7B,QAAStG,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IAAI+F,EAAW,KAAK,IAAIM,EAAWrG,EAAI,CAAC,EAAK,KAAK,IAAIqG,EAAWrG,EAAI,EAAI,CAAC,GAAK,EAC3EwG,EAAUT,EAAW,IACrBC,EAAU,GAAKQ,EACfT,EAAY,KACZC,GAAW,GAAKO,EAEhBP,GAAWO,GAEVR,EAAY,QAAc,EAC3B,KAAK,qBAAqBF,EAAUC,EAAaC,EAAUC,EAAS,EAAK,EAEzE,KAAK,iBAAiBH,EAAUC,CAAW,EAE/CA,EAAeA,EAAc,EAAK,GACtC,CACJ,CAEA,0BAA0BD,EAAiBC,EAAoBO,EAAiBC,EAAa,CACzFT,EAAWA,EAAW,EACtBC,EAAcA,EAAc,EAC5BO,EAAWA,EAAW,EACtB,IAAME,GAAWD,EAAO,GAAK,EAC7B,QAAStG,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzB,IAAI+F,EAAW,KAAK,IAAIM,EAAWrG,EAAI,CAAC,EAAK,KAAK,IAAIqG,EAAWrG,EAAI,EAAI,CAAC,GAAK,EAC/E,IAAK+F,EAAY,QAAc,EAC/B,KAAIS,EAAUT,EAAW,IACrBC,EAAU,GAAKQ,EACfT,EAAY,KACZC,GAAW,GAAKO,EAEhBP,GAAWO,EAEf,KAAK,qBAAqBV,EAAY7F,EAAI,EAAK8F,EAAc,IAAOC,EAAUC,EAAS,EAAI,EAC/F,CACJ,CAGA,kBAAkBvB,EAAaoB,EAAiBC,EAAoBW,EAAS,CACzEZ,EAAWA,EAAW,EACtBC,EAAcA,EAAc,EAC5B,IAAMY,EAAc,KAAK,UAAU,CAAC,EAAI,EAAK,KAAS,EAGtD,QAAS1G,EAAI,EAAGA,EAAI,IAAK,EAAEA,EAAG,CAK1B,QAJI2G,EAAO3G,EACP4G,EAAmB,GACnBC,EAAY,GACZC,EAAgB,IACXC,EAAI,EAAGA,EAAIN,EAAQ,OAAQM,IAAK,CACrC,IAAIC,EAASP,EAAQM,CAAC,EAClBE,EAASN,EAAOK,EAAO,CAAC,EAE5B,GAAIC,EAAS,EAAG,CAEZ,IAAIC,EAAe,CAACD,EAEhBC,EAAeJ,IAAeA,EAAgBI,GAClD,QACJ,CACA,GAAI,EAAAD,GAAU,GACd,CAAAL,EAAmB,GACnB,IAAIO,EAAa1C,EAAOuC,EAAO,CAAC,EAC5BI,EAAaV,EAAaM,EAAO,CAAC,EAAI,GAAKG,EAAa,EACxDE,EAAiBD,EAAa,EAAIH,EAClCxB,EAAQ,KAAK,eAAe4B,CAAc,EAC9C,GAAI5B,IAAU,EAGd,IAAIoB,EAAW,CAEX,KAAK,gBAAkB,GACvB,KACJ,CACA,KAAK,KAAKhB,GAAaC,EAAc9F,EAAI,KAAK,UAAU,CAAC,EAAK,IAAK,EAAI,KAAK,SAAS,GAAKyF,CAAK,EAC/FoB,EAAY,IAChB,CACI,CAACD,GAAoBE,EAAgB,IAGrC9G,GAAK8G,EAAgB,EAE7B,CACJ,CAEA,aAAajB,EAAiByB,EAAc,CACxCzB,EAAWA,EAAW,EACtByB,EAAQA,EAAQ,EAChB,IAAMC,EAAc,IAAM,KAAK,UAAU,CAAC,EAAI,IACxCC,EAAY,KAAK,SAASD,CAAW,EAC3C,KAAK,KAAK,KAAKC,EAAW3B,EAAUA,EAASyB,CAAK,CACtD,CAEA,eAAe7C,EAAa,CACxBA,GAAQ,EACR,IAAIgD,EAAW,KAAK,UAChBjH,EAAY,IACZC,EAAa,KAAK,gBAClBC,EAAW,KAAK,MAAQF,GAAc,EACtCG,EAAW,KAAK,OAASF,GAAe,EAC5C,IAAMiH,GAAcjD,EAAO9D,GAAW,KAAK,MAAS,EAC9CkF,EAAY6B,EAAYhH,EAAW,EACzC,GAAI,CAAC,KAAK,WAAa+D,EAAO,GAAKA,GAAQhE,EACnCgE,EAAO,KAAK,OACZ,KAAK,aAAaiD,EAAW,KAAK,KAAK,EAClCjD,GAAQ,IAAI9D,GACjB,KAAK,cAAc8D,EAAK,IAAI9D,GAAS,KAAK,MAAO,KAAK,KAAK,MAC5D,CACH,IAAIgH,EAAgBlD,EAAOgD,EAAS,CAAC,EACjCE,GAAiB,MACjBA,GAAiB,KAErB,IAAMlB,EAAU,KAAK,YAAYhC,CAAI,EAC/BqB,EAAgB2B,EAAS,CAAC,EAAI,IAAOhD,EAAO,GAAM,EAAIgD,EAAS,CAAC,EAChEpB,EAAW,KAAK,WAAasB,IAAkB,GAAK,GACpDrB,EAAOqB,EAAgB,EAE7B,KAAK,0BAA0B9B,EAAUC,EAAaO,EAAUC,CAAI,EACpE,KAAK,kBAAkB7B,EAAMoB,EAAUC,EAAaW,CAAO,EAC3D,KAAK,0BAA0BZ,EAAUC,EAAaO,EAAUC,CAAI,EAEpE,KAAK,aAAaoB,EAAWhH,CAAO,EACpC,KAAK,aAAamF,EAAW,IAAKnF,CAAO,EACrC+G,EAAS,CAAC,EAAK,IAEf,KAAK,aAAa5B,EAAU,CAAC,CAErC,CAEIpB,GAAQhE,IACR,KAAK,gBAAkB,IACnB,KAAK,cACL,KAAK,IAAI,gBAAgB,EAAI,GAIjCgE,GAAQhE,EACJ,KAAK,YAAc,EACnB,KAAK,eAEL,KAAK,YAAc,KAAK,UAAU,EAAG,EACrC,KAAK,qBAAuB,IAGhC,KAAK,YAAc,KAAK,UAAU,EAAG,EAErC,KAAK,sBACD,KAAK,UAAU,CAAC,EAAI,EAIhC,CAEA,gBAAiB,CACb,GAAI,KAAK,YAAc,EAAqB,CACxC,IAAIsD,EAAoC,CACpC,CAAC,gBAAiB,EAAG,KAAM,EAC3B,CAAC,aAAc,KAAK,UAAW,IAAO,EACtC,CAAC,oBAAqB,KAAK,qBAAsB,GAAG,CACxD,EACA,OAAOA,CACX,KACI,QAAO,MAAM,eAAe,CAEpC,CACJ,EAEa6D,GAAN,cAA0B/C,CAAO,CAAjC,kCACH,UAAO,IAAI,WAAW,EAAE,EACxB,gBAAa,EAEb,UAAUF,EAAe,CACrB,GAAI,KAAK,YAAa,CAElB,GAAI,KAAK,gBAAkB,EAAG,CAC1B,IAAIkD,EAAO,KAAK,YAAclD,GAAS,GACnCmD,EAAO/H,GAAM8H,EAAK,IAAI,IAAMA,GAAM,EAAG,IAAI,IAAMA,GAAM,EAAG,IAAI,EAAE,EAC9D/C,EAAW,KAAK,gBAAmB,KAAK,KAAK,OAAO,EACxD,KAAK,KAAKA,EAAS,CAAC,EAAI,KAAK,WAC7B,KAAK,KAAKA,CAAQ,EAAIH,EACtB,KAAK,SAASG,GAAY,CAAC,EAAIgD,EAC/B,KAAK,aAAenD,EACpB,KAAK,iBAAmB,KAAK,QAC7B,KAAK,eAAiB,EAC1B,MACI,KAAK,WAAaA,EAEtB,KAAK,iBACT,MACI,MAAM,UAAUA,CAAK,EAEzB,KAAK,MAAQ,EACjB,CACJ,EC1gCA,IAAMoD,GAAkB,EAEFC,GAAf,cAA8CC,EAAqB,CAAnE,kCAEL,kBAAe,QACf,iBAAc,IACd,uBAAoB,IACpB,yBAAsB,IACtB,sBAAmB,KAAK,cAAgB,IAAI,IAC5C,gBAAa,IAAI,GAAGF,GACpB,cAAW,GAEX,SAAW,IAAIG,GAOf,qBAAsB,CAAE,OAAO,IAAM,CAErC,KAAKC,EAAYC,EAAWC,EAAK,CAC/B,KAAK,oBAAoBF,CAAM,EAC/B,KAAK,gBAAgBC,CAAK,EAC1B,KAAK,QAAUE,GAAmB,KAAK,OAAQ,KAAK,eAAe,EAAG,KAAK,oBAAoB,CAAC,EAChG,KAAK,IAAMD,EACX,KAAK,aAAeA,GAAO,IAAIE,GAAkBF,EAAI,IAAKN,GAAiB,KAAK,UAAU,CAC5F,CAEA,aAAaS,EAAQ,CACnB,MAAM,aAAaA,CAAM,EACzB,IAAIC,EAAM,CACR,gBAAkBC,GAAM,CAClBA,GACF,KAAK,aAAa,CAItB,CACF,EACA,KAAK,IAAM,KAAK,OAAO,KAAK,OAAQD,EAAK,EAAI,CAC/C,CAEA,aAAaE,EAAwB,CACnC,MAAM,aAAaA,CAAK,EACxB,KAAK,IAAI,MAAQA,GAAS,KAAK,SACjC,CAEA,OAAOC,EAAWH,EAAKI,EAAS,CAC9B,OAAO,IAAIC,EAASF,EAAWH,EAAKI,CAAO,CAC7C,CAEA,eAAgB,CACd,KAAK,OAAS,KAAK,cAAgB,KAAK,aAAa,SAAS,KAAK,KAAK,CAC1E,CAEA,cAAe,CACb,KAAK,IAAI,aAAa,KAAK,QAAQ,CACrC,CAEA,UAAUE,EAAO,CACf,MAAM,UAAUA,CAAK,EACrB,KAAK,IAAI,aAAaA,EAAM,GAAM,CACpC,CACA,WAAY,CACV,IAAIA,EAAQ,MAAM,UAAU,EAC5B,OAAAA,EAAM,IAAS,KAAK,IAAI,SAAS,EAC1BA,CACT,CACA,OAAQ,CACN,MAAM,MAAM,EACZ,KAAK,IAAI,MAAM,EACf,KAAK,IAAI,MAAM,CACjB,CAEA,oBAAqB,CACnB,MAAO,CAAC,MAAM,QAAQ,KAAK,CAC7B,CACA,aAAaC,EAAUD,EAAO,CAC5B,OAAQC,EAAU,CAChB,IAAK,MAAO,OAAO,KAAK,qBAAqBD,EAAM,GAAG,CACxD,CACF,CACA,qBAAqBE,EAAK,CACxB,OAAO,KAAK,IAAI,cAAc,CAChC,CACA,gBAAgBC,EAAqB,CACnC,OAAO,KAAK,IAAI,IAAIA,EAAI,KAAM,CAChC,CACF",
  "names": ["TMS9918A", "fb32", "cru", "enableFlicker", "NullProbe", "RGBA", "i", "y", "imageData", "width", "imageDataAddr", "screenMode", "textMode", "bitmapMode", "drawWidth", "drawHeight", "hBorder", "vBorder", "fgColor", "bgColor", "ram", "nameTable", "colorTable", "charPatternTable", "colorTableMask", "patternTableMask", "spriteAttributeTable", "spritePatternTable", "spriteSize", "spriteMagnify", "spriteDimension", "maxSpritesOnLine", "palette", "collision", "fifthSprite", "fifthSpriteIndex", "x", "color", "rgbColor", "name", "tableOffset", "colorByte", "patternByte", "y1", "spriteBuffer", "spritesOnLine", "endMarkerFound", "spriteAttributeAddr", "s", "sy", "sy1", "y2", "yMasked", "sx", "sPatternNo", "sColor", "sLine", "sPatternBase", "sx1", "sx2", "sx3", "sPatternByte", "rowOffset", "lineOffset", "x1", "spriteColor", "regmask", "reg0", "reg1", "tables", "hex", "row", "lpad", "start", "length", "anchorAddr", "text", "anchorLine", "addr", "line", "hx", "value", "state", "SMSVDP", "palindex", "oldAddress", "vdp_addr", "val", "planarBase", "twiddledBase", "val0", "val1", "val2", "val3", "effectiveBit", "index", "spriteInfo", "active", "spriteHeight", "lineAddr", "pixelOffset", "tileData", "tileDef", "transparent", "tileDefInc", "paletteOffset", "rgb", "nameAddr", "yMod", "yOffset", "tileNum", "sprites", "spriteBase", "xPos", "spriteFoundThisX", "writtenTo", "minDistToNext", "k", "sprite", "offset", "distToSprite", "spriteLine", "spriteAddr", "untwiddledAddr", "count", "borderIndex", "borderRGB", "vdp_regs", "startAddr", "effectiveLine", "GameGearVDP", "rgb4", "rgba", "audioOversample", "BaseZ80VDPBasedMachine", "BasicScanlineMachine", "Z80", "membus", "iobus", "psg", "newKeyboardHandler", "TssChannelAdapter", "pixels", "cru", "b", "probe", "frameData", "flicker", "TMS9918A", "state", "category", "ppu", "a"]
}
