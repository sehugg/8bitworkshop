{
  "version": 3,
  "sources": ["../src/platform/sound_williams.ts"],
  "sourcesContent": ["\nimport { Z80, Z80State } from \"../common/cpu/ZilogZ80\";\nimport { BasicMachine, CPU, Bus } from \"../common/devices\";\nimport { Platform, BaseZ80MachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS, RAM, newAddressDecoder, padBytes, noise, setKeyboardFromMap, AnimationTimer, RasterVideo, Keys, makeKeycodeMap } from \"../common/emu\";\nimport { SampleAudio } from \"../common/audio\";\n\nvar WILLIAMS_SOUND_PRESETS = [\n  { id: 'swave.c', name: 'Wavetable Synth' },\n];\n\n/****************************************************************************\n\n    Midway/Williams Audio Boards\n    ----------------------------\n\n    6809 MEMORY MAP\n\n    Function                                  Address     R/W  Data\n    ---------------------------------------------------------------\n    Program RAM                               0000-07FF   R/W  D0-D7\n\n    Music (YM-2151)                           2000-2001   R/W  D0-D7\n\n    6821 PIA                                  4000-4003   R/W  D0-D7\n\n    HC55516 clock low, digit latch            6000        W    D0\n    HC55516 clock high                        6800        W    xx\n\n    Bank select                               7800        W    D0-D2\n\n    Banked Program ROM                        8000-FFFF   R    D0-D7\n\n****************************************************************************/\n\nclass WilliamsSound extends BasicMachine {\n  cpuFrequency = 18432000 / 6; // 3.072 MHz\n  cpuCyclesPerFrame = this.cpuFrequency / 60;\n  cpuAudioFactor = 32;\n  canvasWidth = 256;\n  numVisibleScanlines = 256;\n  defaultROMSize = 0x4000;\n  sampleRate = this.cpuFrequency;\n  overscan = true;\n  \n  cpu : Z80;\n  ram = new Uint8Array(0x400);\n  iobus : Bus;\n  \n  command : number = 0;\n  dac : number = 0;\n  dac_float : number = 0;\n  xpos : number = 0;\n\n  read = newAddressDecoder([\n    [0x0000, 0x3fff, 0x3fff, (a) => { return this.rom && this.rom[a]; }],\n    [0x4000, 0x7fff, 0x3ff, (a) => { return this.ram[a]; }]\n  ]);\n\n  write = newAddressDecoder([\n    [0x4000, 0x7fff, 0x3ff, (a, v) => { this.ram[a] = v; }],\n  ]);\n  \n  constructor() {\n    super();\n    this.cpu = new Z80();\n    this.connectCPUMemoryBus(this);\n    this.connectCPUIOBus({\n      read: (addr) => {\n        return this.command & 0xff;\n      },\n      write: (addr, val) => {\n        let dac = this.dac = val & 0xff;\n        this.dac_float = ((dac & 0x80) ? -256 + dac : dac) / 128.0;\n      }\n    });\n  }\n  \n  advanceFrame(trap) : number {\n    this.pixels && this.pixels.fill(0); // clear waveform\n    let maxCycles = this.cpuCyclesPerFrame;\n    var n = 0;\n    while (n < maxCycles) {\n      if (trap && trap()) {\n        break;\n      }\n      n += this.advanceCPU();\n    }\n    return n;\n  }\n  \n  advanceCPU() {\n    var n = super.advanceCPU();\n    this.audio && this.audio.feedSample(this.dac_float, n);\n    // draw waveform on screen\n    if (this.pixels && !this.cpu.isHalted()) {\n      this.pixels[((this.xpos >> 8) & 0xff) + ((255-this.dac) << 8)] = 0xff33ff33;\n      this.xpos = (this.xpos + n) & 0xffffff;\n    }\n    return n;\n  }\n\n  setKeyInput(key:number, code:number, flags:number) : void {\n    var intr = (key - 49);\n    if (intr >= 0 && (flags & 1)) {\n      this.command = intr & 0xff;\n      this.cpu.reset();\n    }\n  }\n}\n\nexport class WilliamsSoundPlatform extends BaseZ80MachinePlatform<WilliamsSound> {\n\n  newMachine()          { return new WilliamsSound(); }\n  getPresets()          { return WILLIAMS_SOUND_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.read(a); }\n\n}\n\nPLATFORMS['sound_williams-z80'] = WilliamsSoundPlatform;\n"],
  "mappings": "4HAOA,IAAIA,EAAyB,CAC3B,CAAE,GAAI,UAAW,KAAM,iBAAkB,CAC3C,EA0BMC,EAAN,cAA4BC,CAAa,CA4BvC,aAAc,CACZ,MAAM,EA5BR,kBAAe,QAAW,EAC1B,uBAAoB,KAAK,aAAe,GACxC,oBAAiB,GACjB,iBAAc,IACd,yBAAsB,IACtB,oBAAiB,MACjB,gBAAa,KAAK,aAClB,cAAW,GAGX,SAAM,IAAI,WAAW,IAAK,EAG1B,aAAmB,EACnB,SAAe,EACf,eAAqB,EACrB,UAAgB,EAEhB,UAAOC,EAAkB,CACvB,CAAC,EAAQ,MAAQ,MAASC,GAAe,KAAK,KAAO,KAAK,IAAIA,CAAC,CAAI,EACnE,CAAC,MAAQ,MAAQ,KAAQA,GAAe,KAAK,IAAIA,CAAC,CAAI,CACxD,CAAC,EAED,WAAQD,EAAkB,CACxB,CAAC,MAAQ,MAAQ,KAAO,CAACC,EAAGC,IAAM,CAAE,KAAK,IAAID,CAAC,EAAIC,CAAG,CAAC,CACxD,CAAC,EAIC,KAAK,IAAM,IAAIC,EACf,KAAK,oBAAoB,IAAI,EAC7B,KAAK,gBAAgB,CACnB,KAAOC,GACE,KAAK,QAAU,IAExB,MAAO,CAACA,EAAMC,IAAQ,CACpB,IAAIC,EAAM,KAAK,IAAMD,EAAM,IAC3B,KAAK,WAAcC,EAAM,IAAQ,KAAOA,EAAMA,GAAO,GACvD,CACF,CAAC,CACH,CAEA,aAAaC,EAAe,CAC1B,KAAK,QAAU,KAAK,OAAO,KAAK,CAAC,EACjC,IAAIC,EAAY,KAAK,kBAErB,QADIC,EAAI,EACDA,EAAID,GACL,EAAAD,GAAQA,EAAK,IAGjBE,GAAK,KAAK,WAAW,EAEvB,OAAOA,CACT,CAEA,YAAa,CACX,IAAIA,EAAI,MAAM,WAAW,EACzB,YAAK,OAAS,KAAK,MAAM,WAAW,KAAK,UAAWA,CAAC,EAEjD,KAAK,QAAU,CAAC,KAAK,IAAI,SAAS,IACpC,KAAK,QAAS,KAAK,MAAQ,EAAK,MAAU,IAAI,KAAK,KAAQ,EAAE,EAAI,WACjE,KAAK,KAAQ,KAAK,KAAOA,EAAK,UAEzBA,CACT,CAEA,YAAYC,EAAYC,EAAaC,EAAqB,CACxD,IAAIC,EAAQH,EAAM,GACdG,GAAQ,GAAMD,EAAQ,IACxB,KAAK,QAAUC,EAAO,IACtB,KAAK,IAAI,MAAM,EAEnB,CACF,EAEaC,EAAN,cAAoCC,CAAsC,CAE/E,YAAsB,CAAE,OAAO,IAAIjB,CAAiB,CACpD,YAAsB,CAAE,OAAOD,CAAwB,CACvD,qBAAsB,CAAE,MAAO,IAAM,CACrC,YAAYI,EAAU,CAAE,OAAO,KAAK,QAAQ,KAAKA,CAAC,CAAG,CAEvD,EAEAe,EAAU,oBAAoB,EAAIF",
  "names": ["WILLIAMS_SOUND_PRESETS", "WilliamsSound", "BasicMachine", "newAddressDecoder", "a", "v", "Z80", "addr", "val", "dac", "trap", "maxCycles", "n", "key", "code", "flags", "intr", "WilliamsSoundPlatform", "BaseZ80MachinePlatform", "PLATFORMS"]
}
