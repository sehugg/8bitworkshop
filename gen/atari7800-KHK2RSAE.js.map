{
  "version": 3,
  "sources": ["../src/machine/atari7800.ts", "../src/platform/atari7800.ts"],
  "sourcesContent": ["\nimport { MOS6502, MOS6502State } from \"../common/cpu/MOS6502\";\nimport { BasicMachine, RasterFrameBased, Bus, ProbeAll } from \"../common/devices\";\nimport { KeyFlags, newAddressDecoder, padBytes, Keys, makeKeycodeMap, newKeyboardHandler, EmuHalt, dumpRAM, gtia_ntsc_to_rgb } from \"../common/emu\";\nimport { TssChannelAdapter, MasterAudio, POKEYDeviceChannel } from \"../common/audio\";\nimport { hex, rgb2bgr } from \"../common/util\";\n\n// https://atarihq.com/danb/a7800.shtml\n// https://atarihq.com/danb/files/maria_r1.txt\n// https://atarihq.com/danb/files/7800vid.txt\n// https://sites.google.com/site/atari7800wiki/\n\ninterface Atari7800StateBase {\n  ram : Uint8Array<ArrayBuffer>;\n  regs6532 : Uint8Array;\n}\n\ninterface Atari7800ControlsState {\n  inputs : Uint8Array<ArrayBuffer>;\n}\n\ninterface Atari7800State extends Atari7800StateBase, Atari7800ControlsState {\n  c : MOS6502State;\n  tia : {\n    regs : Uint8Array,\n  };\n  maria : {\n    regs : Uint8Array,\n    offset,dll,dlstart : number;\n    dli,h16,h8 : boolean;\n  };\n  pia : {\n    timer: number;\n    interval: number;\n  }\n}\n\nconst SWCHA = 0;\nconst SWCHB = 2;\nconst INPT0 = 8;\n\nconst Atari7800_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.A,        INPT0+0, 0x80],\n  [Keys.B,        INPT0+1, 0x80],\n  [Keys.GP_A,     INPT0+0, 0x80],\n  [Keys.GP_B,     INPT0+1, 0x80],\n  [Keys.SELECT,   SWCHB, -0x02],\n  [Keys.START,    SWCHB, -0x01],\n  [Keys.UP,       SWCHA, -0x10],\n  [Keys.DOWN,     SWCHA, -0x20],\n  [Keys.LEFT,     SWCHA, -0x40],\n  [Keys.RIGHT,    SWCHA, -0x80],\n  \n  [Keys.P2_A,     INPT0+2, 0x80],\n  [Keys.P2_B,     INPT0+3, 0x80],\n  //[Keys.P2_SELECT, 1, 2],\n  //[Keys.P2_START,  1, 3],\n  [Keys.P2_UP,     SWCHA, -0x01],\n  [Keys.P2_DOWN,   SWCHA, -0x02],\n  [Keys.P2_LEFT,   SWCHA, -0x04],\n  [Keys.P2_RIGHT,  SWCHA, -0x08],\n]);\n\n// http://www.ataripreservation.org/websites/freddy.offenga/megazine/ISSUE5-PALNTSC.html\n// http://7800.8bitdev.org/index.php/7800_Software_Guide#APPENDIX_4:_FRAME_TIMING\n// https://forums.atariage.com/topic/224025-7800-hardware-facts/\nconst CLK = 3579545;\nconst linesPerFrame = 263;\nconst numVisibleLines = 258-16;\nconst colorClocksPerLine = 451; // 451? 452? 456?\nconst colorClocksPreDMA = 28;\nconst colorClocksShutdownOther = 16;\nconst colorClocksShutdownLast = 24;\nconst audioOversample = 2;\nconst audioSampleRate = linesPerFrame*60*audioOversample;\n\n// TIA chip\n\nclass TIA {\n  regs = new Uint8Array(0x20);\n  \n  reset() {\n    this.regs.fill(0);\n  }\n  read(a : number) : number {\n    return this.regs[a] | 0;\n  }\n  write(a : number, v : number) {\n    this.regs[a] = v;\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0)\n    };\n  }\n  loadState(s) {\n    for (let i=0; i<32; i++)\n      this.write(i, s.regs[i]);\n  }\n  static stateToLongString(state) : string {\n    let s = \"\";\n    s += dumpRAM(state.regs, 0, 32);\n    return s;\n  }\n}\n\n// MARIA chip\n\nclass MARIA {\n  bus : Bus;\n  cycles : number = 0;\n  regs = new Uint8Array(0x20);\n  offset : number = -1;\n  dll : number = 0;\n  dlstart : number = 0;\n  dli : boolean = false;\n  h16 : boolean = false;\n  h8 : boolean = false;\n  writemode : number = 0;\n  indirect : boolean = false;\n  pixels = new Uint8Array(320);\n  WSYNC : number = 0;\n\n  reset() {\n    this.regs.fill(0);\n    // TODO?\n  }\n  read(a : number) : number {\n    return this.regs[a] | 0;\n  }\n  write(a : number, v : number) {\n    this.regs[a] = v;\n    if (a == 0x04) this.WSYNC++;\n    //console.log(hex(a), '=', hex(v));\n  }\n  saveState() {\n    return {\n      regs: this.regs.slice(0),\n      offset: this.offset,\n      dll: this.dll,\n      dlstart: this.dlstart,\n      dli: this.dli,\n      h16: this.h16,\n      h8: this.h8,\n      indirect: this.indirect,\n      writemode: this.writemode,\n    };\n  }\n  loadState(s) {\n    for (let i=0; i<32; i++)\n      this.write(i, s.regs[i]|0);\n    this.offset = s.offset|0;\n    this.dll = s.dll|0;\n    this.dlstart = s.dlstart|0;\n    this.dli = !!s.dli;\n    this.h16 = !!s.h16;\n    this.h8 = !!s.h8;\n    this.indirect = !!s.indirect;\n    this.writemode = s.writemode|0;\n  }\n  isDMAEnabled() {\n    return (this.regs[0x1c] & 0x60) == 0x40;\n  }\n  getDLLStart() {\n    return (this.regs[0x0c] << 8) + this.regs[0x10];\n  }\n  getCharBaseAddress() {\n    return (this.regs[0x14] << 8) + this.offset;\n  }\n  setVBLANK(b : boolean) {\n    if (b) {\n      this.regs[0x08] |= 0x80;\n      this.offset = -1;\n      this.dll = this.getDLLStart();\n      this.dli = this.bus && (this.bus.read(this.dll) & 0x80) != 0; // if DLI on first zone\n    } else {\n      this.regs[0x08] &= ~0x80;\n    }\n  }\n  readDLLEntry(bus) {\n    // display lists must be in RAM (TODO: probe?)\n    if (this.dll >= 0x4000) { return; }\n    let x = bus.read(this.dll);\n    this.offset = (x & 0xf);\n    this.h16 = (x & 0x40) != 0;\n    this.h8  = (x & 0x20) != 0;\n    this.dlstart = (bus.read(this.dll+1)<<8) + bus.read(this.dll+2);\n    //console.log(hex(this.dll,4), this.offset, hex(this.dlstart,4));\n    this.dll = (this.dll + 3) & 0xffff; // TODO: can also only cross 1 page?\n    this.dli = (bus.read(this.dll) & 0x80) != 0; // DLI flag is from next DLL entry\n  }\n  isHoley(a : number) : boolean {\n    if (this.indirect) return false;\n    if (a & 0x8000) {\n      if (this.h16 && (a & 0x1000)) return true;\n      if (this.h8  && (a & 0x800))  return true;\n    }\n    return false;\n  }\n  readDMA(a : number) : number {\n    if (this.isHoley(a)) {\n      return 0;\n    } else {\n      this.cycles += 3;\n      return this.bus.read(a);\n    }\n  }\n  doDMA(bus : Bus) {\n    this.bus = bus;\n    this.cycles = 0;\n    const pix = this.pixels;\n    pix.fill(this.regs[0x0]); // background color\n    if (this.isDMAEnabled()) {\n      // last line in zone gets additional 8 cycles\n      this.cycles += this.offset == 0 ? colorClocksShutdownLast : colorClocksShutdownOther;\n      // time for a new DLL entry?\n      if (this.offset < 0) {\n        this.readDLLEntry(bus);\n      }\n      // read the DL (only can span two pages)\n      let dlhi = this.dlstart & 0xff00;\n      let dlofs = this.dlstart & 0xff;\n      do {\n        // read DL entry\n        let b0 = bus.read(dlhi + ((dlofs+0) & 0x1ff));\n        let b1 = bus.read(dlhi + ((dlofs+1) & 0x1ff));\n        if (b1 == 0) break; // end of DL\n        // display lists must be in RAM (TODO: probe?)\n        if (dlhi >= 0x4000) { break; }\n        let b2 = bus.read(dlhi + ((dlofs+2) & 0x1ff));\n        let b3 = bus.read(dlhi + ((dlofs+3) & 0x1ff));\n        let indirect = false;\n        // extended header?\n        if ((b1 & 31) == 0) {\n          var pal = b3 >> 5;\n          var width = 32 - (b3 & 31);\n          var xpos = bus.read(dlhi + ((dlofs+4) & 0x1ff));\n          indirect = (b1 & 0x20) != 0;\n          dlofs += 5;\n          this.cycles += 10;\n          this.writemode = b1 & 0x80;\n        } else {\n          // direct mode\n          var xpos = b3;\n          var pal = b1 >> 5;\n          var width = 32 - (b1 & 31);\n          dlofs += 4;\n          this.cycles += 8;\n        }\n        this.indirect = indirect;\n        const gfxadr = b0 + (((b2 + (indirect?0:this.offset)) & 0xff) << 8);\n        xpos *= 2;\n        const ctrlreg = this.regs[0x1c];\n        // gfx mode (readmode + writemode * 4)\n        const grmode = (ctrlreg & 0x3) + (this.writemode ? 4 : 0);\n        // kangaroo mode\n        const kangaroo = (ctrlreg & 0x4) != 0;\n        // double bytes?\n        const dbl = indirect && (ctrlreg & 0x10) != 0;\n        if (dbl) { width *= 2; }\n        //if (this.offset == 0) console.log(hex(dla,4), hex(gfxadr,4), xpos, width, pal, readmode);\n        for (var i=0; i<width; i++) {\n          let data = this.readDMA( dbl ? (gfxadr+(i>>1)) : (gfxadr+i) );\n          if (indirect) {\n            let indadr = ((this.regs[0x14] + this.offset) << 8) + data;\n            if (dbl && (i&1)) {\n              indadr++;\n              this.cycles -= 3; // indirect read has 6/9 cycles\n            }\n            data = this.readDMA(indadr);\n          }\n          // TODO: more modes (https://github.com/gstanton/ProSystem1_3/blob/master/Core/Maria.cpp)\n          switch (grmode) {\n            case 0:\t// 160A\n              for (let j=0; j<4; j++) {\n                let col = (data >> 6) & 3;\n                if (col || kangaroo) {\n                  pix[xpos] = pix[xpos+1] = this.regs[(pal<<2) + col];\n                }\n                data <<= 2;\n                xpos = (xpos + 2) & 0x1ff;\n              }\n              break;\n            case 3:\t// 320A\n              for (let j=0; j<8; j++) {\n                let col = (data & 0x80) >> 6;\n                if (col || kangaroo) {\n                  pix[xpos] = this.regs[(pal<<2) + col];\n                }\n                data <<= 1;\n                xpos = (xpos + 1) & 0x1ff;\n              }\n              break;\n            case 4: // 160B\n              for (let j=0; j<2; j++) {\n                let col = ((data >> 6) & 0b0011) + (data & 0b1100);\n                if ((col & 3) || kangaroo) {\n                  pix[xpos] = pix[xpos+1] = pix[xpos+2] = pix[xpos+3] = this.regs[((pal&4)<<2) + col];\n                }\n                data <<= 2;\n                xpos = (xpos + 2) & 0x1ff;\n              }\n              break;\n            case 6: // 320B\n              for (let j=0; j<4; j++) {\n                let col = ((data & 0x80) >> 6) | ((data & 0x08) >> 3);\n                if (col || kangaroo) {\n                  pix[xpos] = this.regs[(pal<<2) + col];\n                }\n                data <<= 1;\n                xpos = (xpos + 1) & 0x1ff;\n              }\n              break;\n            case 2: // 320D\n              for (let j=0; j<8; j++) {\n                let col = ((data & 0x80) >> 6);\n                col += (j & 1) ? (pal & 1) : ((pal >> 1) & 1);\n                if (col || kangaroo) {\n                  pix[xpos] = this.regs[(pal<<2) + col];\n                }\n                data <<= 1;\n                xpos = (xpos + 1) & 0x1ff;\n              }\n              break;\n            case 7: // 320C\n              let data0 = data;\n              for (let j=0; j<4; j++) {\n                if (j == 2) data0 <<= 2;\n                let col = (data & 0x80) >> 6;\n                let ppal = (pal & 4) | ((data0 >> 2) & 3);\n                if (col || kangaroo) {\n                  pix[xpos] = this.regs[(ppal<<2) + col];\n                }\n                data <<= 1;\n                xpos = (xpos + 1) & 0x1ff;\n              }\n              break;\n          }\n        }\n      } while (this.cycles < colorClocksPerLine); // TODO?\n      // decrement offset\n      this.offset -= 1;\n    }\n    return this.cycles;\n  }\n  doInterrupt() : boolean {\n    if (this.dli && this.offset < 0) {\n      this.dli = false;\n      return true;\n    } else\n      return false;\n    //return this.dli;// && this.offset == 1;\n  }\n  static stateToLongString(state) : string {\n    let s = \"\";\n    s += dumpRAM(state.regs, 0, 32);\n    s += \"\\n   DLL: $\" + hex((state.regs[0x0c] << 8) + state.regs[0x10],4) + \" @ $\" + hex(state.dll,4);\n    s += \"\\n    DL: $\" + hex(state.dlstart,4);\n    s += \"\\nOffset:  \" + state.offset;\n    s += \"\\n   DLI?  \" + state.dli;\n    return s;\n  }\n}\n\n// Atari 7800\n\nexport class Atari7800 extends BasicMachine implements RasterFrameBased {\n\n  cpuFrequency = 1789772;\n  canvasWidth = 320;\n  numTotalScanlines = linesPerFrame;\n  numVisibleScanlines = numVisibleLines;\n  defaultROMSize = 0xc000;\n  cpuCyclesPerLine = 113.5;\n  sampleRate = audioSampleRate;\n\n  cpu : MOS6502;\n  ram : Uint8Array = new Uint8Array(0x1000);\n  regs6532 = new Uint8Array(4);\n  piatimer : number = 0;\n  timerinterval : number = 1;\n  tia : TIA = new TIA();\n  maria : MARIA = new MARIA();\n  pokey1; //TODO: type\n  audioadapter;\n  \n  lastFrameCycles = 0;\n  xtracyc = 0;\n  \n  read  : (a:number) => number;\n  write : (a:number, v:number) => void;\n  \n  dmaBus : Bus; // to pass to MARIA\n\n  constructor() {\n    super();\n    this.cpu = new MOS6502();\n    this.read = newAddressDecoder([\n        [0x0008, 0x000d,   0x0f, (a) => { this.xtracyc++; return this.readInput(a); }],\n        [0x0000, 0x001f,   0x1f, (a) => { this.xtracyc++; return this.tia.read(a); }],\n        [0x0020, 0x003f,   0x1f, (a) => { return this.maria.read(a); }],\n        [0x0040, 0x00ff,   0xff, (a) => { return this.ram[a + 0x800]; }],\n        [0x0100, 0x013f,   0xff, (a) => { return this.read(a); }], // shadow\n        [0x0140, 0x01ff,  0x1ff, (a) => { return this.ram[a + 0x800]; }],\n        [0x0280, 0x02ff,   0x7f, (a) => { this.xtracyc++; return this.readPIA(a); }],\n        [0x1800, 0x27ff, 0xffff, (a) => { return this.ram[a - 0x1800]; }],\n        [0x2800, 0x3fff,  0x7ff, (a) => { return this.read(a | 0x2000); }], // shadow\n        [0x4000, 0xffff, 0xffff, (a) => { return this.rom ? this.rom[a - 0x4000] : 0; }],\n        [0x0000, 0xffff, 0xffff, (a) => { return this.probe && this.probe.logIllegal(a); }],\n      ]);\n    this.write = newAddressDecoder([\n        [0x0015, 0x001A,   0x1f, (a,v) => { this.xtracyc++; this.pokey1.setTIARegister(a, v); }],\n        [0x0000, 0x001f,   0x1f, (a,v) => { this.xtracyc++; this.tia.write(a,v); }],\n        [0x0020, 0x003f,   0x1f, (a,v) => { this.maria.write(a,v); }],\n        [0x0040, 0x00ff,   0xff, (a,v) => { this.ram[a + 0x800] = v; }],\n        [0x0100, 0x013f,   0xff, (a,v) => { this.write(a,v); }], // shadow\n        [0x0140, 0x01ff,  0x1ff, (a,v) => { this.ram[a + 0x800] = v; }],\n        [0x0280, 0x02ff,   0x7f, (a,v) => { this.xtracyc++; this.writePIA(a,v) }],\n        [0x1800, 0x27ff, 0xffff, (a,v) => { this.ram[a - 0x1800] = v; }],\n        [0x2800, 0x3fff,  0x7ff, (a,v) => { this.write(a | 0x2000, v); }], // shadow\n        [0xbfff, 0xbfff, 0xffff, (a,v) => { }], // TODO: bank switching?\n        [0x0000, 0xffff, 0xffff, (a,v) => { this.probe && this.probe.logIllegal(a); }],\n      ]);\n    this.connectCPUMemoryBus(this);\n    this.dmaBus = this.probeDMABus(this);\n    this.handler = newKeyboardHandler(this.inputs, Atari7800_KEYCODE_MAP);\n    this.pokey1 = new POKEYDeviceChannel();\n    this.audioadapter = new TssChannelAdapter(this.pokey1, audioOversample, audioSampleRate);\n  }\n  \n  readConst(a) {\n    // make sure we don't log during this\n    let oldprobe = this.probe;\n    this.probe = null;\n    let v = this.read(a);\n    this.probe = oldprobe;\n    return v;\n  }\n\n  readInput(a:number) : number {\n    switch (a) {\n      case 0xc: return ~this.inputs[0x8] & 0x80; //INPT4\n      case 0xd: return ~this.inputs[0x9] & 0x80; //INPT5\n      default: return this.inputs[a]|0;\n    }\n  }\n\n  readPIA(a:number) : number {\n    switch (a) {\n      case 0x0:\n      case 0x2:\n        return this.inputs[a]; // SWCHA, SWCHB\n      case 0x1:\n      case 0x3:\n        return this.regs6532[a]; // CTLSWA, CTLSWB\n      case 0x4:\n        return this.getPIATimerValue(); // INTIM\n      default:\n        return 0;\n    }\n  }\n\n  writePIA(a:number, v:number) : void {\n    switch (a) {\n      case 0x0:\n      case 0x1:\n      case 0x2:\n      case 0x3:\n        this.regs6532[a] = v;\n        return;\n      case 0x14: this.setPIATimer(v, 0); return; // TIM1T\n      case 0x15: this.setPIATimer(v, 3); return; // TIM8T\n      case 0x16: this.setPIATimer(v, 6); return; // TIM64T\n      case 0x17: this.setPIATimer(v, 10); return; // T1024T\n      case 0x18: this.setPIATimer(v, 6); return; // TIM64TI (TODO)\n    }\n  }\n\n  setPIATimer(v:number, shift:number) : void {\n    this.piatimer = (v + 1) << shift;\n    this.timerinterval = shift;\n  }\n\n  getPIATimerValue() : number {\n    let t = this.piatimer;\n    if (t > 0) {\n      return t >> this.timerinterval;\n    } else {\n      return t & 0xff;\n    }\n  }\n\n  advanceCPU() : number {\n    var clk = super.advanceCPU();\n    this.tickPIATimer(clk); // TODO?\n    if (this.xtracyc) {\n      clk += this.xtracyc;\n      this.tickClocks(this.xtracyc);\n      this.xtracyc = 0;\n    }\n    return clk;\n  }\n\n  tickClocks(clocks:number) {\n    this.probe.logClocks(clocks);\n    this.tickPIATimer(clocks);\n  }\n  tickPIATimer(clocks:number) {\n    this.piatimer = Math.max(-256, this.piatimer - clocks);\n  }\n\n  advanceFrame(trap) : number {\n    var idata = this.pixels;\n    var iofs = 0;\n    var rgb;\n    var mc = 0;\n    var fc = 0;\n    var steps = 0;\n    this.lastFrameCycles = -1;\n    this.probe.logNewFrame();\n    //console.log(hex(this.cpu.getPC()), hex(this.maria.dll));\n    // visible lines\n    for (var sl=0; sl<linesPerFrame; sl++) {\n      this.scanline = sl;\n      var visible = sl < numVisibleLines;\n      this.maria.setVBLANK(!visible);\n      this.maria.WSYNC = 0;\n      // pre-DMA clocks\n      while (mc < colorClocksPreDMA) {\n        if (this.maria.WSYNC) break;\n        if (trap && trap()) {\n          trap = null;\n          sl = 999;\n          this.lastFrameCycles = mc;\n          break; // TODO?\n        }\n        mc += this.advanceCPU() << 2;\n        steps++;\n      }\n      // is this scanline visible?\n      if (visible) {\n        // do DMA for scanline?\n        let dmaClocks = this.maria.doDMA(this.dmaBus);\n        this.tickClocks(dmaClocks >> 2); // TODO: logDMA\n        mc += dmaClocks;\n        // copy line to frame buffer\n        if (idata) {\n          const ctrlreg = this.maria.regs[0x1c];\n          const colorkill = (ctrlreg & 0x80) != 0;\n          const mask = colorkill ? 0x0f : 0xff;\n          for (var i=0; i<320; i++) {\n            idata[iofs++] = COLORS_RGBA[this.maria.pixels[i] & mask];\n          }\n        }\n      }\n      // do interrupt? (if visible or before 1st scanline)\n      if ((visible || sl == linesPerFrame-1) && this.maria.doInterrupt()) {\n        this.probe.logInterrupt(0);\n        this.cpu.NMI();\n      }\n      // post-DMA clocks\n      while (mc < colorClocksPerLine) {\n        if (this.maria.WSYNC) {\n          this.probe.logWait(0);\n          this.tickClocks((colorClocksPerLine - mc) >> 2);\n          mc = colorClocksPerLine;\n          break;\n        }\n        if (trap && trap()) {\n          trap = null;\n          sl = 999;\n          this.lastFrameCycles = mc;\n          break;\n        }\n        mc += this.advanceCPU() << 2;\n        steps++;\n      }\n      // audio\n      this.audio && this.audioadapter.generate(this.audio);\n      // update clocks, scanline\n      mc -= colorClocksPerLine;\n      fc += mc;\n      this.probe.logNewScanline();\n    }\n    /*\n      // TODO let bkcol = this.maria.regs[0x0];\n      // TODO $(this.video.canvas).css('background-color', COLORS_WEB[bkcol]);\n    */\n    return steps;\n  }\n\n  // TODO: doesn't work when breakpoint\n  getRasterX() { return (this.lastFrameCycles + colorClocksPerLine) % colorClocksPerLine; }\n\n  getRasterY() { return this.scanline; }\n\n  getRasterCanvasPosition() {\n    return { x: this.getRasterX(), y: this.getRasterY() };\n  }\n\n  loadROM(data) {\n    if (data.length == 0xc080) data = data.slice(0x80); // strip header\n    this.rom = padBytes(data, this.defaultROMSize, true);\n  }\n\n  reset() {\n    super.reset();\n    this.tia.reset();\n    this.maria.reset();\n    this.inputs.fill(0x0);\n    this.inputs[SWCHA] = 0xff;\n    this.inputs[SWCHB] = 1+2+8;\n    this.setPIATimer(0, 0); // TODO?\n    //this.cpu.advanceClock(); // needed for test to pass?\n  }\n\n  readAddress(addr : number) {\n    return this.read(addr) | 0;\n  }\n\n  loadState(state : Atari7800State) {\n    this.cpu.loadState(state.c);\n    this.ram.set(state.ram);\n    this.tia.loadState(state.tia);\n    this.maria.loadState(state.maria);\n    this.regs6532.set(state.regs6532);\n    this.piatimer = state.pia.timer;\n    this.timerinterval = state.pia.interval;\n    this.loadControlsState(state);\n  }\n  saveState() : Atari7800State {\n    return {\n      c:this.cpu.saveState(),\n      ram:this.ram.slice(0),\n      tia:this.tia.saveState(),\n      maria:this.maria.saveState(),\n      regs6532:this.regs6532.slice(0),\n      inputs:this.inputs.slice(0),\n      pia:{timer:this.piatimer, interval: this.timerinterval}\n    };\n  }\n  loadControlsState(state:Atari7800ControlsState) : void {\n    this.inputs.set(state.inputs);\n  }\n  saveControlsState() : Atari7800ControlsState {\n    return {\n      inputs:this.inputs.slice(0)\n    };\n  }\n\n  getDebugCategories() {\n    return ['CPU','Stack','TIA','MARIA'];\n  }\n  getDebugInfo(category, state) {\n    switch (category) {\n      case 'TIA': return TIA.stateToLongString(state.tia);\n      case 'MARIA': return MARIA.stateToLongString(state.maria) + \"\\nScanline: \" + this.scanline;\n      //default: return super.getDebugInfo(category, state);\n    }\n  }\n  getDebugDisplayLists() {\n    // return display list in human-readable JSON object\n    let display_lists = {};\n    let dll_ofs = this.maria.getDLLStart();\n    // read the address of each DLL entry\n    let y = 0;\n    while (y < 240) {\n      let x = this.readConst(dll_ofs);\n      let offset = (x & 0xf);\n      let h16 = (x & 0x40) != 0;\n      let h8  = (x & 0x20) != 0;\n      let dlstart = (this.readConst(dll_ofs+1)<<8) + this.readConst(dll_ofs+2);\n      dll_ofs = (dll_ofs + 3) & 0xffff; // TODO: can also only cross 1 page?\n      let dli = (this.readConst(dll_ofs) & 0x80) != 0; // DLI flag is from next DLL entry\n      let title = \"DL $\" + hex(dlstart,4) + \" \" + y + \"-\" + (y+offset);\n      if (h16) title += \" H16\";\n      if (h8) title += \" H8\";\n      if (dli) title += \" DLI\";\n      display_lists[title] = { \"$$\": this._readDebugDisplayList(dlstart) };\n      y += offset + 1;\n    }\n    return display_lists;\n  }\n  _readDebugDisplayList(dlstart: number) {\n    return () => this.readDebugDisplayList(dlstart);\n  }\n  readDebugDisplayList(dlstart: number) {\n    let display_list = [];\n    let dlhi = dlstart & 0xff00;\n    let dlofs = dlstart & 0xff;\n    do {\n      const ctrlreg = this.maria.regs[0x1c];\n      // read DL entry\n      let b0 = this.readConst(dlhi + ((dlofs+0) & 0x1ff));\n      let b1 = this.readConst(dlhi + ((dlofs+1) & 0x1ff));\n      if (b1 == 0) break; // end of DL\n      // display lists must be in RAM (TODO: probe?)\n      let b2 = this.readConst(dlhi + ((dlofs+2) & 0x1ff));\n      let b3 = this.readConst(dlhi + ((dlofs+3) & 0x1ff));\n      // extended header?\n      let indirect = false;\n      let description = \"\";\n      let writemode;\n      const grmode = (ctrlreg & 0x3) + ((b1 & 0x80) ? 4 : 0);\n      if ((b1 & 31) == 0) {\n        var pal = b3 >> 5;\n        var width = 32 - (b3 & 31);\n        var xpos = this.readConst(dlhi + ((dlofs+4) & 0x1ff));\n        indirect = (b1 & 0x20) != 0;\n        writemode = b1 & 0x80;\n        dlofs += 5;\n      } else {\n        // direct mode\n        var xpos = b3;\n        var pal = b1 >> 5;\n        var width = 32 - (b1 & 31);\n        dlofs += 4;\n      }\n      description += \"X=\" + xpos + \" W=\" + width + \" P=\" + pal;\n      if (writemode) description += \" WM=1\";\n      if (indirect) description += \" CHR=$\" + hex((this.maria.regs[0x14] + this.maria.offset) & 0xff) + \"xx\";\n      let gfxadr = b0 + (((b2 + (indirect?0:this.maria.offset)) & 0xff) << 8);\n      description = \" $\" + hex(gfxadr,4) + \" \" + description;\n      description = [\"160A\",\"?\",\"320D\",\"320A\",\"160B\",\"?\",\"320B\",\"320C\"][grmode] + ' ' + description;\n      display_list.push(description);\n    } while (dlofs < 0x200);\n    return display_list;\n  }\n}\n\n///\n\nvar COLORS_RGBA = new Uint32Array(256);\nfor (var i=0; i<256; i++) {\n  COLORS_RGBA[i] = gtia_ntsc_to_rgb(i);\n}\n\n", "\nimport { Atari7800 } from \"../machine/atari7800\";\nimport { Platform, Base6502MachinePlatform, getToolForFilename_6502 } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\n\nvar Atari7800_PRESETS = [\n  {id:'sprites.dasm', name:'Sprites (ASM)', category:'Assembler'},\n\n  {id:'wsync.c', name:'WSYNC', category:'CC65'},\n  {id:'sprites.c', name:'Double Buffering'},\n  {id:'scroll.c', name:'Scrolling'},\n\n  {id:'test_conio.c78', name:'Conio Test', category:'cc7800'},\n  {id:'example_small_sprites.c78', name:'Small Sprites'},\n  {id:'example_vertical_scrolling.c78', name:'Vertical Scrolling'},\n];\n\nclass Atari7800Platform extends Base6502MachinePlatform<Atari7800> implements Platform {\n\n  newMachine()          { return new Atari7800(); }\n  getPresets()          { return Atari7800_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.readConst(a); }\n  // TODO loadBIOS(bios)\t{ this.machine.loadBIOS(a); }\n  getMemoryMap = function() { return { main:[\n      {name:'TIA',start:0x00,size:0x20,type:'io'},\n      {name:'MARIA',start:0x20,size:0x20,type:'io'},\n      {name:'RAM (6166 Block 0)',start:0x40,size:0xc0,type:'ram'},\n      {name:'RAM (6166 Block 1)',start:0x140,size:0xc0,type:'ram'},\n      {name:'PIA',start:0x280,size:0x18,type:'io'},\n      {name:'RAM',start:0x1800,size:0x1000,type:'ram'}, // TODO: shadow ram\n      {name:'Cartridge ROM',start:0x4000,size:0xc000-6,type:'rom'},\n      {name:'CPU Vectors',start:0xfffa,size:0x6,type:'rom'},\n  ] } };\n  getROMExtension() { return \".a78\"; }\n  getDebugTree() {\n    let tree = super.getDebugTree();\n    tree['display_list'] = this.machine.getDebugDisplayLists();\n    return tree;\n  }\n  getToolForFilename(filename: string) {\n    if (filename.endsWith(\".cc7800\")) return \"cc7800\";\n    if (filename.endsWith(\".c78\")) return \"cc7800\";\n    return getToolForFilename_6502(filename);\n  }\n}\n\n///\n\nPLATFORMS['atari7800'] = Atari7800Platform;\n"],
  "mappings": "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",
  "names": ["SWCHA", "SWCHB", "INPT0", "Atari7800_KEYCODE_MAP", "makeKeycodeMap", "Keys", "linesPerFrame", "numVisibleLines", "colorClocksPerLine", "colorClocksPreDMA", "colorClocksShutdownOther", "colorClocksShutdownLast", "audioOversample", "audioSampleRate", "TIA", "a", "v", "s", "i", "state", "dumpRAM", "MARIA", "b", "bus", "x", "pix", "dlhi", "dlofs", "b0", "b1", "b2", "b3", "indirect", "pal", "width", "xpos", "gfxadr", "ctrlreg", "grmode", "kangaroo", "dbl", "data", "indadr", "j", "col", "data0", "ppal", "hex", "Atari7800", "BasicMachine", "MOS6502", "newAddressDecoder", "newKeyboardHandler", "Atari7800_KEYCODE_MAP", "POKEYDeviceChannel", "TssChannelAdapter", "oldprobe", "shift", "clk", "clocks", "trap", "idata", "iofs", "rgb", "mc", "fc", "steps", "sl", "visible", "dmaClocks", "mask", "COLORS_RGBA", "padBytes", "SWCHA", "SWCHB", "addr", "category", "display_lists", "dll_ofs", "y", "offset", "h16", "h8", "dlstart", "dli", "title", "display_list", "description", "writemode", "gtia_ntsc_to_rgb", "Atari7800_PRESETS", "Atari7800Platform", "Base6502MachinePlatform", "Atari7800", "a", "tree", "filename", "getToolForFilename_6502", "PLATFORMS"]
}
