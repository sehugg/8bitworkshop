{
  "version": 3,
  "sources": ["../src/ide/embedui.ts"],
  "sourcesContent": ["\nimport { lzgmini } from \"../common/util\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { Platform } from \"../common/baseplatform\";\nimport { stringToByteArray, getWithBinary, loadScript, getRootBasePlatform } from \"../common/util\";\nimport { StateRecorderImpl } from \"../common/recorder\";\nimport { importPlatform } from \"../platform/_index\";\nimport { saveAs } from \"file-saver\";\n\nexport var platform_id : string;\t// platform ID string\nexport var platform : Platform;\t// platform object\nexport var stateRecorder : StateRecorderImpl;\n\n// external libs (TODO)\ndeclare var ga, GIF;\n\nvar _qs = (function (a) {\n    if (!a || a.length == 0)\n        return {};\n    var b = {};\n    for (var i = 0; i < a.length; ++i) {\n        var p = a[i].split('=', 2);\n        if (p.length == 1)\n            b[p[0]] = \"\";\n        else\n            b[p[0]] = decodeURIComponent(p[1].replace(/\\+/g, \" \"));\n    }\n    return b;\n})(window.location.search.substr(1).split('&'));\n\n// catch errors\nfunction installErrorHandler() {\n  if (typeof window.onerror == \"object\") {\n      window.onerror = function (msgevent, url, line, col, error) {\n        var msg = msgevent + \" \" + url + \" \" + \" \" + line + \":\" + col + \", \" + error;\n        $.get(\"/error?msg=\" + encodeURIComponent(msg), \"text\");\n      };\n  }\n}\n\nfunction uninstallErrorHandler() {\n  window.onerror = null;\n}\n\nfunction addPageFocusHandlers() {\n  var hidden = false;\n  document.addEventListener(\"visibilitychange\", function(e) {\n    if (document.visibilityState == 'hidden' && platform.isRunning()) {\n      platform.pause();\n      hidden = true;\n    } else if (document.visibilityState == 'visible' && hidden) {\n      platform.resume();\n      hidden = false;\n    }\n  });\n  $(window).on(\"focus\", function() {\n    if (hidden) {\n      platform.resume();\n      hidden = false;\n    }\n  });\n  $(window).on(\"blur\", function() {\n    if (platform.isRunning()) {\n      platform.pause();\n      hidden = true;\n    }\n  });\n}\n\nasync function startROM(title, rom) {\n  if (!rom ) {\n    alert(\"No ROM found.\");\n    return;\n  }\n  console.log(rom.length + ' bytes');\n  await platform.loadROM(title, rom);\n  platform.resume();\n}\n\nfunction enableRecording() {\n  stateRecorder = new StateRecorderImpl(platform);\n  stateRecorder.reset();\n  stateRecorder.checkpointInterval = 60*5; // every 5 sec\n  stateRecorder.maxCheckpoints = 360; // 30 minutes\n  platform.setRecorder(stateRecorder);\n  console.log('start recording');\n}\n\nfunction findPrimaryCanvas() {\n  return $(\"#emulator\").find('canvas');\n}\n\nfunction recordVideo(intervalMsec, maxFrames, callback) {\n loadScript(\"gif.js/dist/gif.js\").then( () => {\n  var canvas = findPrimaryCanvas()[0] as HTMLCanvasElement;\n  if (!canvas) {\n    alert(\"Could not find canvas element to record video!\");\n    return;\n  }\n  var rotate = 0;\n  if (canvas.style && canvas.style.transform) {\n    if (canvas.style.transform.indexOf(\"rotate(-90deg)\") >= 0)\n      rotate = -1;\n    else if (canvas.style.transform.indexOf(\"rotate(90deg)\") >= 0)\n      rotate = 1;\n  }\n  var gif = new GIF({\n    workerScript: 'gif.js/dist/gif.worker.js',\n    workers: 4,\n    quality: 10,\n    rotate: rotate\n  });\n  gif.on('finished', function(blob) {\n    console.log('finished encoding GIF');\n    callback(blob);\n  });\n  intervalMsec = intervalMsec || (100 + ((Math.random()*256)&3));\n  maxFrames = maxFrames || (100 + ((Math.random()*256)&15));\n  var nframes = 0;\n  console.log(\"Recording video\", canvas);\n  var f = () => {\n    if (nframes++ > maxFrames) {\n      console.log(\"Rendering video\");\n      gif.render();\n    } else {\n      gif.addFrame(canvas, {delay: intervalMsec, copy: true});\n      setTimeout(f, intervalMsec);\n    }\n  };\n  f();\n });\n}\n\nasync function startPlatform(qs) {\n  if (!PLATFORMS[platform_id]) throw Error(\"Invalid platform '\" + platform_id + \"'.\");\n  platform = new PLATFORMS[platform_id]($(\"#emuscreen\")[0]);\n  await platform.start();\n  // start recorder when click on canvas (TODO?)\n  if (qs['rec']) {\n    findPrimaryCanvas().on('focus', () => {\n      //if (!stateRecorder) { enableRecording(); }\n      // toggle sound for browser autoplay\n      platform.resume();\n    });\n  }\n  var title = qs['n'] || 'Game';\n  var rom : Uint8Array;\n  var romurl = qs['url'];\n  var lzgvar = qs['r'];\n  if (romurl) {\n    // load rom url remotely\n    console.log(romurl);\n    getWithBinary(romurl, (data) => {\n      startROM(title, data);\n    }, 'arraybuffer');\n    return true;\n  } else if (lzgvar) {\n    // decompress from lzg\n    var lzgrom = stringToByteArray(atob(lzgvar));\n    rom = new lzgmini().decode(lzgrom);\n  }\n  addPageFocusHandlers();\n  startROM(title, rom);\n  return true;\n}\n\n// TODO: merge with ui\nasync function loadPlatform(qs) {\n  if (qs.data) qs = qs.data;\n  platform_id = qs['p'];\n  if (!platform_id) throw new Error('No platform variable!');\n  try {\n    var module = await importPlatform(getRootBasePlatform(platform_id));\n    console.log(\"starting platform\", platform_id); // loaded required <platform_id>.js file\n    await startPlatform(qs);\n  } catch (e) {\n    console.log(e);\n    alert('Platform \"' + platform_id + '\" not supported.');\n  }\n}\n\n// start\nexport function startEmbed() {\n  installErrorHandler();\n  if (_qs['p']) {\n    loadPlatform(_qs);\n  }\n}\n\n// iframe API\n\nwindow.addEventListener(\"message\", receiveMessage, false);\n\nfunction receiveMessage(event) {\n  if (event.data) {\n    var cmd = event.data.cmd;\n    if (cmd == 'start' && !platform) {\n      loadPlatform(event);\n    }\n    else if (cmd == 'reset') {\n      platform.reset();\n      stateRecorder.reset();\n    }\n    else if (cmd == 'getReplay') {\n      var replay = {\n        frameCount: stateRecorder.frameCount,\n        checkpoints: stateRecorder.checkpoints,\n        framerecs: stateRecorder.framerecs,\n        checkpointInterval: stateRecorder.checkpointInterval,\n        maxCheckpoints: stateRecorder.maxCheckpoints,\n      }\n      event.source.postMessage({ack:cmd, replay:replay}, event.origin);\n    }\n    else if (cmd == 'watchState') {\n      var watchfn = new Function('platform', 'state', event.data.fn);\n      stateRecorder.callbackNewCheckpoint = (state) => {\n        event.source.postMessage({ack:cmd, state:watchfn(platform, state)}, event.origin);\n      }\n    }\n    else if (cmd == 'recordVideo') {\n      recordVideo(event.data.intervalMsec, event.data.maxFrames, function(blob) {\n        if (event.data.filename) {\n          saveAs(blob, event.data.filename);\n        }\n        event.source.postMessage({ack:cmd, gif:blob}, event.origin);\n      });\n    }\n    else {\n      console.log(\"Unknown data.cmd: \" + cmd);\n    }\n  }\n}\n\n/////\n\n// are we not in an iframe?\nif(self === top) {\n  document.body.style.backgroundColor = '#555';\n}\nstartEmbed();\n"],
  "mappings": "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",
  "names": ["import_file_saver", "platform_id", "platform", "stateRecorder", "_qs", "a", "b", "i", "p", "installErrorHandler", "msgevent", "url", "line", "col", "error", "msg", "addPageFocusHandlers", "hidden", "e", "platform", "startROM", "title", "rom", "findPrimaryCanvas", "recordVideo", "intervalMsec", "maxFrames", "callback", "loadScript", "canvas", "rotate", "gif", "blob", "nframes", "f", "startPlatform", "qs", "PLATFORMS", "platform_id", "platform", "title", "rom", "romurl", "lzgvar", "getWithBinary", "data", "startROM", "lzgrom", "stringToByteArray", "lzgmini", "addPageFocusHandlers", "loadPlatform", "module", "importPlatform", "getRootBasePlatform", "e", "startEmbed", "installErrorHandler", "_qs", "receiveMessage", "event", "cmd", "stateRecorder", "replay", "watchfn", "state"]
}
