{
  "version": 3,
  "sources": ["../src/machine/mw8080bw.ts", "../src/platform/mw8080bw.ts"],
  "sourcesContent": ["\nimport { Z80, Z80State } from \"../common/cpu/ZilogZ80\";\nimport { BasicScanlineMachine } from \"../common/devices\";\nimport { KeyFlags, newAddressDecoder, padBytes, Keys, makeKeycodeMap, newKeyboardHandler } from \"../common/emu\";\nimport { TssChannelAdapter, MasterAudio, AY38910_Audio } from \"../common/audio\";\n\n// http://www.computerarcheology.com/Arcade/\n\nconst SPACEINV_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.A,        1, 0x10], // P1\n  [Keys.LEFT,     1, 0x20],\n  [Keys.RIGHT,    1, 0x40],\n  [Keys.P2_A,     2, 0x10], // P2\n  [Keys.P2_LEFT,  2, 0x20],\n  [Keys.P2_RIGHT, 2, 0x40],\n  [Keys.SELECT,   1, 0x1],\n  [Keys.START,    1, 0x4],\n  [Keys.P2_START, 1, 0x2],\n]);\n\nconst INITIAL_WATCHDOG = 256;\nconst PIXEL_ON = 0xffeeeeee;\nconst PIXEL_OFF = 0xff000000;\n\nexport class Midway8080 extends BasicScanlineMachine {\n\n  cpuFrequency = 1996800; // MHz\n  canvasWidth = 256;\n  numTotalScanlines = 262;\n  numVisibleScanlines = 224;\n  cpuCyclesPerLine = Math.floor(1996800 / (262*60));\n  defaultROMSize = 0x2000;\n  rotate = -90;\n  sampleRate = 1;\n\n  bitshift_offset = 0;\n  bitshift_register = 0;\n  watchdog_counter;\n  \n  cpu: Z80 = new Z80();\n  ram = new Uint8Array(0x2000);\n\n  constructor() {\n    super();\n    this.connectCPUMemoryBus(this);\n    this.connectCPUIOBus(this.newIOBus());\n    this.handler = newKeyboardHandler(this.inputs, SPACEINV_KEYCODE_MAP);\n  }\n  \n  read = newAddressDecoder([\n        [0x0000, 0x1fff, 0x1fff, (a) => { return this.rom ? this.rom[a] : 0; }],\n        [0x2000, 0x3fff, 0x1fff, (a) => { return this.ram[a]; }],\n  ]);\n  write = newAddressDecoder([\n        [0x2000, 0x23ff, 0x3ff, (a, v) => { this.ram[a] = v; }],\n        [0x2400, 0x3fff, 0x1fff, (a, v) => {\n          this.ram[a] = v;\n          var ofs = (a - 0x400) << 3;\n          for (var i = 0; i < 8; i++) {\n            this.pixels[ofs + i] = (v & (1 << i)) ? PIXEL_ON : PIXEL_OFF;\n          }\n          //if (displayPCs) displayPCs[a] = cpu.getPC(); // save program counter\n        }],\n  ]);\n\n  newIOBus() {\n    return {\n      read: (addr) => {\n        addr &= 0x3;\n        //console.log('IO read', hex(addr,4));\n        switch (addr) {\n          case 0:\n          case 1:\n          case 2:\n            return this.inputs[addr];\n          case 3:\n            return (this.bitshift_register >> (8 - this.bitshift_offset)) & 0xff;\n        }\n        return 0;\n      },\n      write: (addr, val) => {\n        addr &= 0x7;\n        val &= 0xff;\n        //console.log('IO write', hex(addr,4), hex(val,2));\n        switch (addr) {\n          case 2:\n            this.bitshift_offset = val & 0x7;\n            break;\n          case 3:\n          case 5:\n            // TODO: sound\n            break;\n          case 4:\n            this.bitshift_register = (this.bitshift_register >> 8) | (val << 8);\n            break;\n          case 6:\n            this.watchdog_counter = INITIAL_WATCHDOG;\n            break;\n        }\n      }\n    };\n  }\n\n  startScanline() {\n  }\n\n  drawScanline() {\n    // at end of scanline\n    if (this.scanline == 95)\n      this.interrupt(0xcf); // RST $8\n    else if (this.scanline == 223)\n      this.interrupt(0xd7); // RST $10\n  }\n  \n  interrupt(data:number) {\n    this.probe.logInterrupt(data);\n    this.cpu.interrupt(data);\n  }\n\n  advanceFrame(trap) : number {\n    if (this.watchdog_counter-- <= 0) {\n      console.log(\"WATCHDOG FIRED\"); // TODO: alert on video\n      this.reset();\n    }\n    return super.advanceFrame(trap);\n  }\n\n  loadState(state) {\n    super.loadState(state);\n    this.bitshift_register = state.bsr;\n    this.bitshift_offset = state.bso;\n    this.watchdog_counter = state.wdc;\n  }\n  saveState() {\n    var state: any = super.saveState();\n    state.bsr = this.bitshift_register;\n    state.bso = this.bitshift_offset;\n    state.wdc = this.watchdog_counter;\n    return state;\n  }\n  reset() {\n    super.reset();\n    this.watchdog_counter = INITIAL_WATCHDOG;\n  }\n}\n", "\nimport { Midway8080 } from \"../machine/mw8080bw\";\nimport { BaseZ80MachinePlatform } from \"../common/baseplatform\";\nimport { Platform } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\n\n// http://www.computerarcheology.com/Arcade/\n\nconst MW8080BW_PRESETS = [\n  { id: 'gfxtest.c', name: 'Graphics Test' },\n  { id: 'shifter.c', name: 'Sprite w/ Bit Shifter' },\n  { id: 'game2.c', name: 'Cosmic Impalas' },\n];\n\nclass Midway8080BWPlatform extends BaseZ80MachinePlatform<Midway8080> implements Platform {\n\n  newMachine()          { return new Midway8080(); }\n  getPresets()          { return MW8080BW_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.read(a); }\n  getMemoryMap = function() { return { main:[\n      {name:'Frame Buffer',start:0x2400,size:7168,type:'ram'},\n  ] } };\n  showHelp() { return \"https://8bitworkshop.com/docs/platforms/arcade/index.html#midway-8080\" }\n}\n\n\nPLATFORMS['mw8080bw'] = Midway8080BWPlatform;\n"],
  "mappings": "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",
  "names": ["SPACEINV_KEYCODE_MAP", "makeKeycodeMap", "Keys", "INITIAL_WATCHDOG", "PIXEL_ON", "PIXEL_OFF", "Midway8080", "BasicScanlineMachine", "Z80", "newAddressDecoder", "a", "v", "ofs", "i", "newKeyboardHandler", "addr", "val", "data", "trap", "state", "MW8080BW_PRESETS", "Midway8080BWPlatform", "BaseZ80MachinePlatform", "Midway8080", "a", "PLATFORMS"]
}
