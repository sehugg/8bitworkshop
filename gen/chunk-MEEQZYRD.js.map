{
  "version": 3,
  "sources": ["../src/common/mameplatform.ts"],
  "sourcesContent": ["\n/// MAME SUPPORT\n\nimport { EmuState, DisasmLine, cpuStateToLongString_6502, cpuStateToLongString_Z80 } from \"./baseplatform\";\nimport { disassemble6502 } from \"./cpu/disasm6502\";\nimport { disassembleZ80 } from \"./cpu/disasmz80\";\nimport { AnimationTimer, RAM, RasterVideo } from \"./emu\";\n\ndeclare var FS, ENV, Module; // mame emscripten\n\nexport abstract class BaseMAMEPlatform {\n\n  loaded : boolean = false;\n  preinitted : boolean = false;\n  started : boolean = false;\n  romfn : string;\n  romdata : Uint8Array;\n  romtype : string = 'cart';\n  video;\n  running = false;\n  initluavars : boolean = false;\n  luadebugscript : string;\n  js_lua_string;\n  onBreakpointHit;\n  mainElement : HTMLElement;\n  timer : AnimationTimer;\n\n  constructor(mainElement) {\n    this.mainElement = mainElement;\n    this.timer = new AnimationTimer(20, this.poll.bind(this));\n  }\n\n  // http://docs.mamedev.org/techspecs/luaengine.html\n  luacall(s:string) : string {\n    if (!this.js_lua_string) this.js_lua_string = Module.cwrap('_Z13js_lua_stringPKc', 'string', ['string']);\n    return this.js_lua_string(s || \"\");\n  }\n\n  _pause() {\n    this.running = false;\n    this.timer.stop();\n  }\n  pause() {\n    if (this.loaded && this.running) {\n      this.luacall('emu.pause()');\n      this._pause();\n    }\n  }\n\n  _resume() {\n    this.luacall('emu.unpause()');\n    this.running = true;\n    this.timer.start();\n  }\n  resume() {\n    if (this.loaded && !this.running) { // TODO\n      this._resume();\n    }\n  }\n\n  reset() {\n    if (this.loaded) {\n      this.luacall('manager:machine():soft_reset()');\n      this.running = true;\n      this.initluavars = false;\n    }\n  }\n\n  isRunning() {\n    return this.running;\n  }\n\n  bufferConsoleOutput(s) {\n    if (typeof s !== 'string') return;\n    console.log(s);\n  }\n\n  startModule(mainElement, opts) {\n    this.started = true;\n    var romfn = this.romfn = this.romfn || opts.romfn;\n    var romdata = this.romdata = this.romdata || opts.romdata || new RAM(opts.romsize).mem;\n    var romtype = this.romtype = this.romtype || opts.romtype;\n    // create canvas\n    var video = this.video = new RasterVideo(this.mainElement, opts.width, opts.height);\n    video.create();\n    $(video.canvas).attr('id','canvas');\n    // load asm.js module\n    console.log(\"loading\", opts.jsfile);\n    var modargs = [opts.driver,\n      '-debug',\n      '-debugger', 'none',\n      '-verbose', '-window', '-nokeepaspect',\n      '-resolution', video.canvas.width+'x'+video.canvas.height\n    ];\n    if (romfn) {\n      modargs.push('-'+romtype, romfn);\n    }\n    if (opts.extraargs) {\n      modargs = modargs.concat(opts.extraargs);\n    }\n    console.log(modargs);\n    window['JSMESS'] = {};\n    window['Module'] = {\n      arguments: modargs,\n      screenIsReadOnly: true,\n      print: this.bufferConsoleOutput,\n      canvas:video.canvas,\n      doNotCaptureKeyboard:true,\n      keyboardListeningElement:video.canvas,\n      preInit: () => {\n        console.log(\"loading FS\");\n        ENV.SDL_EMSCRIPTEN_KEYBOARD_ELEMENT = 'canvas';\n        if (opts.cfgfile) {\n          FS.mkdir('/cfg');\n          FS.writeFile('/cfg/' + opts.cfgfile, opts.cfgdata, {encoding:'utf8'});\n        }\n        if (opts.biosfile) {\n          FS.mkdir('/roms');\n          FS.mkdir('/roms/' + opts.driver);\n          FS.writeFile('/roms/' + opts.biosfile, opts.biosdata, {encoding:'binary'});\n        }\n        FS.mkdir('/emulator');\n        if (romfn) {\n          FS.writeFile(romfn, romdata, {encoding:'binary'});\n        }\n        //FS.writeFile('/debug.ini', 'debugger none\\n', {encoding:'utf8'});\n        if (opts.preInit) {\n          opts.preInit(self);\n        }\n        this.preinitted = true;\n      },\n      preRun: [\n        () => {\n          $(video.canvas).click((e) =>{\n            video.canvas.focus();\n          });\n          this.loaded = true;\n          console.log(\"about to run...\");\n        }\n      ]\n    };\n    // preload files\n    // TODO: ensure loaded\n    var fetch_cfg, fetch_lua;\n    var fetch_bios = $.Deferred();\n    var fetch_wasm = $.Deferred();\n    // fetch config file\n    if (opts.cfgfile) {\n      fetch_cfg = $.get('mame/cfg/' + opts.cfgfile, (data) => {\n        opts.cfgdata = data;\n        console.log(\"loaded \" + opts.cfgfile);\n      }, 'text');\n    }\n    // fetch BIOS file\n    if (opts.biosfile) {\n      var oReq1 = new XMLHttpRequest();\n      oReq1.open(\"GET\", 'mame/roms/' + opts.biosfile, true);\n      oReq1.responseType = \"arraybuffer\";\n      oReq1.onload = (oEvent) => {\n        opts.biosdata = new Uint8Array(oReq1.response);\n        console.log(\"loaded \" + opts.biosfile); // + \" (\" + oEvent.total + \" bytes)\");\n        fetch_bios.resolve();\n      };\n      oReq1.ontimeout = function (oEvent) {\n        throw Error(\"Timeout loading \" + opts.biosfile);\n      }\n      oReq1.send();\n    } else {\n      fetch_bios.resolve();\n    }\n    // load debugger Lua script\n    fetch_lua = $.get('mame/debugger.lua', (data) => {\n      this.luadebugscript = data;\n      console.log(\"loaded debugger.lua\");\n    }, 'text');\n    // load WASM\n    {\n      var oReq2 = new XMLHttpRequest();\n      oReq2.open(\"GET\", 'mame/' + opts.jsfile.replace('.js','.wasm'), true);\n      oReq2.responseType = \"arraybuffer\";\n      oReq2.onload = (oEvent) => {\n        console.log(\"loaded WASM file\");\n        window['Module'].wasmBinary = new Uint8Array(oReq2.response);\n        fetch_wasm.resolve();\n      };\n      oReq2.ontimeout = function (oEvent) {\n        throw Error(\"Timeout loading \" + opts.jsfile);\n      }\n      oReq2.send();\n    }\n    // start loading script\n    $.when(fetch_lua, fetch_cfg, fetch_bios, fetch_wasm).done( () => {\n      var script = document.createElement('script');\n      script.src = 'mame/' + opts.jsfile;\n      document.getElementsByTagName('head')[0].appendChild(script);\n      console.log(\"created script element\");\n    });\n    // for debugging via browser console\n    window['mamelua'] = (s:string) => {\n      this.initlua();\n      return [s, this.luacall(s)];\n    };\n  }\n\n  loadROMFile(data) {\n    this.romdata = data;\n    if (this.preinitted && this.romfn) {\n      FS.writeFile(this.romfn, data, {encoding:'binary'});\n    }\n  }\n\n  loadRegion(region, data) {\n    if (this.loaded && data.length > 0) {\n      //this.luacall('cart=manager:machine().images[\"cart\"]\\nprint(cart:filename())\\ncart:load(\"' + region + '\")\\n');\n      var s = 'rgn = manager:machine():memory().regions[\"' + region + '\"]\\n';\n      //s += 'print(rgn.size)\\n';\n      for (var i=0; i<data.length; i+=4) {\n        var v = data[i] + (data[i+1]<<8) + (data[i+2]<<16) + (data[i+3]<<24);\n        s += 'rgn:write_u32(' + i + ',' + v + ')\\n'; // TODO: endian?\n      }\n      this.luacall(s);\n      this.reset();\n    }\n  }\n\n  // DEBUGGING SUPPORT\n  \n  initlua() {\n    if (!this.initluavars) {\n      this.luacall(this.luadebugscript);\n      this.luacall('mamedbg.init()')\n      this.initluavars = true;\n    }\n  }\n  \n  readAddress(a:number) : number {\n    this.initlua();\n    return parseInt(this.luacall('return mem:read_u8(' + a + ')'));\n  }\n  \n  getCPUReg(reg:string) {\n    if (!this.loaded) return 0; // TODO\n    this.initlua();\n    return parseInt(this.luacall('return cpu.state.'+reg+'.value'));\n  }\n  \n  grabState(expr:string) {\n    this.initlua();\n    return {\n      c:this.getCPUState(),\n      buf:this.luacall(\"return string.tohex(\" + expr + \")\")\n    }\n  }\n  \n  saveState() {\n    return this.grabState(\"manager:machine():buffer_save()\");\n  }\n\n  loadState(state) {\n    this.initlua();\n    return this.luacall(\"manager:machine():buffer_load(string.fromhex('\" + state.buf + \"'))\");\n  }\n\n  poll() {\n    if (this.onBreakpointHit && this.luacall(\"return tostring(mamedbg.is_stopped())\") == 'true') {\n      this._pause();\n      //this.luacall(\"manager:machine():buffer_load(lastBreakState)\");\n      var state = this.grabState(\"lastBreakState\");\n      this.onBreakpointHit(state);\n    }\n  }\n  clearDebug() {\n    this.onBreakpointHit = null;\n    if (this.loaded) {\n      this.initlua();\n      this.luacall('mamedbg.reset()');\n    }\n  }\n  getDebugCallback() {\n    return this.onBreakpointHit;// TODO?\n  }\n  setupDebug(callback) {\n    this.onBreakpointHit = callback;\n  }\n  debugcmd(s) {\n    this.initlua()\n    this.luacall(s);\n    this._resume();\n  }\n  runToPC(pc) {\n    this.debugcmd('mamedbg.runTo(' + pc + ')');\n  }\n  runToVsync() {\n    this.debugcmd('mamedbg.runToVsync()');\n  }\n  runUntilReturn() {\n    this.debugcmd('mamedbg.runUntilReturn()');\n  }\n  // TODO\n  runEval() {\n    this.reset();\n    this.step();\n  }\n  step() {\n    this.debugcmd('mamedbg.step()');\n  }\n  getDebugCategories() {\n    return ['CPU'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return this.cpuStateToLongString(state.c);\n    }\n  }\n  getDebugTree() {\n    this.initlua();\n    var devices = JSON.parse(this.luacall(`return table.tojson(manager:machine().devices)`));\n    var images = JSON.parse(this.luacall(`return table.tojson(manager:machine().images)`));\n    var regions = JSON.parse(this.luacall(`return table.tojson(manager:machine():memory().regions)`));\n    return {\n      devices: devices,\n      images: images,\n      regions: regions,\n    }\n  }\n\n  abstract cpuStateToLongString(c) : string;\n  abstract getCPUState() : any;\n}\n\nexport abstract class BaseMAME6502Platform extends BaseMAMEPlatform {\n  getPC() : number {\n    return this.getCPUReg('PC');\n  }\n  getSP() : number {\n    return this.getCPUReg('SP');\n  }\n  isStable() \t { return true; }\n  getCPUState()  {\n    return {\n      PC:this.getPC(),\n      SP:this.getSP(),\n      A:this.getCPUReg('A'),\n      X:this.getCPUReg('X'),\n      Y:this.getCPUReg('Y'),\n      flags:this.getCPUReg('P'),\n    };\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassemble6502(pc, read(pc), read(pc+1), read(pc+2));\n  }\n  cpuStateToLongString(c) {\n    return cpuStateToLongString_6502(c);\n  }\n}\n\nexport abstract class BaseMAMEZ80Platform extends BaseMAMEPlatform {\n  getPC() : number {\n    return this.getCPUReg('PC');\n  }\n  getSP() : number {\n    return this.getCPUReg('SP');\n  }\n  isStable() \t { return true; }\n  getCPUState()  {\n    return {\n      PC:this.getPC(),\n      SP:this.getSP(),\n      AF:this.getCPUReg('AF'),\n      BC:this.getCPUReg('BC'),\n      DE:this.getCPUReg('DE'),\n      HL:this.getCPUReg('HL'),\n      IX:this.getCPUReg('IX'),\n      IY:this.getCPUReg('IY'),\n      IR:this.getCPUReg('R') + (this.getCPUReg('I') << 8),\n    };\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassembleZ80(pc, read(pc), read(pc+1), read(pc+2), read(pc+3));\n  }\n  cpuStateToLongString(c) {\n    return cpuStateToLongString_Z80(c);\n  }\n}\n"],
  "mappings": "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",
  "names": ["BaseMAMEPlatform", "mainElement", "AnimationTimer", "s", "opts", "romfn", "romdata", "RAM", "romtype", "video", "RasterVideo", "modargs", "e", "fetch_cfg", "fetch_lua", "fetch_bios", "fetch_wasm", "data", "oReq1", "oEvent", "oReq2", "script", "region", "i", "v", "a", "reg", "expr", "state", "callback", "pc", "category", "devices", "images", "regions", "BaseMAME6502Platform", "read", "disassemble6502", "c", "cpuStateToLongString_6502", "BaseMAMEZ80Platform", "disassembleZ80", "cpuStateToLongString_Z80"]
}
