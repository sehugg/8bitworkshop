{
  "version": 3,
  "sources": ["../src/common/cpu/disasm6502.ts", "../src/common/cpu/ZilogZ80.ts", "../src/common/audio.ts", "../src/common/probe.ts", "../src/common/devices.ts", "../src/common/cpu/disasmz80.ts", "../src/common/wasmplatform.ts", "../src/common/cpu/6809.ts", "../src/common/cpu/MOS6502.ts", "../src/common/baseplatform.ts"],
  "sourcesContent": ["\nimport { hex } from \"../util\";\n\nexport var OPS_6502 = [\n  {mn:\"BRK\",am:\"\",nb:1,il:0,c1:7,c2:0,nw:3,br:1,mod:\"SI\"}, // 0\n  {mn:\"ORA\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"AZN\"}, // 1\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 2\n  {mn:\"SLO\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 3\n  {mn:\"NOP\",am:\"aa\",nb:2,il:1,c1:3,c2:0,nw:0,br:0,mod:\"\"}, // 4\n  {mn:\"ORA\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"AZN\"}, // 5\n  {mn:\"ASL\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"CZN\"}, // 6\n  {mn:\"SLO\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 7\n  {mn:\"PHP\",am:\"\",nb:1,il:0,c1:3,c2:0,nw:1,br:0,mod:\"S\"}, // 8\n  {mn:\"ORA\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 9\n  {mn:\"ASL\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // a\n  {mn:\"ANC\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // b\n  {mn:\"NOP\",am:\"AAAA\",nb:3,il:1,c1:3,c2:0,nw:0,br:0,mod:\"\"}, // c\n  {mn:\"ORA\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // d\n  {mn:\"ASL\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // e\n  {mn:\"SLO\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // f\n  {mn:\"BPL\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // 10\n  {mn:\"ORA\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"AZN\"}, // 11\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 12\n  {mn:\"SLO\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 13\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 14\n  {mn:\"ORA\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // 15\n  {mn:\"ASL\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 16\n  {mn:\"SLO\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 17\n  {mn:\"CLC\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"C\"}, // 18\n  {mn:\"ORA\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 19\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 1a\n  {mn:\"SLO\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 1b\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 1c\n  {mn:\"ORA\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 1d\n  {mn:\"ASL\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // 1e\n  {mn:\"SLO\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 1f\n  {mn:\"JSR\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:1,mod:\"S\"}, // 20\n  {mn:\"AND\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"AZN\"}, // 21\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 22\n  {mn:\"RLA\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 23\n  {mn:\"BIT\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"ZVN\"}, // 24\n  {mn:\"AND\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"AZN\"}, // 25\n  {mn:\"ROL\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"CZN\"}, // 26\n  {mn:\"RLA\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 27\n  {mn:\"PLP\",am:\"\",nb:1,il:0,c1:4,c2:0,nw:0,br:0,mod:\"SCZIDVN\"}, // 28\n  {mn:\"AND\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 29\n  {mn:\"ROL\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // 2a\n  {mn:\"ANC\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // 2b\n  {mn:\"BIT\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"ZVN\"}, // 2c\n  {mn:\"AND\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // 2d\n  {mn:\"ROL\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 2e\n  {mn:\"RLA\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 2f\n  {mn:\"BMI\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // 30\n  {mn:\"AND\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"AZN\"}, // 31\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 32\n  {mn:\"RLA\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 33\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 34\n  {mn:\"AND\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // 35\n  {mn:\"ROL\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 36\n  {mn:\"RLA\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 37\n  {mn:\"SEC\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"C\"}, // 38\n  {mn:\"AND\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 39\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 3a\n  {mn:\"RLA\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 3b\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 3c\n  {mn:\"AND\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 3d\n  {mn:\"ROL\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // 3e\n  {mn:\"RLA\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 3f\n  {mn:\"RTI\",am:\"\",nb:1,il:0,c1:6,c2:0,nw:0,br:1,mod:\"SCZIDVN\"}, // 40\n  {mn:\"EOR\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"AZN\"}, // 41\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 42\n  {mn:\"SRE\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 43\n  {mn:\"NOP\",am:\"aa\",nb:2,il:1,c1:3,c2:0,nw:0,br:0,mod:\"\"}, // 44\n  {mn:\"EOR\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"AZN\"}, // 45\n  {mn:\"LSR\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"CZN\"}, // 46\n  {mn:\"SRE\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 47\n  {mn:\"PHA\",am:\"\",nb:1,il:0,c1:3,c2:0,nw:1,br:0,mod:\"S\"}, // 48\n  {mn:\"EOR\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 49\n  {mn:\"LSR\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // 4a\n  {mn:\"ASR\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // 4b\n  {mn:\"JMP\",am:\"AAAA\",nb:3,il:0,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 4c\n  {mn:\"EOR\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // 4d\n  {mn:\"LSR\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 4e\n  {mn:\"SRE\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 4f\n  {mn:\"BVC\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // 50\n  {mn:\"EOR\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"AZN\"}, // 51\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 52\n  {mn:\"SRE\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 53\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 54\n  {mn:\"EOR\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // 55\n  {mn:\"LSR\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 56\n  {mn:\"SRE\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 57\n  {mn:\"CLI\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"I\"}, // 58\n  {mn:\"EOR\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 59\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 5a\n  {mn:\"SRE\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 5b\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 5c\n  {mn:\"EOR\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // 5d\n  {mn:\"LSR\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // 5e\n  {mn:\"SRE\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZN\"}, // 5f\n  {mn:\"RTS\",am:\"\",nb:1,il:0,c1:6,c2:0,nw:0,br:1,mod:\"S\"}, // 60\n  {mn:\"ADC\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 61\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 62\n  {mn:\"RRA\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 63\n  {mn:\"NOP\",am:\"aa\",nb:2,il:1,c1:3,c2:0,nw:0,br:0,mod:\"\"}, // 64\n  {mn:\"ADC\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 65\n  {mn:\"ROR\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"CZN\"}, // 66\n  {mn:\"RRA\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 67\n  {mn:\"PLA\",am:\"\",nb:1,il:0,c1:4,c2:0,nw:0,br:0,mod:\"SAZN\"}, // 68\n  {mn:\"ADC\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 69\n  {mn:\"ROR\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZN\"}, // 6a\n  {mn:\"ARR\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 6b\n  {mn:\"JMP\",am:\"(AAAA)\",nb:3,il:0,c1:5,c2:0,nw:0,br:1,mod:\"\"}, // 6c\n  {mn:\"ADC\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 6d\n  {mn:\"ROR\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 6e\n  {mn:\"RRA\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 6f\n  {mn:\"BVS\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // 70\n  {mn:\"ADC\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // 71\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 72\n  {mn:\"RRA\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 73\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 74\n  {mn:\"ADC\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // 75\n  {mn:\"ROR\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // 76\n  {mn:\"RRA\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 77\n  {mn:\"SEI\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"I\"}, // 78\n  {mn:\"ADC\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // 79\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 7a\n  {mn:\"RRA\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 7b\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // 7c\n  {mn:\"ADC\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // 7d\n  {mn:\"ROR\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // 7e\n  {mn:\"RRA\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // 7f\n  {mn:\"NOP\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 80\n  {mn:\"STA\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:1,br:0,mod:\"\"}, // 81\n  {mn:\"NOP\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 82\n  {mn:\"SAX\",am:\"(aa,x)\",nb:2,il:1,c1:6,c2:0,nw:1,br:0,mod:\"\"}, // 83\n  {mn:\"STY\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:1,br:0,mod:\"\"}, // 84\n  {mn:\"STA\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:1,br:0,mod:\"\"}, // 85\n  {mn:\"STX\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:1,br:0,mod:\"\"}, // 86\n  {mn:\"SAX\",am:\"aa\",nb:2,il:1,c1:3,c2:0,nw:1,br:0,mod:\"\"}, // 87\n  {mn:\"DEY\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"YZN\"}, // 88\n  {mn:\"NOP\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // 89\n  {mn:\"TXA\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 8a\n  {mn:\"ANE\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 8b\n  {mn:\"STY\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 8c\n  {mn:\"STA\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 8d\n  {mn:\"STX\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 8e\n  {mn:\"SAX\",am:\"AAAA\",nb:3,il:1,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 8f\n  {mn:\"BCC\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // 90\n  {mn:\"STA\",am:\"(aa),y\",nb:2,il:0,c1:6,c2:0,nw:1,br:0,mod:\"\"}, // 91\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // 92\n  {mn:\"SHA\",am:\"(aa),y\",nb:2,il:1,c1:6,c2:0,nw:1,br:0,mod:\"\"}, // 93\n  {mn:\"STY\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 94\n  {mn:\"STA\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 95\n  {mn:\"STX\",am:\"aa,y\",nb:2,il:0,c1:4,c2:0,nw:1,br:0,mod:\"\"}, // 96\n  {mn:\"SAX\",am:\"aa,y\",nb:3,il:1,c1:4,c2:0,nw:1,br:1,mod:\"\"}, // 97\n  {mn:\"TYA\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // 98\n  {mn:\"STA\",am:\"AAAA,y\",nb:3,il:0,c1:5,c2:0,nw:1,br:0,mod:\"\"}, // 99\n  {mn:\"TXS\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"S\"}, // 9a\n  {mn:\"SHS\",am:\"AAAA,y\",nb:3,il:1,c1:5,c2:0,nw:1,br:0,mod:\"S\"}, // 9b\n  {mn:\"SHY\",am:\"AAAA,x\",nb:3,il:1,c1:5,c2:0,nw:1,br:0,mod:\"\"}, // 9c\n  {mn:\"STA\",am:\"AAAA,x\",nb:3,il:0,c1:5,c2:0,nw:1,br:0,mod:\"\"}, // 9d\n  {mn:\"SHX\",am:\"AAAA,y\",nb:3,il:1,c1:5,c2:0,nw:1,br:0,mod:\"\"}, // 9e\n  {mn:\"SHA\",am:\"AAAA,y\",nb:3,il:1,c1:5,c2:0,nw:1,br:0,mod:\"\"}, // 9f\n  {mn:\"LDY\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"YZN\"}, // a0\n  {mn:\"LDA\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"AZN\"}, // a1\n  {mn:\"LDX\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"XZN\"}, // a2\n  {mn:\"LAX\",am:\"(aa,x)\",nb:2,il:1,c1:6,c2:0,nw:0,br:0,mod:\"AXZN\"}, // a3\n  {mn:\"LDY\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"YZN\"}, // a4\n  {mn:\"LDA\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"AZN\"}, // a5\n  {mn:\"LDX\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"XZN\"}, // a6\n  {mn:\"LAX\",am:\"aa\",nb:2,il:1,c1:3,c2:0,nw:0,br:0,mod:\"AXZN\"}, // a7\n  {mn:\"TAY\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"YZN\"}, // a8\n  {mn:\"LDA\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"AZN\"}, // a9\n  {mn:\"TAX\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"XZN\"}, // aa\n  {mn:\"LXA\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"AXZN\"}, // ab\n  {mn:\"LDY\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"YZN\"}, // ac\n  {mn:\"LDA\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // ad\n  {mn:\"LDX\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"XZN\"}, // ae\n  {mn:\"LAX\",am:\"AAAA\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"AXZN\"}, // af\n  {mn:\"BCS\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // b0\n  {mn:\"LDA\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"AZN\"}, // b1\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // b2\n  {mn:\"LAX\",am:\"(aa),y\",nb:2,il:1,c1:5,c2:1,nw:0,br:0,mod:\"AXZN\"}, // b3\n  {mn:\"LDY\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"YZN\"}, // b4\n  {mn:\"LDA\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"AZN\"}, // b5\n  {mn:\"LDX\",am:\"aa,y\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"XZN\"}, // b6\n  {mn:\"LAX\",am:\"aa,y\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"AXZN\"}, // b7\n  {mn:\"CLV\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"V\"}, // b8\n  {mn:\"LDA\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // b9\n  {mn:\"TSX\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"XZN\"}, // ba\n  {mn:\"LAS\",am:\"AAAA,y\",nb:3,il:1,c1:4,c2:1,nw:0,br:0,mod:\"SAXZN\"}, // bb\n  {mn:\"LDY\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"YZN\"}, // bc\n  {mn:\"LDA\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"AZN\"}, // bd\n  {mn:\"LDX\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"XZN\"}, // be\n  {mn:\"LAX\",am:\"AAAA,y\",nb:3,il:1,c1:4,c2:1,nw:0,br:0,mod:\"AXZN\"}, // bf\n  {mn:\"CPY\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"CZN\"}, // c0\n  {mn:\"CMP\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"CZN\"}, // c1\n  {mn:\"NOP\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // c2\n  {mn:\"DCP\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"CZN\"}, // c3\n  {mn:\"CPY\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"CZN\"}, // c4\n  {mn:\"CMP\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"CZN\"}, // c5\n  {mn:\"DEC\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"ZN\"}, // c6\n  {mn:\"DCP\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"CZN\"}, // c7\n  {mn:\"INY\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"YZN\"}, // c8\n  {mn:\"CMP\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"CZN\"}, // c9\n  {mn:\"DEX\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"XZN\"}, // ca\n  {mn:\"SBX\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"XCZN\"}, // cb\n  {mn:\"CPY\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"CZN\"}, // cc\n  {mn:\"CMP\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"CZN\"}, // cd\n  {mn:\"DEC\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"ZN\"}, // ce\n  {mn:\"DCP\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // cf\n  {mn:\"BNE\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // d0\n  {mn:\"CMP\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"CZN\"}, // d1\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // d2\n  {mn:\"DCP\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"CZN\"}, // d3\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // d4\n  {mn:\"CMP\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"CZN\"}, // d5\n  {mn:\"DEC\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"ZN\"}, // d6\n  {mn:\"DCP\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"CZN\"}, // d7\n  {mn:\"CLD\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"D\"}, // d8\n  {mn:\"CMP\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"CZN\"}, // d9\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // da\n  {mn:\"DCP\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // db\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // dc\n  {mn:\"CMP\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"CZN\"}, // dd\n  {mn:\"DEC\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"ZN\"}, // de\n  {mn:\"DCP\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"CZN\"}, // df\n  {mn:\"CPX\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"CZN\"}, // e0\n  {mn:\"SBC\",am:\"(aa,x)\",nb:2,il:0,c1:6,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // e1\n  {mn:\"NOP\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // e2\n  {mn:\"ISB\",am:\"(aa,x)\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // e3\n  {mn:\"CPX\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"CZN\"}, // e4\n  {mn:\"SBC\",am:\"aa\",nb:2,il:0,c1:3,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // e5\n  {mn:\"INC\",am:\"aa\",nb:2,il:0,c1:5,c2:0,nw:2,br:0,mod:\"ZN\"}, // e6\n  {mn:\"ISB\",am:\"aa\",nb:2,il:1,c1:5,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // e7\n  {mn:\"INX\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"XZN\"}, // e8\n  {mn:\"SBC\",am:\"#aa\",nb:2,il:0,c1:2,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // e9\n  {mn:\"NOP\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // ea\n  {mn:\"SBC\",am:\"#aa\",nb:2,il:1,c1:2,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // eb\n  {mn:\"CPX\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"CZN\"}, // ec\n  {mn:\"SBC\",am:\"AAAA\",nb:3,il:0,c1:4,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // ed\n  {mn:\"INC\",am:\"AAAA\",nb:3,il:0,c1:6,c2:0,nw:2,br:0,mod:\"ZN\"}, // ee\n  {mn:\"ISB\",am:\"AAAA\",nb:3,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // ef\n  {mn:\"BEQ\",am:\"branch\",nb:2,il:0,c1:2,c2:2,nw:0,br:1,mod:\"\"}, // f0\n  {mn:\"SBC\",am:\"(aa),y\",nb:2,il:0,c1:5,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // f1\n  {mn:\"KIL\",am:\"\",nb:1,il:2,c1:3,c2:0,nw:0,br:1,mod:\"\"}, // f2\n  {mn:\"ISB\",am:\"(aa),y\",nb:2,il:1,c1:8,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // f3\n  {mn:\"NOP\",am:\"aa,x\",nb:2,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // f4\n  {mn:\"SBC\",am:\"aa,x\",nb:2,il:0,c1:4,c2:0,nw:0,br:0,mod:\"ACZVN\"}, // f5\n  {mn:\"INC\",am:\"aa,x\",nb:2,il:0,c1:6,c2:0,nw:2,br:0,mod:\"ZN\"}, // f6\n  {mn:\"ISB\",am:\"aa,x\",nb:2,il:1,c1:6,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // f7\n  {mn:\"SED\",am:\"\",nb:1,il:0,c1:2,c2:0,nw:0,br:0,mod:\"D\"}, // f8\n  {mn:\"SBC\",am:\"AAAA,y\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // f9\n  {mn:\"NOP\",am:\"\",nb:1,il:1,c1:2,c2:0,nw:0,br:0,mod:\"\"}, // fa\n  {mn:\"ISB\",am:\"AAAA,y\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // fb\n  {mn:\"NOP\",am:\"AAAA,x\",nb:3,il:1,c1:4,c2:0,nw:0,br:0,mod:\"\"}, // fc\n  {mn:\"SBC\",am:\"AAAA,x\",nb:3,il:0,c1:4,c2:1,nw:0,br:0,mod:\"ACZVN\"}, // fd\n  {mn:\"INC\",am:\"AAAA,x\",nb:3,il:0,c1:7,c2:0,nw:2,br:0,mod:\"ZN\"}, // fe\n  {mn:\"ISB\",am:\"AAAA,x\",nb:3,il:1,c1:7,c2:0,nw:2,br:0,mod:\"ACZVN\"}, // ff\n];\n\nexport function disassemble6502(pc:number, b0:number, b1:number, b2:number) : {line:string, nbytes:number, isaddr:boolean} {\n\n  var op = OPS_6502[b0];\n  if (op == null) return {line:\"???\", nbytes:1, isaddr:false};\n  var s = op.mn;\n  var am = op.am;\n  var isaddr = false;\n  if (am == 'branch') {\n    var offset = (b1 < 0x80) ? (pc+2+b1) : (pc+2-(256-b1));\n    offset &= 0xffff;\n    am = '$'+hex(offset, 4);\n    isaddr = true;\n  } else {\n    am = am.replace('aa','$'+hex(b1, 2));\n    am = am.replace('AAAA','$'+hex(b1+(b2<<8), 4));\n    if (am.indexOf('#') < 0 && am.indexOf('$') >= 0)\n      isaddr = true;\n  }\n  return {line:op.mn + \" \" + am, nbytes:op.nb, isaddr:isaddr};\n};\n", "// Generated by CoffeeScript 1.9.3\n\nimport { CPU, Bus, InstructionBased, IOBusConnected, SavesState, Interruptable } from \"../devices\";\n\n///////////////////////////////////////////////////////////////////////////////\n/// @file Z80.js\n///\n/// @brief Emulator for the Zilog Z80 microprocessor\n///\n/// @author Matthew Howell\n///\n/// @remarks\n///  This module is a simple, straightforward instruction interpreter.\n///   There is no fancy dynamic recompilation or cycle-accurate emulation.\n///   The author believes that this should be sufficient for any emulator that\n///   would be feasible to write in JavaScript anyway.\n///  The code and the comments in this file assume that the reader is familiar\n///   with the Z80 architecture. If you're not, here are some references I use:\n///  http://clrhome.org/table/ - Z80 instruction set tables\n///  http://www.zilog.com/docs/z80/um0080.pdf - The official manual\n///  http://www.myquest.nl/z80undocumented/z80-documented-v0.91.pdf\n///   - The Undocumented Z80, Documented\n///\n/// @copyright (c) 2013 Matthew Howell\n///  This code is released under the MIT license,\n///  a copy of which is available in the associated README.md file,\n///  or at http://opensource.org/licenses/MIT\n///////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////\n/// We'll begin with the object constructor and the public API functions.\n///////////////////////////////////////////////////////////////////////////////\nfunction FastZ80(coreParameter)\n{\n   // Obviously we'll be needing the core object's functions again.\n   const core = coreParameter;\n   \n   // The argument to this constructor should be an object containing 4 functions:\n   // mem_read(address) should return the byte at the given memory address,\n   // mem_write(address, value) should write the given value to the given memory address,\n   // io_read(port) should read a return a byte read from the given I/O port,\n   // io_write(port, value) should write the given byte to the given I/O port.\n   // If any of those functions is missing, this module cannot run.\n   if (!core || (typeof core.mem_read !== \"function\") || (typeof core.mem_write !== \"function\") ||\n                (typeof core.io_read !== \"function\")  || (typeof core.io_write !== \"function\"))\n      throw(\"Z80: Core object is missing required functions.\");\n   \n   // All right, let's initialize the registers.\n   // First, the standard 8080 registers.\n   let a = 0x00;\n   let b = 0x00;\n   let c = 0x00;\n   let d = 0x00;\n   let e = 0x00;\n   let h = 0x00;\n   let l = 0x00;\n   // Now the special Z80 copies of the 8080 registers\n   //  (the ones used for the SWAP instruction and such).\n   let a_prime = 0x00;\n   let b_prime = 0x00;\n   let c_prime = 0x00;\n   let d_prime = 0x00;\n   let e_prime = 0x00;\n   let h_prime = 0x00;\n   let l_prime = 0x00;\n   // And now the Z80 index registers.\n   let ix = 0x0000;\n   let iy = 0x0000;\n   // Then the \"utility\" registers: the interrupt vector,\n   //  the memory refresh, the stack pointer, and the program counter.\n   let i = 0x00;\n   let r = 0x00;\n   let sp = 0xdff0;\n   let pc = 0x0000;\n   // We don't keep an F register for the flags,\n   //  because most of the time we're only accessing a single flag,\n   //  so we optimize for that case and use utility functions\n   //  for the rarer occasions when we need to access the whole register.\n   let flags = {S:0, Z:0, Y:0, H:0, X:0, P:0, N:0, C:0};\n   let flags_prime = {S:0, Z:0, Y:0, H:0, X:0, P:0, N:0, C:0};\n   // And finally we have the interrupt mode and flip-flop registers.\n   let imode = 0;\n   let iff1 = 0;\n   let iff2 = 0;\n   \n   // These are all specific to this implementation, not Z80 features.\n   // Keep track of whether we've had a HALT instruction called.\n   let halted = false;\n   // EI and DI wait one instruction before they take effect;\n   //  these flags tell us when we're in that wait state.\n   let do_delayed_di = false;\n   let do_delayed_ei = false;\n   // This tracks the number of cycles spent in a single instruction run,\n   //  including processing any prefixes and handling interrupts.\n   let cycle_counter = 0;\n   \n   function getState():Z80State {\n      return {\n         PC:pc,\n         SP:sp,\n         IX:ix,\n         IY:iy,\n         AF:(a<<8)+get_flags_register(),\n         BC:(b<<8)+c,\n         DE:(d<<8)+e,\n         HL:(h<<8)+l,\n         AF_:(a_prime<<8)+get_flags_prime(),\n         BC_:(b_prime<<8)+c_prime,\n         DE_:(d_prime<<8)+e_prime,\n         HL_:(h_prime<<8)+l_prime,\n         IR:(i<<8)+r,\n         im            : imode,\n         iff1          : iff1,\n         iff2          : iff2,\n         halted        : halted,\n         do_delayed_di : do_delayed_di,\n         do_delayed_ei : do_delayed_ei,\n         cycle_counter : cycle_counter\n      };   \n   }\n\n   function setState(state:Z80State) {\n    pc = state.PC;\n    sp = state.SP;\n    ix = state.IX;\n    iy = state.IY;\n    a = (state.AF >> 8) & 0xff;\n    set_flags_register(state.AF);\n    b = (state.BC >> 8) & 0xff;\n    c = state.BC & 0xff;\n    d = (state.DE >> 8) & 0xff;\n    e = state.DE & 0xff;\n    h = (state.HL >> 8) & 0xff;\n    l = state.HL & 0xff;\n    a_prime = (state.AF_ >> 8) & 0xff;\n    set_flags_prime(state.AF_);\n    b_prime = (state.BC_ >> 8) & 0xff;\n    c_prime = state.BC_ & 0xff;\n    d_prime = (state.DE_ >> 8) & 0xff;\n    e_prime = state.DE_ & 0xff;\n    h_prime = (state.HL_ >> 8) & 0xff;\n    l_prime = state.HL_ & 0xff;\n    i = (state.IR >> 8) & 0xff;\n    r = state.IR & 0xff;\n    imode = state.im;\n    iff1 = state.iff1;\n    iff2 = state.iff2;\n    halted = state.halted;\n    do_delayed_di = state.do_delayed_di;\n    do_delayed_ei = state.do_delayed_ei;\n    cycle_counter = state.cycle_counter;\n   }\n\n///////////////////////////////////////////////////////////////////////////////\n/// @public reset\n///\n/// @brief Re-initialize the processor as if a reset or power on had occured\n///////////////////////////////////////////////////////////////////////////////\nlet reset = function()\n{\n   // These registers are the ones that have predictable states\n   //  immediately following a power-on or a reset.\n   // The others are left alone, because their states are unpredictable.\n   sp = 0xdff0;\n   pc = 0x0000;\n   a = 0x00;\n   r = 0x00;\n   set_flags_register(0);\n   // Start up with interrupts disabled.\n   imode = 0;\n   iff1 = 0;\n   iff2 = 0;\n   // Don't start halted or in a delayed DI or EI.\n   halted = false;\n   do_delayed_di = false;\n   do_delayed_ei = false;\n   // Obviously we've not used any cycles yet.\n   cycle_counter = 0;\n};\n\n///////////////////////////////////////////////////////////////////////////////\n/// @public run_instruction\n///\n/// @brief Runs a single instruction\n///\n/// @return The number of T cycles the instruction took to run,\n///          plus any time that went into handling interrupts that fired\n///          while this instruction was executing\n///////////////////////////////////////////////////////////////////////////////\nlet run_instruction = function()\n{\n   if (!halted)\n   {\n      // If the previous instruction was a DI or an EI,\n      //  we'll need to disable or enable interrupts\n      //  after whatever instruction we're about to run is finished.\n      var doing_delayed_di = false, doing_delayed_ei = false;\n      if (do_delayed_di)\n      {\n         do_delayed_di = false;\n         doing_delayed_di = true;\n      }\n      else if (do_delayed_ei)\n      {\n         do_delayed_ei = false;\n         doing_delayed_ei = true;\n      }\n\n      // R is incremented at the start of every instruction cycle,\n      //  before the instruction actually runs.\n      // The high bit of R is not affected by this increment,\n      //  it can only be changed using the LD R, A instruction.\n      r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n      \n      // Read the byte at the PC and run the instruction it encodes.\n      var opcode = core.mem_read(pc);\n      decode_instruction(opcode);\n      pc = (pc + 1) & 0xffff;\n      \n      // Actually do the delayed interrupt disable/enable if we have one.\n      if (doing_delayed_di)\n      {\n         iff1 = 0;\n         iff2 = 0;\n         //console.log(\"DI\",pc);\n      }\n      else if (doing_delayed_ei)\n      {\n         iff1 = 1;\n         iff2 = 1;\n         //console.log(\"EI\",pc);\n      }\n      \n      // And finally clear out the cycle counter for the next instruction\n      //  before returning it to the emulator core.\n      var retval = cycle_counter;\n      cycle_counter = 0;\n      return retval;\n   }\n   else\n   {\n      // While we're halted, claim that we spent a cycle doing nothing,\n      //  so that the rest of the emulator can still proceed.\n      return 1;\n   }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n/// @public interrupt\n///\n/// @brief Simulates pulsing the processor's INT (or NMI) pin\n///\n/// @param non_maskable - true if this is a non-maskable interrupt\n/// @param data - the value to be placed on the data bus, if needed\n///////////////////////////////////////////////////////////////////////////////\nlet interrupt = function(non_maskable:boolean, data:number) : boolean\n{\n   //console.log(non_maskable, data, iff1, iff2, do_delayed_ei, do_delayed_di);\n   if (non_maskable)\n   {\n      // The high bit of R is not affected by this increment,\n      //  it can only be changed using the LD R, A instruction.\n      r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n      // Non-maskable interrupts are always handled the same way;\n      //  clear IFF1 and then do a CALL 0x0066.\n      // Also, all interrupts reset the HALT state.\n      halted = false;\n      iff2 = iff1;\n      iff1 = 0;\n      push_word(pc);\n      pc = 0x66;\n      cycle_counter += 11;\n      return true;\n   }\n   else if (iff1)\n   {\n      // The high bit of R is not affected by this increment,\n      //  it can only be changed using the LD R, A instruction.\n      r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n   \n      halted = false;\n      iff1 = 0;\n      iff2 = 0;\n   \n      if (imode === 0)\n      {\n         // In the 8080-compatible interrupt mode,\n         //  decode the content of the data bus as an instruction and run it.\n         pc = (pc - 1) & 0xffff; //SEH: so do_reset() pushes right value\n         decode_instruction(data);\n         pc = (pc + 1) & 0xffff; //SEH: so do_reset() pushes right value\n         cycle_counter += 2;\n      }\n      else if (imode === 1)\n      {\n         // Mode 1 is always just RST 0x38.\n         push_word(pc);\n         pc = 0x38;\n         cycle_counter += 13;\n      }\n      else if (imode === 2)\n      {\n         // Mode 2 uses the value on the data bus as in index\n         //  into the vector table pointer to by the I register.\n         push_word(pc);\n         // The Z80 manual says that this address must be 2-byte aligned,\n         //  but it doesn't appear that this is actually the case on the hardware,\n         //  so we don't attempt to enforce that here.\n         var vector_address = ((i << 8) | data);\n         pc = core.mem_read(vector_address) | \n                   (core.mem_read((vector_address + 1) & 0xffff) << 8);\n         \n         cycle_counter += 19;\n      }\n      //console.log(imode,data,pc);\n      return true;\n   }\n};\n\n///////////////////////////////////////////////////////////////////////////////\n/// The public API functions end here.\n///\n/// What begins here are just general utility functions, used variously.\n///////////////////////////////////////////////////////////////////////////////\nlet decode_instruction = function(opcode)\n{\n   // The register-to-register loads and ALU instructions\n   //  are all so uniform that we can decode them directly\n   //  instead of going into the instruction array for them.\n   // This function gets the operand for all of these instructions.\n   var get_operand = function(opcode)\n   {\n      return ((opcode & 0x07) === 0) ? b :\n             ((opcode & 0x07) === 1) ? c :\n             ((opcode & 0x07) === 2) ? d :\n             ((opcode & 0x07) === 3) ? e :\n             ((opcode & 0x07) === 4) ? h :\n             ((opcode & 0x07) === 5) ? l :\n             ((opcode & 0x07) === 6) ? core.mem_read(l | (h << 8)) : a;\n   };\n\n   // Handle HALT right up front, because it fouls up our LD decoding\n   //  by falling where LD (HL), (HL) ought to be.\n   if (opcode === 0x76)\n   {\n      halted = true;\n   }\n   else if ((opcode >= 0x40) && (opcode < 0x80))\n   {\n      // This entire range is all 8-bit register loads.\n      // Get the operand and assign it to the correct destination.\n      var operand = get_operand(opcode);\n         \n      if (((opcode & 0x38) >>> 3) === 0)\n         b = operand;\n      else if (((opcode & 0x38) >>> 3) === 1)\n         c = operand;\n      else if (((opcode & 0x38) >>> 3) === 2)\n         d = operand;\n      else if (((opcode & 0x38) >>> 3) === 3)\n         e = operand;\n      else if (((opcode & 0x38) >>> 3) === 4)\n         h = operand;\n      else if (((opcode & 0x38) >>> 3) === 5)\n         l = operand;\n      else if (((opcode & 0x38) >>> 3) === 6)\n         core.mem_write(l | (h << 8), operand);\n      else if (((opcode & 0x38) >>> 3) === 7)\n         a = operand;\n   }\n   else if ((opcode >= 0x80) && (opcode < 0xc0))\n   {\n      // These are the 8-bit register ALU instructions.\n      // We'll get the operand and then use this \"jump table\"\n      //  to call the correct utility function for the instruction.\n      var operand = get_operand(opcode),\n          op_array = [do_add, do_adc, do_sub, do_sbc,\n                      do_and, do_xor, do_or, do_cp];\n      \n      op_array[(opcode & 0x38) >>> 3]( operand);\n   }\n   else\n   {\n      // This is one of the less formulaic instructions;\n      //  we'll get the specific function for it from our array.\n      var func = instructions[opcode];\n      func();\n   }\n   \n   // Update the cycle counter with however many cycles\n   //  the base instruction took.\n   // If this was a prefixed instruction, then\n   //  the prefix handler has added its extra cycles already.\n   cycle_counter += cycle_counts[opcode];\n};\n\nlet get_signed_offset_byte = function(value)\n{\n   // This function requires some explanation.\n   // We just use JavaScript Number variables for our registers,\n   //  not like a typed array or anything.\n   // That means that, when we have a byte value that's supposed\n   //  to represent a signed offset, the value we actually see\n   //  isn't signed at all, it's just a small integer.\n   // So, this function converts that byte into something JavaScript\n   //  will recognize as signed, so we can easily do arithmetic with it.\n   // First, we clamp the value to a single byte, just in case.\n   value &= 0xff;\n   // We don't have to do anything if the value is positive.\n   if (value & 0x80)\n   {\n      // But if the value is negative, we need to manually un-two's-compliment it.\n      // I'm going to assume you can figure out what I meant by that,\n      //  because I don't know how else to explain it.\n      // We could also just do value |= 0xffffff00, but I prefer\n      //  not caring how many bits are in the integer representation\n      //  of a JavaScript number in the currently running browser.\n      value = -((0xff & ~value) + 1);\n   }\n   return value;\n};\n\nlet get_flags_register = function()\n{\n   // We need the whole F register for some reason.\n   //  probably a PUSH AF instruction,\n   //  so make the F register out of our separate flags.\n   return (flags.S << 7) |\n          (flags.Z << 6) |\n          (flags.Y << 5) |\n          (flags.H << 4) |\n          (flags.X << 3) |\n          (flags.P << 2) |\n          (flags.N << 1) |\n          (flags.C);\n};\n\nlet get_flags_prime = function()\n{\n   // This is the same as the above for the F' register.\n   return (flags_prime.S << 7) |\n          (flags_prime.Z << 6) |\n          (flags_prime.Y << 5) |\n          (flags_prime.H << 4) |\n          (flags_prime.X << 3) |\n          (flags_prime.P << 2) |\n          (flags_prime.N << 1) |\n          (flags_prime.C);\n};\n\nlet set_flags_register = function(operand)\n{\n   // We need to set the F register, probably for a POP AF,\n   //  so break out the given value into our separate flags.\n   flags.S = (operand & 0x80) >>> 7;\n   flags.Z = (operand & 0x40) >>> 6;\n   flags.Y = (operand & 0x20) >>> 5;\n   flags.H = (operand & 0x10) >>> 4;\n   flags.X = (operand & 0x08) >>> 3;\n   flags.P = (operand & 0x04) >>> 2;\n   flags.N = (operand & 0x02) >>> 1;\n   flags.C = (operand & 0x01);\n};\n\nlet set_flags_prime = function(operand)\n{\n   // Again, this is the same as the above for F'.\n   flags_prime.S = (operand & 0x80) >>> 7;\n   flags_prime.Z = (operand & 0x40) >>> 6;\n   flags_prime.Y = (operand & 0x20) >>> 5;\n   flags_prime.H = (operand & 0x10) >>> 4;\n   flags_prime.X = (operand & 0x08) >>> 3;\n   flags_prime.P = (operand & 0x04) >>> 2;\n   flags_prime.N = (operand & 0x02) >>> 1;\n   flags_prime.C = (operand & 0x01);\n};\n\nlet update_xy_flags = function(result)\n{\n   // Most of the time, the undocumented flags\n   //  (sometimes called X and Y, or 3 and 5),\n   //  take their values from the corresponding bits\n   //  of the result of the instruction,\n   //  or from some other related value.\n   // This is a utility function to set those flags based on those bits.\n   flags.Y = (result & 0x20) >>> 5;\n   flags.X = (result & 0x08) >>> 3;\n};\n\nlet get_parity = function(value)\n{\n   // We could try to actually calculate the parity every time,\n   //  but why calculate what you can pre-calculate?\n   var parity_bits = [\n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1,\n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0, \n      1, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1\n   ];\n   return parity_bits[value];\n};\n\nlet push_word = function(operand)\n{\n   // Pretty obvious what this function does; given a 16-bit value,\n   //  decrement the stack pointer, write the high byte to the new\n   //  stack pointer location, then repeat for the low byte.\n   sp = (sp - 1) & 0xffff;\n   core.mem_write(sp, (operand & 0xff00) >>> 8);\n   sp = (sp - 1) & 0xffff;\n   core.mem_write(sp, operand & 0x00ff);\n};\n\nlet pop_word = function()\n{\n   // Again, not complicated; read a byte off the top of the stack,\n   //  increment the stack pointer, rinse and repeat.\n   var retval = core.mem_read(sp) & 0xff;\n   sp = (sp + 1) & 0xffff;\n   retval |= core.mem_read(sp) << 8;\n   sp = (sp + 1) & 0xffff;\n   return retval;\n};\n\n///////////////////////////////////////////////////////////////////////////////\n/// Now, the way most instructions work in this emulator is that they set up\n///  their operands according to their addressing mode, and then they call a\n///  utility function that handles all variations of that instruction.\n/// Those utility functions begin here.\n///////////////////////////////////////////////////////////////////////////////\nlet do_conditional_absolute_jump = function(condition)\n{\n   // This function implements the JP [condition],nn instructions.\n   if (condition)\n   {\n      // We're taking this jump, so write the new PC,\n      //  and then decrement the thing we just wrote,\n      //  because the instruction decoder increments the PC\n      //  unconditionally at the end of every instruction\n      //  and we need to counteract that so we end up at the jump target.\n      pc =  core.mem_read((pc + 1) & 0xffff) |\n                (core.mem_read((pc + 2) & 0xffff) << 8);\n      pc = (pc - 1) & 0xffff;\n   }\n   else\n   {\n      // We're not taking this jump, just move the PC past the operand.\n      pc = (pc + 2) & 0xffff;\n   }\n};\n\nlet do_conditional_relative_jump = function(condition)\n{\n   // This function implements the JR [condition],n instructions.\n   if (condition)\n   {\n      // We need a few more cycles to actually take the jump.\n      cycle_counter += 5;\n      // Calculate the offset specified by our operand.\n      var offset = get_signed_offset_byte(core.mem_read((pc + 1) & 0xffff));\n      // Add the offset to the PC, also skipping past this instruction.\n      pc = (pc + offset + 1) & 0xffff;\n   }\n   else\n   {\n      // No jump happening, just skip the operand.\n      pc = (pc + 1) & 0xffff;\n   }\n};\n\nlet do_conditional_call = function(condition)\n{\n   // This function is the CALL [condition],nn instructions.\n   // If you've seen the previous functions, you know this drill.\n   if (condition)\n   {\n      cycle_counter += 7;\n      push_word((pc + 3) & 0xffff);\n      pc =  core.mem_read((pc + 1) & 0xffff) |\n                (core.mem_read((pc + 2) & 0xffff) << 8);\n      pc = (pc - 1) & 0xffff;\n   }\n   else\n   {\n      pc = (pc + 2) & 0xffff;\n   }\n};\n\nlet do_conditional_return = function(condition)\n{\n   if (condition)\n   {\n      cycle_counter += 6;\n      pc = (pop_word() - 1) & 0xffff;\n   }\n};\n\nlet do_reset = function(address)\n{\n   // The RST [address] instructions go through here.\n   push_word((pc + 1) & 0xffff);\n   pc = (address - 1) & 0xffff;\n};\n\nlet do_add = function(operand)\n{\n   // This is the ADD A, [operand] instructions.\n   // We'll do the literal addition, which includes any overflow,\n   //  so that we can more easily figure out whether we had\n   //  an overflow or a carry and set the flags accordingly.\n   var result = a + operand;\n   \n   // The great majority of the work for the arithmetic instructions\n   //  turns out to be setting the flags rather than the actual operation.\n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = (((operand & 0x0f) + (a & 0x0f)) & 0x10) ? 1 : 0;\n   // An overflow has happened if the sign bits of the accumulator and the operand\n   //  don't match the sign bit of the result value.\n   flags.P = ((a & 0x80) === (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n   flags.N = 0;\n   flags.C = (result & 0x100) ? 1 : 0;\n   \n   a = result & 0xff;\n   update_xy_flags(a);\n};\n\nlet do_adc = function(operand)\n{\n   var result = a + operand + flags.C;\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = (((operand & 0x0f) + (a & 0x0f) + flags.C) & 0x10) ? 1 : 0;\n   flags.P = ((a & 0x80) === (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n   flags.N = 0;\n   flags.C = (result & 0x100) ? 1 : 0;\n   \n   a = result & 0xff;\n   update_xy_flags(a);\n};\n\nlet do_sub = function(operand)\n{\n   var result = a - operand;\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = (((a & 0x0f) - (operand & 0x0f)) & 0x10) ? 1 : 0;\n   flags.P = ((a & 0x80) !== (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n   flags.N = 1;\n   flags.C = (result & 0x100) ? 1 : 0;\n   \n   a = result & 0xff;\n   update_xy_flags(a);\n};\n\nlet do_sbc = function(operand)\n{\n   var result = a - operand - flags.C;\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = (((a & 0x0f) - (operand & 0x0f) - flags.C) & 0x10) ? 1 : 0;\n   flags.P = ((a & 0x80) !== (operand & 0x80)) && ((a & 0x80) !== (result & 0x80)) ? 1 : 0;\n   flags.N = 1;\n   flags.C = (result & 0x100) ? 1 : 0;\n   \n   a = result & 0xff;\n   update_xy_flags(a);\n};\n\nlet do_cp = function(operand)\n{\n   // A compare instruction is just a subtraction that doesn't save the value,\n   //  so we implement it as... a subtraction that doesn't save the value.\n   var temp = a;\n   do_sub(operand);\n   a = temp;\n   // Since this instruction has no \"result\" value, the undocumented flags\n   //  are set based on the operand instead.\n   update_xy_flags(operand);\n};\n\nlet do_and = function(operand)\n{\n   // The logic instructions are all pretty straightforward.\n   a &= operand & 0xff;\n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = !a ? 1 : 0;\n   flags.H = 1;\n   flags.P = get_parity(a);\n   flags.N = 0;\n   flags.C = 0;\n   update_xy_flags(a);\n};\n\nlet do_or = function(operand)\n{\n   a = (operand | a) & 0xff;\n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = !a ? 1 : 0;\n   flags.H = 0;\n   flags.P = get_parity(a);\n   flags.N = 0;\n   flags.C = 0;\n   update_xy_flags(a);\n};\n\nlet do_xor = function(operand)\n{\n   a = (operand ^ a) & 0xff;\n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = !a ? 1 : 0;\n   flags.H = 0;\n   flags.P = get_parity(a);\n   flags.N = 0;\n   flags.C = 0;\n   update_xy_flags(a);\n};\n\nlet do_inc = function(operand)\n{\n   var result = operand + 1;\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = ((operand & 0x0f) === 0x0f) ? 1 : 0;\n   // It's a good deal easier to detect overflow for an increment/decrement.\n   flags.P = (operand === 0x7f) ? 1 : 0;\n   flags.N = 0;\n   \n   result &= 0xff;\n   update_xy_flags(result);\n   \n   return result;\n};\n\nlet do_dec = function(operand)\n{\n   var result = operand - 1;\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = !(result & 0xff) ? 1 : 0;\n   flags.H = ((operand & 0x0f) === 0x00) ? 1 : 0;\n   flags.P = (operand === 0x80) ? 1 : 0;\n   flags.N = 1;\n   \n   result &= 0xff;\n   update_xy_flags(result);\n   \n   return result;\n};\n\nlet do_hl_add = function(operand)\n{\n   // The HL arithmetic instructions are the same as the A ones,\n   //  just with twice as many bits happening.\n   var hl = l | (h << 8), result = hl + operand;\n   \n   flags.N = 0;\n   flags.C = (result & 0x10000) ? 1 : 0;\n   flags.H = (((hl & 0x0fff) + (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n   \n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n\n   update_xy_flags(h);\n};\n\nlet do_hl_adc = function(operand)\n{\n   operand += flags.C;\n   var hl = l | (h << 8), result = hl + operand;\n   \n   flags.S = (result & 0x8000) ? 1 : 0;\n   flags.Z = !(result & 0xffff) ? 1 : 0;\n   flags.H = (((hl & 0x0fff) + (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n   flags.P = ((hl & 0x8000) === (operand & 0x8000)) && ((result & 0x8000) !== (hl & 0x8000)) ? 1 : 0;\n   flags.N = 0;\n   flags.C = (result & 0x10000) ? 1 : 0;\n   \n   l = result & 0xff;\n   h = (result >>> 8) & 0xff;\n   \n   update_xy_flags(h);\n};\n\nlet do_hl_sbc = function(operand)\n{\n   operand += flags.C;\n   var hl = l | (h << 8), result = hl - operand;\n   \n   flags.S = (result & 0x8000) ? 1 : 0;\n   flags.Z = !(result & 0xffff) ? 1 : 0;\n   flags.H = (((hl & 0x0fff) - (operand & 0x0fff)) & 0x1000) ? 1 : 0;\n   flags.P = ((hl & 0x8000) !== (operand & 0x8000)) && ((result & 0x8000) !== (hl & 0x8000)) ? 1 : 0;\n   flags.N = 1;\n   flags.C = (result & 0x10000) ? 1 : 0;\n   \n   l = result & 0xff;\n   h = (result >>> 8) & 0xff;\n   \n   update_xy_flags(h);\n};\n\nlet do_in = function(port)\n{\n   var result = core.io_read(port);\n   \n   flags.S = (result & 0x80) ? 1 : 0;\n   flags.Z = result ? 0 : 1;\n   flags.H = 0;\n   flags.P = get_parity(result) ? 1 : 0;\n   flags.N = 0;\n   update_xy_flags(result);\n   \n   return result;\n};\n\nlet do_neg = function()\n{\n   // This instruction is defined to not alter the register if it === 0x80.\n   if (a !== 0x80)\n   {\n      // This is a signed operation, so convert A to a signed value.\n      a = get_signed_offset_byte(a);\n      \n      a = (-a) & 0xff;\n   }\n   \n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = !a ? 1 : 0;\n   flags.H = (((-a) & 0x0f) > 0) ? 1 : 0;\n   flags.P = (a === 0x80) ? 1 : 0;\n   flags.N = 1;\n   flags.C = a ? 1 : 0;\n   update_xy_flags(a);\n};\n\nlet do_ldi = function()\n{\n   // Copy the value that we're supposed to copy.\n   var read_value = core.mem_read(l | (h << 8));\n   core.mem_write(e | (d << 8), read_value);\n   \n   // Increment DE and HL, and decrement BC.\n   var result = (e | (d << 8)) + 1;\n   e = result & 0xff;\n   d = (result & 0xff00) >>> 8;\n   result = (l | (h << 8)) + 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   result = (c | (b << 8)) - 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n   \n   flags.H = 0;\n   flags.P = (c || b) ? 1 : 0;\n   flags.N = 0;\n   flags.Y = ((a + read_value) & 0x02) >>> 1;\n   flags.X = ((a + read_value) & 0x08) >>> 3;\n};\n\nlet do_cpi = function()\n{\n   var temp_carry = flags.C;\n   var read_value = core.mem_read(l | (h << 8))\n   do_cp(read_value);\n   flags.C = temp_carry;\n   flags.Y = ((a - read_value - flags.H) & 0x02) >>> 1;\n   flags.X = ((a - read_value - flags.H) & 0x08) >>> 3;\n   \n   var result = (l | (h << 8)) + 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   result = (c | (b << 8)) - 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n   \n   flags.P = result ? 1 : 0;\n};\n\nlet do_ini = function()\n{\n   b = do_dec(b);\n   \n   core.mem_write(l | (h << 8), core.io_read((b << 8) | c));\n   \n   var result = (l | (h << 8)) + 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n\n   flags.N = 1;\n};\n\nlet do_outi = function()\n{\n   core.io_write((b << 8) | c, core.mem_read(l | (h << 8)));\n   \n   var result = (l | (h << 8)) + 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   \n   b = do_dec(b);\n   flags.N = 1;\n};\n\nlet do_ldd = function()\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   var read_value = core.mem_read(l | (h << 8));\n   core.mem_write(e | (d << 8), read_value);\n   \n   var result = (e | (d << 8)) - 1;\n   e = result & 0xff;\n   d = (result & 0xff00) >>> 8;\n   result = (l | (h << 8)) - 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   result = (c | (b << 8)) - 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n   \n   flags.P = (c || b) ? 1 : 0;\n   flags.Y = ((a + read_value) & 0x02) >>> 1;\n   flags.X = ((a + read_value) & 0x08) >>> 3;\n};\n\nlet do_cpd = function()\n{\n   var temp_carry = flags.C\n   var read_value = core.mem_read(l | (h << 8))\n   do_cp(read_value);\n   flags.C = temp_carry;\n   flags.Y = ((a - read_value - flags.H) & 0x02) >>> 1;\n   flags.X = ((a - read_value - flags.H) & 0x08) >>> 3;\n   \n   var result = (l | (h << 8)) - 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   result = (c | (b << 8)) - 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n   \n   flags.P = result ? 1 : 0;\n};\n\nlet do_ind = function()\n{\n   b = do_dec(b);\n   \n   core.mem_write(l | (h << 8), core.io_read((b << 8) | c));\n   \n   var result = (l | (h << 8)) - 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   \n   flags.N = 1;\n};\n\nlet do_outd = function()\n{\n   core.io_write((b << 8) | c, core.mem_read(l | (h << 8)));\n   \n   var result = (l | (h << 8)) - 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n   \n   b = do_dec(b);\n   flags.N = 1;\n};\n\nlet do_rlc = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = (operand & 0x80) >>> 7;\n   operand = ((operand << 1) | flags.C) & 0xff;\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n   \n   return operand;\n};\n\nlet do_rrc = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = operand & 1;\n   operand = ((operand >>> 1) & 0x7f) | (flags.C << 7);\n   \n   flags.Z = !(operand & 0xff) ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n   \n   return operand & 0xff;\n};\n\nlet do_rl = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   var temp = flags.C;\n   flags.C = (operand & 0x80) >>> 7;\n   operand = ((operand << 1) | temp) & 0xff;\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n\n   return operand;\n};\n\nlet do_rr = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   var temp = flags.C;\n   flags.C = operand & 1;\n   operand = ((operand >>> 1) & 0x7f) | (temp << 7);\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n\n   return operand;\n};\n\nlet do_sla = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = (operand & 0x80) >>> 7;\n   operand = (operand << 1) & 0xff;\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n   \n   return operand;\n};\n\nlet do_sra = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = operand & 1;\n   operand = ((operand >>> 1) & 0x7f) | (operand & 0x80);\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n   \n   return operand;\n};\n\nlet do_sll = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = (operand & 0x80) >>> 7;\n   operand = ((operand << 1) & 0xff) | 1;\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = (operand & 0x80) ? 1 : 0;\n   update_xy_flags(operand);\n   \n   return operand;\n};\n\nlet do_srl = function(operand)\n{\n   flags.N = 0;\n   flags.H = 0;\n   \n   flags.C = operand & 1;\n   operand = (operand >>> 1) & 0x7f;\n   \n   flags.Z = !operand ? 1 : 0;\n   flags.P = get_parity(operand);\n   flags.S = 0;\n   update_xy_flags(operand);\n   \n   return operand;\n};\n\nlet do_ix_add = function(operand)\n{\n   flags.N = 0;\n   \n   var result = ix + operand;\n   \n   flags.C = (result & 0x10000) ? 1 : 0;\n   flags.H = (((ix & 0xfff) + (operand & 0xfff)) & 0x1000) ? 1 : 0;\n   update_xy_flags((result & 0xff00) >>> 8);\n   \n   ix = result & 0xffff;\n};\n\n\n///////////////////////////////////////////////////////////////////////////////\n/// This table contains the implementations for the instructions that weren't\n///  implemented directly in the decoder function (everything but the 8-bit\n///  register loads and the accumulator ALU instructions, in other words).\n/// Similar tables for the ED and DD/FD prefixes follow this one.\n///////////////////////////////////////////////////////////////////////////////\nlet instructions = [];\n\n// 0x00 : NOP\ninstructions[0x00] = function() { };\n// 0x01 : LD BC, nn\ninstructions[0x01] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   c = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   b = core.mem_read(pc);\n};\n// 0x02 : LD (BC), A\ninstructions[0x02] = function()\n{\n   core.mem_write(c | (b << 8), a);\n};\n// 0x03 : INC BC\ninstructions[0x03] = function()\n{\n   var result = (c | (b << 8));\n   result += 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n};\n// 0x04 : INC B\ninstructions[0x04] = function()\n{\n   b = do_inc(b);\n};\n// 0x05 : DEC B\ninstructions[0x05] = function()\n{\n   b = do_dec(b);\n};\n// 0x06 : LD B, n\ninstructions[0x06] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   b = core.mem_read(pc);\n};\n// 0x07 : RLCA\ninstructions[0x07] = function()\n{\n   // This instruction is implemented as a special case of the\n   //  more general Z80-specific RLC instruction.\n   // Specifially, RLCA is a version of RLC A that affects fewer flags.\n   // The same applies to RRCA, RLA, and RRA.\n   var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n   a = do_rlc(a);\n   flags.S = temp_s;\n   flags.Z = temp_z;\n   flags.P = temp_p;\n};\n// 0x08 : EX AF, AF'\ninstructions[0x08] = function()\n{\n   var temp = a;\n   a = a_prime;\n   a_prime = temp;\n   \n   temp = get_flags_register();\n   set_flags_register(get_flags_prime());\n   set_flags_prime(temp);\n};\n// 0x09 : ADD HL, BC\ninstructions[0x09] = function()\n{\n   do_hl_add(c | (b << 8));\n};\n// 0x0a : LD A, (BC)\ninstructions[0x0a] = function()\n{\n   a = core.mem_read(c | (b << 8));\n};\n// 0x0b : DEC BC\ninstructions[0x0b] = function()\n{\n   var result = (c | (b << 8));\n   result -= 1;\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n};\n// 0x0c : INC C\ninstructions[0x0c] = function()\n{\n   c = do_inc(c);\n};\n// 0x0d : DEC C\ninstructions[0x0d] = function()\n{\n   c = do_dec(c);\n};\n// 0x0e : LD C, n\ninstructions[0x0e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   c = core.mem_read(pc);\n};\n// 0x0f : RRCA\ninstructions[0x0f] = function()\n{\n   var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n   a = do_rrc(a);\n   flags.S = temp_s;\n   flags.Z = temp_z;\n   flags.P = temp_p;\n};\n// 0x10 : DJNZ nn\ninstructions[0x10] = function()\n{\n   b = (b - 1) & 0xff;\n   do_conditional_relative_jump(b !== 0);\n};\n// 0x11 : LD DE, nn\ninstructions[0x11] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   e = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   d = core.mem_read(pc);\n};\n// 0x12 : LD (DE), A\ninstructions[0x12] = function()\n{\n   core.mem_write(e | (d << 8), a);\n};\n// 0x13 : INC DE\ninstructions[0x13] = function()\n{\n   var result = (e | (d << 8));\n   result += 1;\n   e = result & 0xff;\n   d = (result & 0xff00) >>> 8;\n};\n// 0x14 : INC D\ninstructions[0x14] = function()\n{\n   d = do_inc(d);\n};\n// 0x15 : DEC D\ninstructions[0x15] = function()\n{\n   d = do_dec(d);\n};\n// 0x16 : LD D, n\ninstructions[0x16] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   d = core.mem_read(pc);\n};\n// 0x17 : RLA\ninstructions[0x17] = function()\n{\n   var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n   a = do_rl(a);\n   flags.S = temp_s;\n   flags.Z = temp_z;\n   flags.P = temp_p;\n};\n// 0x18 : JR n\ninstructions[0x18] = function()\n{\n   var offset = get_signed_offset_byte(core.mem_read((pc + 1) & 0xffff));\n   pc = (pc + offset + 1) & 0xffff;\n};\n// 0x19 : ADD HL, DE\ninstructions[0x19] = function()\n{\n   do_hl_add(e | (d << 8));\n};\n// 0x1a : LD A, (DE)\ninstructions[0x1a] = function()\n{\n   a = core.mem_read(e | (d << 8));\n};\n// 0x1b : DEC DE\ninstructions[0x1b] = function()\n{\n   var result = (e | (d << 8));\n   result -= 1;\n   e = result & 0xff;\n   d = (result & 0xff00) >>> 8;\n};\n// 0x1c : INC E\ninstructions[0x1c] = function()\n{\n   e = do_inc(e);\n};\n// 0x1d : DEC E\ninstructions[0x1d] = function()\n{\n   e = do_dec(e);\n};\n// 0x1e : LD E, n\ninstructions[0x1e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   e = core.mem_read(pc);\n};\n// 0x1f : RRA\ninstructions[0x1f] = function()\n{\n   var temp_s = flags.S, temp_z = flags.Z, temp_p = flags.P;\n   a = do_rr(a);\n   flags.S = temp_s;\n   flags.Z = temp_z;\n   flags.P = temp_p;\n};\n// 0x20 : JR NZ, n\ninstructions[0x20] = function()\n{\n   do_conditional_relative_jump(!flags.Z);\n};\n// 0x21 : LD HL, nn\ninstructions[0x21] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   l = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   h = core.mem_read(pc);\n};\n// 0x22 : LD (nn), HL\ninstructions[0x22] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, l);\n   core.mem_write((address + 1) & 0xffff, h);\n};\n// 0x23 : INC HL\ninstructions[0x23] = function()\n{\n   var result = (l | (h << 8));\n   result += 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n};\n// 0x24 : INC H\ninstructions[0x24] = function()\n{\n   h = do_inc(h);\n};\n// 0x25 : DEC H\ninstructions[0x25] = function()\n{\n   h = do_dec(h);\n};\n// 0x26 : LD H, n\ninstructions[0x26] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   h = core.mem_read(pc);\n};\n// 0x27 : DAA\ninstructions[0x27] = function()\n{\n   var temp = a;\n   if (!flags.N)\n   {\n      if (flags.H || ((a & 0x0f) > 9))\n         temp += 0x06;\n      if (flags.C || (a > 0x99))\n         temp += 0x60;\n   }\n   else\n   {\n      if (flags.H || ((a & 0x0f) > 9))\n         temp -= 0x06;\n      if (flags.C || (a > 0x99))\n         temp -= 0x60;\n   }\n   \n   flags.S = (temp & 0x80) ? 1 : 0;\n   flags.Z = !(temp & 0xff) ? 1 : 0;\n   flags.H = ((a & 0x10) ^ (temp & 0x10)) ? 1 : 0;\n   flags.P = get_parity(temp & 0xff);\n   // DAA never clears the carry flag if it was already set,\n   //  but it is able to set the carry flag if it was clear.\n   // Don't ask me, I don't know.\n   // Note also that we check for a BCD carry, instead of the usual.\n   flags.C = (flags.C || (a > 0x99)) ? 1 : 0;\n   \n   a = temp & 0xff;\n   \n   update_xy_flags(a);\n};\n// 0x28 : JR Z, n\ninstructions[0x28] = function()\n{\n   do_conditional_relative_jump(!!flags.Z);\n};\n// 0x29 : ADD HL, HL\ninstructions[0x29] = function()\n{\n   do_hl_add(l | (h << 8));\n};\n// 0x2a : LD HL, (nn)\ninstructions[0x2a] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   l = core.mem_read(address);\n   h = core.mem_read((address + 1) & 0xffff);\n};\n// 0x2b : DEC HL\ninstructions[0x2b] = function()\n{\n   var result = (l | (h << 8));\n   result -= 1;\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n};\n// 0x2c : INC L\ninstructions[0x2c] = function()\n{\n   l = do_inc(l);\n};\n// 0x2d : DEC L\ninstructions[0x2d] = function()\n{\n   l = do_dec(l);\n};\n// 0x2e : LD L, n\ninstructions[0x2e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   l = core.mem_read(pc);\n};\n// 0x2f : CPL\ninstructions[0x2f] = function()\n{\n   a = (~a) & 0xff;\n   flags.N = 1;\n   flags.H = 1;\n   update_xy_flags(a);\n};\n// 0x30 : JR NC, n\ninstructions[0x30] = function()\n{\n   do_conditional_relative_jump(!flags.C);\n};\n// 0x31 : LD SP, nn\ninstructions[0x31] = function()\n{\n   sp =  core.mem_read((pc + 1) & 0xffff) | \n            (core.mem_read((pc + 2) & 0xffff) << 8);\n   pc = (pc + 2) & 0xffff;\n};\n// 0x32 : LD (nn), A\ninstructions[0x32] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, a);\n};\n// 0x33 : INC SP\ninstructions[0x33] = function()\n{\n   sp = (sp + 1) & 0xffff;\n};\n// 0x34 : INC (HL)\ninstructions[0x34] = function()\n{\n   var address = l | (h << 8);\n   core.mem_write(address, do_inc(core.mem_read(address)));\n};\n// 0x35 : DEC (HL)\ninstructions[0x35] = function()\n{\n   var address = l | (h << 8);\n   core.mem_write(address, do_dec(core.mem_read(address)));\n};\n// 0x36 : LD (HL), n\ninstructions[0x36] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   core.mem_write(l | (h << 8), core.mem_read(pc));\n};\n// 0x37 : SCF\ninstructions[0x37] = function()\n{\n   flags.N = 0;\n   flags.H = 0;\n   flags.C = 1;\n   update_xy_flags(a);\n};\n// 0x38 : JR C, n\ninstructions[0x38] = function()\n{\n   do_conditional_relative_jump(!!flags.C);\n};\n// 0x39 : ADD HL, SP\ninstructions[0x39] = function()\n{\n   do_hl_add(sp);\n};\n// 0x3a : LD A, (nn)\ninstructions[0x3a] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   a = core.mem_read(address);\n};\n// 0x3b : DEC SP\ninstructions[0x3b] = function()\n{\n   sp = (sp - 1) & 0xffff;\n};\n// 0x3c : INC A\ninstructions[0x3c] = function()\n{\n   a = do_inc(a);\n};\n// 0x3d : DEC A\ninstructions[0x3d] = function()\n{\n   a = do_dec(a);\n};\n// 0x3e : LD A, n\ninstructions[0x3e] = function()\n{\n   a = core.mem_read((pc + 1) & 0xffff);\n   pc = (pc + 1) & 0xffff;\n};\n// 0x3f : CCF\ninstructions[0x3f] = function()\n{\n   flags.N = 0;\n   flags.H = flags.C;\n   flags.C = flags.C ? 0 : 1;\n   update_xy_flags(a);\n};\n// 0xc0 : RET NZ\ninstructions[0xc0] = function()\n{\n   do_conditional_return(!flags.Z);\n};\n// 0xc1 : POP BC\ninstructions[0xc1] = function()\n{\n   var result = pop_word();\n   c = result & 0xff;\n   b = (result & 0xff00) >>> 8;\n};\n// 0xc2 : JP NZ, nn\ninstructions[0xc2] = function()\n{\n   do_conditional_absolute_jump(!flags.Z);\n};\n// 0xc3 : JP nn\ninstructions[0xc3] = function()\n{\n   pc =  core.mem_read((pc + 1) & 0xffff) |\n            (core.mem_read((pc + 2) & 0xffff) << 8);\n   pc = (pc - 1) & 0xffff;\n};\n// 0xc4 : CALL NZ, nn\ninstructions[0xc4] = function()\n{\n   do_conditional_call(!flags.Z);\n};\n// 0xc5 : PUSH BC\ninstructions[0xc5] = function()\n{\n   push_word(c | (b << 8));\n};\n// 0xc6 : ADD A, n\ninstructions[0xc6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_add(core.mem_read(pc));\n};\n// 0xc7 : RST 00h\ninstructions[0xc7] = function()\n{\n   do_reset(0x00);\n};\n// 0xc8 : RET Z\ninstructions[0xc8] = function()\n{\n   do_conditional_return(!!flags.Z);\n};\n// 0xc9 : RET\ninstructions[0xc9] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n};\n// 0xca : JP Z, nn\ninstructions[0xca] = function()\n{\n   do_conditional_absolute_jump(!!flags.Z);\n};\n// 0xcb : CB Prefix\ninstructions[0xcb] = function()\n{\n   // R is incremented at the start of the second instruction cycle,\n   //  before the instruction actually runs.\n   // The high bit of R is not affected by this increment,\n   //  it can only be changed using the LD R, A instruction.\n   r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n   // We don't have a table for this prefix,\n   //  the instructions are all so uniform that we can directly decode them.\n   pc = (pc + 1) & 0xffff;\n   var opcode = core.mem_read(pc),\n       bit_number = (opcode & 0x38) >>> 3,\n       reg_code = opcode & 0x07;\n   \n   if (opcode < 0x40)\n   {\n      // Shift/rotate instructions\n      var op_array = [do_rlc, do_rrc, do_rl, do_rr,\n                      do_sla, do_sra, do_sll, do_srl];\n      \n      if (reg_code === 0)\n         b = op_array[bit_number]( b);\n      else if (reg_code === 1)\n         c = op_array[bit_number]( c);\n      else if (reg_code === 2)\n         d = op_array[bit_number]( d);\n      else if (reg_code === 3)\n         e = op_array[bit_number]( e);\n      else if (reg_code === 4)\n         h = op_array[bit_number]( h);\n      else if (reg_code === 5)\n         l = op_array[bit_number]( l);\n      else if (reg_code === 6)\n         core.mem_write(l | (h << 8),\n                            op_array[bit_number]( core.mem_read(l | (h << 8))));\n      else if (reg_code === 7)\n         a = op_array[bit_number]( a);\n   }\n   else if (opcode < 0x80)\n   {\n      // BIT instructions\n      if (reg_code === 0)\n         flags.Z = !(b & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 1)\n         flags.Z = !(c & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 2)\n         flags.Z = !(d & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 3)\n         flags.Z = !(e & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 4)\n         flags.Z = !(h & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 5)\n         flags.Z = !(l & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 6)\n         flags.Z = !((core.mem_read(l | (h << 8))) & (1 << bit_number)) ? 1 : 0;\n      else if (reg_code === 7)\n         flags.Z = !(a & (1 << bit_number)) ? 1 : 0;\n         \n      flags.N = 0;\n      flags.H = 1;\n      flags.P = flags.Z;\n      flags.S = ((bit_number === 7) && !flags.Z) ? 1 : 0;\n      // For the BIT n, (HL) instruction, the X and Y flags are obtained\n      //  from what is apparently an internal temporary register used for\n      //  some of the 16-bit arithmetic instructions.\n      // I haven't implemented that register here,\n      //  so for now we'll set X and Y the same way for every BIT opcode,\n      //  which means that they will usually be wrong for BIT n, (HL).\n      flags.Y = ((bit_number === 5) && !flags.Z) ? 1 : 0;\n      flags.X = ((bit_number === 3) && !flags.Z) ? 1 : 0;\n   }\n   else if (opcode < 0xc0)\n   {\n      // RES instructions\n      if (reg_code === 0)\n         b &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 1)\n         c &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 2)\n         d &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 3)\n         e &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 4)\n         h &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 5)\n         l &= (0xff & ~(1 << bit_number));\n      else if (reg_code === 6)\n         core.mem_write(l | (h << 8),\n                            core.mem_read(l | (h << 8)) & ~(1 << bit_number));\n      else if (reg_code === 7)\n         a &= (0xff & ~(1 << bit_number));\n   }\n   else\n   {\n      // SET instructions\n      if (reg_code === 0)\n         b |= (1 << bit_number);\n      else if (reg_code === 1)\n         c |= (1 << bit_number);\n      else if (reg_code === 2)\n         d |= (1 << bit_number);\n      else if (reg_code === 3)\n         e |= (1 << bit_number);\n      else if (reg_code === 4)\n         h |= (1 << bit_number);\n      else if (reg_code === 5)\n         l |= (1 << bit_number);\n      else if (reg_code === 6)\n         core.mem_write(l | (h << 8),\n                            core.mem_read(l | (h << 8)) | (1 << bit_number));\n      else if (reg_code === 7)\n         a |= (1 << bit_number);\n   }\n   \n   cycle_counter += cycle_counts_cb[opcode];\n};\n// 0xcc : CALL Z, nn\ninstructions[0xcc] = function()\n{\n   do_conditional_call(!!flags.Z);\n};\n// 0xcd : CALL nn\ninstructions[0xcd] = function()\n{\n   push_word((pc + 3) & 0xffff);\n   pc =  core.mem_read((pc + 1) & 0xffff) |\n            (core.mem_read((pc + 2) & 0xffff) << 8);\n   pc = (pc - 1) & 0xffff;\n};\n// 0xce : ADC A, n\ninstructions[0xce] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_adc(core.mem_read(pc));\n};\n// 0xcf : RST 08h\ninstructions[0xcf] = function()\n{\n   do_reset(0x08);\n};\n// 0xd0 : RET NC\ninstructions[0xd0] = function()\n{\n   do_conditional_return(!flags.C);\n};\n// 0xd1 : POP DE\ninstructions[0xd1] = function()\n{\n   var result = pop_word();\n   e = result & 0xff;\n   d = (result & 0xff00) >>> 8;\n};\n// 0xd2 : JP NC, nn\ninstructions[0xd2] = function()\n{\n   do_conditional_absolute_jump(!flags.C);\n};\n// 0xd3 : OUT (n), A\ninstructions[0xd3] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   core.io_write((a << 8) | core.mem_read(pc), a);\n};\n// 0xd4 : CALL NC, nn\ninstructions[0xd4] = function()\n{\n   do_conditional_call(!flags.C);\n};\n// 0xd5 : PUSH DE\ninstructions[0xd5] = function()\n{\n   push_word(e | (d << 8));\n};\n// 0xd6 : SUB n\ninstructions[0xd6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_sub(core.mem_read(pc));\n};\n// 0xd7 : RST 10h\ninstructions[0xd7] = function()\n{\n   do_reset(0x10);\n};\n// 0xd8 : RET C\ninstructions[0xd8] = function()\n{\n   do_conditional_return(!!flags.C);\n};\n// 0xd9 : EXX\ninstructions[0xd9] = function()\n{\n   var temp = b;\n   b = b_prime;\n   b_prime = temp;\n   temp = c;\n   c = c_prime;\n   c_prime = temp;\n   temp = d;\n   d = d_prime;\n   d_prime = temp;\n   temp = e;\n   e = e_prime;\n   e_prime = temp;\n   temp = h;\n   h = h_prime;\n   h_prime = temp;\n   temp = l;\n   l = l_prime;\n   l_prime = temp;\n};\n// 0xda : JP C, nn\ninstructions[0xda] = function()\n{\n   do_conditional_absolute_jump(!!flags.C);\n};\n// 0xdb : IN A, (n)\ninstructions[0xdb] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   a = core.io_read((a << 8) | core.mem_read(pc));\n};\n// 0xdc : CALL C, nn\ninstructions[0xdc] = function()\n{\n   do_conditional_call(!!flags.C);\n};\n// 0xdd : DD Prefix (IX instructions)\ninstructions[0xdd] = function()\n{\n   // R is incremented at the start of the second instruction cycle,\n   //  before the instruction actually runs.\n   // The high bit of R is not affected by this increment,\n   //  it can only be changed using the LD R, A instruction.\n   r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n   pc = (pc + 1) & 0xffff;\n   var opcode = core.mem_read(pc),\n       func = dd_instructions[opcode];\n       \n   if (func)\n   {\n      //func = func.bind(this);\n      func();\n      cycle_counter += cycle_counts_dd[opcode];\n   }\n   else\n   {\n      // Apparently if a DD opcode doesn't exist,\n      //  it gets treated as an unprefixed opcode.\n      // What we'll do to handle that is just back up the \n      //  program counter, so that this byte gets decoded\n      //  as a normal instruction.\n      pc = (pc - 1) & 0xffff;\n      // And we'll add in the cycle count for a NOP.\n      cycle_counter += cycle_counts[0];\n   }\n};\n// 0xde : SBC n\ninstructions[0xde] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_sbc(core.mem_read(pc));\n};\n// 0xdf : RST 18h\ninstructions[0xdf] = function()\n{\n   do_reset(0x18);\n};\n// 0xe0 : RET PO\ninstructions[0xe0] = function()\n{\n   do_conditional_return(!flags.P);\n};\n// 0xe1 : POP HL\ninstructions[0xe1] = function()\n{\n   var result = pop_word();\n   l = result & 0xff;\n   h = (result & 0xff00) >>> 8;\n};\n// 0xe2 : JP PO, (nn)\ninstructions[0xe2] = function()\n{\n   do_conditional_absolute_jump(!flags.P);\n};\n// 0xe3 : EX (SP), HL\ninstructions[0xe3] = function()\n{\n   var temp = core.mem_read(sp);\n   core.mem_write(sp, l);\n   l = temp;\n   temp = core.mem_read((sp + 1) & 0xffff);\n   core.mem_write((sp + 1) & 0xffff, h);\n   h = temp;\n};\n// 0xe4 : CALL PO, nn\ninstructions[0xe4] = function()\n{\n   do_conditional_call(!flags.P);\n};\n// 0xe5 : PUSH HL\ninstructions[0xe5] = function()\n{\n   push_word(l | (h << 8));\n};\n// 0xe6 : AND n\ninstructions[0xe6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_and(core.mem_read(pc));\n};\n// 0xe7 : RST 20h\ninstructions[0xe7] = function()\n{\n   do_reset(0x20);\n};\n// 0xe8 : RET PE\ninstructions[0xe8] = function()\n{\n   do_conditional_return(!!flags.P);\n};\n// 0xe9 : JP (HL)\ninstructions[0xe9] = function()\n{\n   pc = l | (h << 8);\n   pc = (pc - 1) & 0xffff;\n};\n// 0xea : JP PE, nn\ninstructions[0xea] = function()\n{\n   do_conditional_absolute_jump(!!flags.P);\n};\n// 0xeb : EX DE, HL\ninstructions[0xeb] = function()\n{\n   var temp = d;\n   d = h;\n   h = temp;\n   temp = e;\n   e = l;\n   l = temp;\n};\n// 0xec : CALL PE, nn\ninstructions[0xec] = function()\n{\n   do_conditional_call(!!flags.P);\n};\n// 0xed : ED Prefix\ninstructions[0xed] = function()\n{\n   // R is incremented at the start of the second instruction cycle,\n   //  before the instruction actually runs.\n   // The high bit of R is not affected by this increment,\n   //  it can only be changed using the LD R, A instruction.\n   r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n\n   pc = (pc + 1) & 0xffff;\n   var opcode = core.mem_read(pc),\n       func = ed_instructions[opcode];\n       \n   if (func)\n   {\n      //func = func.bind(this);\n      func();\n      cycle_counter += cycle_counts_ed[opcode];\n   }\n   else\n   {\n      // If the opcode didn't exist, the whole thing is a two-byte NOP.\n      cycle_counter += cycle_counts[0];\n   }\n};\n// 0xee : XOR n\ninstructions[0xee] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_xor(core.mem_read(pc));\n};\n// 0xef : RST 28h\ninstructions[0xef] = function()\n{\n   do_reset(0x28);\n};\n// 0xf0 : RET P\ninstructions[0xf0] = function()\n{\n   do_conditional_return(!flags.S);\n};\n// 0xf1 : POP AF\ninstructions[0xf1] = function()\n{\n   var result = pop_word();\n   set_flags_register(result & 0xff);\n   a = (result & 0xff00) >>> 8;\n};\n// 0xf2 : JP P, nn\ninstructions[0xf2] = function()\n{\n   do_conditional_absolute_jump(!flags.S);\n};\n// 0xf3 : DI\ninstructions[0xf3] = function()\n{\n   // DI doesn't actually take effect until after the next instruction.\n   do_delayed_di = true;\n};\n// 0xf4 : CALL P, nn\ninstructions[0xf4] = function()\n{\n   do_conditional_call(!flags.S);\n};\n// 0xf5 : PUSH AF\ninstructions[0xf5] = function()\n{\n   push_word(get_flags_register() | (a << 8));\n};\n// 0xf6 : OR n\ninstructions[0xf6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_or(core.mem_read(pc));\n};\n// 0xf7 : RST 30h\ninstructions[0xf7] = function()\n{\n   do_reset(0x30);\n};\n// 0xf8 : RET M\ninstructions[0xf8] = function()\n{\n   do_conditional_return(!!flags.S);\n};\n// 0xf9 : LD SP, HL\ninstructions[0xf9] = function()\n{\n   sp = l | (h << 8);\n};\n// 0xfa : JP M, nn\ninstructions[0xfa] = function()\n{\n   do_conditional_absolute_jump(!!flags.S);\n};\n// 0xfb : EI\ninstructions[0xfb] = function()\n{\n   // EI doesn't actually take effect until after the next instruction.\n   do_delayed_ei = true;\n};\n// 0xfc : CALL M, nn\ninstructions[0xfc] = function()\n{\n   do_conditional_call(!!flags.S);\n};\n// 0xfd : FD Prefix (IY instructions)\ninstructions[0xfd] = function()\n{\n   // R is incremented at the start of the second instruction cycle,\n   //  before the instruction actually runs.\n   // The high bit of R is not affected by this increment,\n   //  it can only be changed using the LD R, A instruction.\n   r = (r & 0x80) | (((r & 0x7f) + 1) & 0x7f);\n   \n   pc = (pc + 1) & 0xffff;\n   var opcode = core.mem_read(pc),\n       func = dd_instructions[opcode];\n       \n   if (func)\n   {\n      // Rather than copy and paste all the IX instructions into IY instructions,\n      //  what we'll do is sneakily copy IY into IX, run the IX instruction,\n      //  and then copy the result into IY and restore the old IX.\n      var temp = ix;\n      ix = iy;\n      //func = func.bind(this);\n      func();\n      iy = ix;\n      ix = temp;\n      \n      cycle_counter += cycle_counts_dd[opcode];\n   }\n   else\n   {\n      // Apparently if an FD opcode doesn't exist,\n      //  it gets treated as an unprefixed opcode.\n      // What we'll do to handle that is just back up the \n      //  program counter, so that this byte gets decoded\n      //  as a normal instruction.\n      pc = (pc - 1) & 0xffff;\n      // And we'll add in the cycle count for a NOP.\n      cycle_counter += cycle_counts[0];\n   }\n};\n// 0xfe : CP n\ninstructions[0xfe] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   do_cp(core.mem_read(pc));\n};\n// 0xff : RST 38h\ninstructions[0xff] = function()\n{\n   do_reset(0x38);\n};\n\n\n///////////////////////////////////////////////////////////////////////////////\n/// This table of ED opcodes is pretty sparse;\n///  there are not very many valid ED-prefixed opcodes in the Z80,\n///  and many of the ones that are valid are not documented.\n///////////////////////////////////////////////////////////////////////////////\nlet ed_instructions = [];\n// 0x40 : IN B, (C)\ned_instructions[0x40] = function()\n{\n   b = do_in((b << 8) | c);\n};\n// 0x41 : OUT (C), B\ned_instructions[0x41] = function()\n{\n   core.io_write((b << 8) | c, b);\n};\n// 0x42 : SBC HL, BC\ned_instructions[0x42] = function()\n{\n   do_hl_sbc(c | (b << 8));\n};\n// 0x43 : LD (nn), BC\ned_instructions[0x43] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, c);\n   core.mem_write((address + 1) & 0xffff, b);\n};\n// 0x44 : NEG\ned_instructions[0x44] = function()\n{\n   do_neg();\n};\n// 0x45 : RETN\ned_instructions[0x45] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x46 : IM 0\ned_instructions[0x46] = function()\n{\n   imode = 0;\n};\n// 0x47 : LD I, A\ned_instructions[0x47] = function()\n{\n   i = a\n};\n// 0x48 : IN C, (C)\ned_instructions[0x48] = function()\n{\n   c = do_in((b << 8) | c);\n};\n// 0x49 : OUT (C), C\ned_instructions[0x49] = function()\n{\n   core.io_write((b << 8) | c, c);\n};\n// 0x4a : ADC HL, BC\ned_instructions[0x4a] = function()\n{\n   do_hl_adc(c | (b << 8));\n};\n// 0x4b : LD BC, (nn)\ned_instructions[0x4b] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   c = core.mem_read(address);\n   b = core.mem_read((address + 1) & 0xffff);\n};\n// 0x4c : NEG (Undocumented)\ned_instructions[0x4c] = function()\n{\n   do_neg();\n};\n// 0x4d : RETI\ned_instructions[0x4d] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n};\n// 0x4e : IM 0 (Undocumented)\ned_instructions[0x4e] = function()\n{\n   imode = 0;\n};\n// 0x4f : LD R, A\ned_instructions[0x4f] = function()\n{\n   r = a;\n};\n// 0x50 : IN D, (C)\ned_instructions[0x50] = function()\n{\n   d = do_in((b << 8) | c);\n};\n// 0x51 : OUT (C), D\ned_instructions[0x51] = function()\n{\n   core.io_write((b << 8) | c, d);\n};\n// 0x52 : SBC HL, DE\ned_instructions[0x52] = function()\n{\n   do_hl_sbc(e | (d << 8));\n};\n// 0x53 : LD (nn), DE\ned_instructions[0x53] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, e);\n   core.mem_write((address + 1) & 0xffff, d);\n};\n// 0x54 : NEG (Undocumented)\ned_instructions[0x54] = function()\n{\n   do_neg();\n};\n// 0x55 : RETN\ned_instructions[0x55] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x56 : IM 1\ned_instructions[0x56] = function()\n{\n   imode = 1;\n};\n// 0x57 : LD A, I\ned_instructions[0x57] = function()\n{\n   a = i;\n   flags.S = a & 0x80 ? 1 : 0;\n   flags.Z = a ? 0 : 1;\n   flags.H = 0;\n   flags.P = iff2;\n   flags.N = 0;\n   update_xy_flags(a);\n};\n// 0x58 : IN E, (C)\ned_instructions[0x58] = function()\n{\n   e = do_in((b << 8) | c);\n};\n// 0x59 : OUT (C), E\ned_instructions[0x59] = function()\n{\n   core.io_write((b << 8) | c, e);\n};\n// 0x5a : ADC HL, DE\ned_instructions[0x5a] = function()\n{\n   do_hl_adc(e | (d << 8));\n};\n// 0x5b : LD DE, (nn)\ned_instructions[0x5b] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   e = core.mem_read(address);\n   d = core.mem_read((address + 1) & 0xffff);\n};\n// 0x5c : NEG (Undocumented)\ned_instructions[0x5c] = function()\n{\n   do_neg();\n};\n// 0x5d : RETN\ned_instructions[0x5d] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x5e : IM 2\ned_instructions[0x5e] = function()\n{\n   imode = 2;\n};\n// 0x5f : LD A, R\ned_instructions[0x5f] = function()\n{\n   a = r;\n   flags.S = a & 0x80 ? 1 : 0;\n   flags.Z = a ? 0 : 1;\n   flags.H = 0;\n   flags.P = iff2;\n   flags.N = 0;\n   update_xy_flags(a);\n};\n// 0x60 : IN H, (C)\ned_instructions[0x60] = function()\n{\n   h = do_in((b << 8) | c);\n};\n// 0x61 : OUT (C), H\ned_instructions[0x61] = function()\n{\n   core.io_write((b << 8) | c, h);\n};\n// 0x62 : SBC HL, HL\ned_instructions[0x62] = function()\n{\n   do_hl_sbc(l | (h << 8));\n};\n// 0x63 : LD (nn), HL (Undocumented)\ned_instructions[0x63] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, l);\n   core.mem_write((address + 1) & 0xffff, h);\n};\n// 0x64 : NEG (Undocumented)\ned_instructions[0x64] = function()\n{\n   do_neg();\n};\n// 0x65 : RETN\ned_instructions[0x65] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x66 : IM 0\ned_instructions[0x66] = function()\n{\n   imode = 0;\n};\n// 0x67 : RRD\ned_instructions[0x67] = function()\n{\n   var hl_value = core.mem_read(l | (h << 8));\n   var temp1 = hl_value & 0x0f, temp2 = a & 0x0f;\n   hl_value = ((hl_value & 0xf0) >>> 4) | (temp2 << 4);\n   a = (a & 0xf0) | temp1;\n   core.mem_write(l | (h << 8), hl_value);\n   \n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = a ? 0 : 1;\n   flags.H = 0;\n   flags.P = get_parity(a) ? 1 : 0;\n   flags.N = 0;\n   update_xy_flags(a);\n};\n// 0x68 : IN L, (C)\ned_instructions[0x68] = function()\n{\n   l = do_in((b << 8) | c);\n};\n// 0x69 : OUT (C), L\ned_instructions[0x69] = function()\n{\n   core.io_write((b << 8) | c, l);\n};\n// 0x6a : ADC HL, HL\ned_instructions[0x6a] = function()\n{\n   do_hl_adc(l | (h << 8));\n};\n// 0x6b : LD HL, (nn) (Undocumented)\ned_instructions[0x6b] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   l = core.mem_read(address);\n   h = core.mem_read((address + 1) & 0xffff);\n};\n// 0x6c : NEG (Undocumented)\ned_instructions[0x6c] = function()\n{\n   do_neg();\n};\n// 0x6d : RETN\ned_instructions[0x6d] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x6e : IM 0 (Undocumented)\ned_instructions[0x6e] = function()\n{\n   imode = 0;\n};\n// 0x6f : RLD\ned_instructions[0x6f] = function()\n{\n   var hl_value = core.mem_read(l | (h << 8));\n   var temp1 = hl_value & 0xf0, temp2 = a & 0x0f;\n   hl_value = ((hl_value & 0x0f) << 4) | temp2;\n   a = (a & 0xf0) | (temp1 >>> 4);\n   core.mem_write(l | (h << 8), hl_value);\n   \n   flags.S = (a & 0x80) ? 1 : 0;\n   flags.Z = a ? 0 : 1;\n   flags.H = 0;\n   flags.P = get_parity(a) ? 1 : 0;\n   flags.N = 0;\n   update_xy_flags(a);\n};\n// 0x70 : IN (C) (Undocumented)\ned_instructions[0x70] = function()\n{\n   do_in((b << 8) | c);\n};\n// 0x71 : OUT (C), 0 (Undocumented)\ned_instructions[0x71] = function()\n{\n   core.io_write((b << 8) | c, 0);\n};\n// 0x72 : SBC HL, SP\ned_instructions[0x72] = function()\n{\n   do_hl_sbc(sp);\n};\n// 0x73 : LD (nn), SP\ned_instructions[0x73] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   core.mem_write(address, sp & 0xff);\n   core.mem_write((address + 1) & 0xffff, (sp >>> 8) & 0xff);\n};\n// 0x74 : NEG (Undocumented)\ned_instructions[0x74] = function()\n{\n   do_neg();\n};\n// 0x75 : RETN\ned_instructions[0x75] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x76 : IM 1\ned_instructions[0x76] = function()\n{\n   imode = 1;\n};\n// 0x78 : IN A, (C)\ned_instructions[0x78] = function()\n{\n   a = do_in((b << 8) | c);\n};\n// 0x79 : OUT (C), A\ned_instructions[0x79] = function()\n{\n   core.io_write((b << 8) | c, a);\n};\n// 0x7a : ADC HL, SP\ned_instructions[0x7a] = function()\n{\n   do_hl_adc(sp);\n};\n// 0x7b : LD SP, (nn)\ned_instructions[0x7b] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= core.mem_read(pc) << 8;\n   \n   sp = core.mem_read(address);\n   sp |= core.mem_read((address + 1) & 0xffff) << 8;\n};\n// 0x7c : NEG (Undocumented)\ned_instructions[0x7c] = function()\n{\n   do_neg();\n};\n// 0x7d : RETN\ned_instructions[0x7d] = function()\n{\n   pc = (pop_word() - 1) & 0xffff;\n   iff1 = iff2;\n};\n// 0x7e : IM 2\ned_instructions[0x7e] = function()\n{\n   imode = 2;\n};\n// 0xa0 : LDI\ned_instructions[0xa0] = function()\n{\n   do_ldi();\n};\n// 0xa1 : CPI\ned_instructions[0xa1] = function()\n{\n   do_cpi();\n};\n// 0xa2 : INI\ned_instructions[0xa2] = function()\n{\n   do_ini();\n};\n// 0xa3 : OUTI\ned_instructions[0xa3] = function()\n{\n   do_outi();\n};\n// 0xa8 : LDD\ned_instructions[0xa8] = function()\n{\n   do_ldd();\n};\n// 0xa9 : CPD\ned_instructions[0xa9] = function()\n{\n   do_cpd();\n};\n// 0xaa : IND\ned_instructions[0xaa] = function()\n{\n   do_ind();\n};\n// 0xab : OUTD\ned_instructions[0xab] = function()\n{\n   do_outd();\n};\n// 0xb0 : LDIR\ned_instructions[0xb0] = function()\n{\n   do_ldi();\n   if (b || c)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xb1 : CPIR\ned_instructions[0xb1] = function()\n{\n   do_cpi();\n   if (!flags.Z && (b || c))\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xb2 : INIR\ned_instructions[0xb2] = function()\n{\n   do_ini();\n   if (b)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xb3 : OTIR\ned_instructions[0xb3] = function()\n{\n   do_outi();\n   if (b)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xb8 : LDDR\ned_instructions[0xb8] = function()\n{\n   do_ldd();\n   if (b || c)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xb9 : CPDR\ned_instructions[0xb9] = function()\n{\n   do_cpd();\n   if (!flags.Z && (b || c))\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xba : INDR\ned_instructions[0xba] = function()\n{\n   do_ind();\n   if (b)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n// 0xbb : OTDR\ned_instructions[0xbb] = function()\n{\n   do_outd();\n   if (b)\n   {\n      cycle_counter += 5;\n      pc = (pc - 2) & 0xffff;\n   }\n};\n\n\n///////////////////////////////////////////////////////////////////////////////\n/// Like ED, this table is quite sparse,\n///  and many of the opcodes here are also undocumented.\n/// The undocumented instructions here are those that deal with only one byte\n///  of the two-byte IX register; the bytes are designed IXH and IXL here.\n///////////////////////////////////////////////////////////////////////////////\nlet dd_instructions = [];\n// 0x09 : ADD IX, BC\ndd_instructions[0x09] = function()\n{\n   do_ix_add(c | (b << 8));\n};\n// 0x19 : ADD IX, DE\ndd_instructions[0x19] = function()\n{\n   do_ix_add(e | (d << 8));\n};\n// 0x21 : LD IX, nn\ndd_instructions[0x21] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   ix = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   ix |= (core.mem_read(pc) << 8);\n};\n// 0x22 : LD (nn), IX\ndd_instructions[0x22] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= (core.mem_read(pc) << 8);\n   \n   core.mem_write(address, ix & 0xff);\n   core.mem_write((address + 1) & 0xffff, (ix >>> 8) & 0xff);\n};\n// 0x23 : INC IX\ndd_instructions[0x23] = function()\n{\n   ix = (ix + 1) & 0xffff;\n};\n// 0x24 : INC IXH (Undocumented)\ndd_instructions[0x24] = function()\n{\n   ix = (do_inc(ix >>> 8) << 8) | (ix & 0xff);\n};\n// 0x25 : DEC IXH (Undocumented)\ndd_instructions[0x25] = function()\n{\n   ix = (do_dec(ix >>> 8) << 8) | (ix & 0xff);\n};\n// 0x26 : LD IXH, n (Undocumented)\ndd_instructions[0x26] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   ix = (core.mem_read(pc) << 8) | (ix & 0xff);\n};\n// 0x29 : ADD IX, IX\ndd_instructions[0x29] = function()\n{\n   do_ix_add(ix);\n};\n// 0x2a : LD IX, (nn)\ndd_instructions[0x2a] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var address = core.mem_read(pc);\n   pc = (pc + 1) & 0xffff;\n   address |= (core.mem_read(pc) << 8);\n   \n   ix = core.mem_read(address);\n   ix |= (core.mem_read((address + 1) & 0xffff) << 8);\n};\n// 0x2b : DEC IX\ndd_instructions[0x2b] = function()\n{\n   ix = (ix - 1) & 0xffff;\n};\n// 0x2c : INC IXL (Undocumented)\ndd_instructions[0x2c] = function()\n{\n   ix = do_inc(ix & 0xff) | (ix & 0xff00);\n};\n// 0x2d : DEC IXL (Undocumented)\ndd_instructions[0x2d] = function()\n{\n   ix = do_dec(ix & 0xff) | (ix & 0xff00);\n};\n// 0x2e : LD IXL, n (Undocumented)\ndd_instructions[0x2e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   ix = (core.mem_read(pc) & 0xff) | (ix & 0xff00);\n};\n// 0x34 : INC (IX+n)\ndd_instructions[0x34] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc)),\n       value = core.mem_read((offset + ix) & 0xffff);\n   core.mem_write((offset + ix) & 0xffff, do_inc(value));\n};\n// 0x35 : DEC (IX+n)\ndd_instructions[0x35] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc)),\n       value = core.mem_read((offset + ix) & 0xffff);\n   core.mem_write((offset + ix) & 0xffff, do_dec(value));\n};\n// 0x36 : LD (IX+n), n\ndd_instructions[0x36] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   pc = (pc + 1) & 0xffff;\n   core.mem_write((ix + offset) & 0xffff, core.mem_read(pc));   \n};\n// 0x39 : ADD IX, SP\ndd_instructions[0x39] = function()\n{\n   do_ix_add(sp);\n};\n// 0x44 : LD B, IXH (Undocumented)\ndd_instructions[0x44] = function()\n{\n   b = (ix >>> 8) & 0xff;\n};\n// 0x45 : LD B, IXL (Undocumented)\ndd_instructions[0x45] = function()\n{\n   b = ix & 0xff;\n};\n// 0x46 : LD B, (IX+n)\ndd_instructions[0x46] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   b = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x4c : LD C, IXH (Undocumented)\ndd_instructions[0x4c] = function()\n{\n   c = (ix >>> 8) & 0xff;\n};\n// 0x4d : LD C, IXL (Undocumented)\ndd_instructions[0x4d] = function()\n{\n   c = ix & 0xff;\n};\n// 0x4e : LD C, (IX+n)\ndd_instructions[0x4e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   c = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x54 : LD D, IXH (Undocumented)\ndd_instructions[0x54] = function()\n{\n   d = (ix >>> 8) & 0xff;\n};\n// 0x55 : LD D, IXL (Undocumented)\ndd_instructions[0x55] = function()\n{\n   d = ix & 0xff;\n};\n// 0x56 : LD D, (IX+n)\ndd_instructions[0x56] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   d = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x5c : LD E, IXH (Undocumented)\ndd_instructions[0x5c] = function()\n{\n   e = (ix >>> 8) & 0xff;\n};\n// 0x5d : LD E, IXL (Undocumented)\ndd_instructions[0x5d] = function()\n{\n   e = ix & 0xff;\n};\n// 0x5e : LD E, (IX+n)\ndd_instructions[0x5e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   e = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x60 : LD IXH, B (Undocumented)\ndd_instructions[0x60] = function()\n{\n   ix = (ix & 0xff) | (b << 8);\n};\n// 0x61 : LD IXH, C (Undocumented)\ndd_instructions[0x61] = function()\n{\n   ix = (ix & 0xff) | (c << 8);\n};\n// 0x62 : LD IXH, D (Undocumented)\ndd_instructions[0x62] = function()\n{\n   ix = (ix & 0xff) | (d << 8);\n};\n// 0x63 : LD IXH, E (Undocumented)\ndd_instructions[0x63] = function()\n{\n   ix = (ix & 0xff) | (e << 8);\n};\n// 0x64 : LD IXH, IXH (Undocumented)\ndd_instructions[0x64] = function()\n{\n   // No-op.\n};\n// 0x65 : LD IXH, IXL (Undocumented)\ndd_instructions[0x65] = function()\n{\n   ix = (ix & 0xff) | ((ix & 0xff) << 8);\n};\n// 0x66 : LD H, (IX+n)\ndd_instructions[0x66] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   h = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x67 : LD IXH, A (Undocumented)\ndd_instructions[0x67] = function()\n{\n   ix = (ix & 0xff) | (a << 8);\n};\n// 0x68 : LD IXL, B (Undocumented)\ndd_instructions[0x68] = function()\n{\n   ix = (ix & 0xff00) | b;\n};\n// 0x69 : LD IXL, C (Undocumented)\ndd_instructions[0x69] = function()\n{\n   ix = (ix & 0xff00) | c;\n};\n// 0x6a : LD IXL, D (Undocumented)\ndd_instructions[0x6a] = function()\n{\n   ix = (ix & 0xff00) | d;\n};\n// 0x6b : LD IXL, E (Undocumented)\ndd_instructions[0x6b] = function()\n{\n   ix = (ix & 0xff00) | e;\n};\n// 0x6c : LD IXL, IXH (Undocumented)\ndd_instructions[0x6c] = function()\n{\n   ix = (ix & 0xff00) | (ix >>> 8);\n};\n// 0x6d : LD IXL, IXL (Undocumented)\ndd_instructions[0x6d] = function()\n{\n   // No-op.\n};\n// 0x6e : LD L, (IX+n)\ndd_instructions[0x6e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   l = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x6f : LD IXL, A (Undocumented)\ndd_instructions[0x6f] = function()\n{\n   ix = (ix & 0xff00) | a;\n};\n// 0x70 : LD (IX+n), B\ndd_instructions[0x70] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, b);\n};\n// 0x71 : LD (IX+n), C\ndd_instructions[0x71] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, c);\n};\n// 0x72 : LD (IX+n), D\ndd_instructions[0x72] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, d);\n};\n// 0x73 : LD (IX+n), E\ndd_instructions[0x73] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, e);\n};\n// 0x74 : LD (IX+n), H\ndd_instructions[0x74] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, h);\n};\n// 0x75 : LD (IX+n), L\ndd_instructions[0x75] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, l);\n};\n// 0x77 : LD (IX+n), A\ndd_instructions[0x77] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   core.mem_write((ix + offset) & 0xffff, a);\n};\n// 0x7c : LD A, IXH (Undocumented)\ndd_instructions[0x7c] = function()\n{\n   a = (ix >>> 8) & 0xff;\n};\n// 0x7d : LD A, IXL (Undocumented)\ndd_instructions[0x7d] = function()\n{\n   a = ix & 0xff;\n};\n// 0x7e : LD A, (IX+n)\ndd_instructions[0x7e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   a = core.mem_read((ix + offset) & 0xffff);\n};\n// 0x84 : ADD A, IXH (Undocumented)\ndd_instructions[0x84] = function()\n{\n   do_add((ix >>> 8) & 0xff);\n};\n// 0x85 : ADD A, IXL (Undocumented)\ndd_instructions[0x85] = function()\n{\n   do_add(ix & 0xff);\n};\n// 0x86 : ADD A, (IX+n)\ndd_instructions[0x86] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_add(core.mem_read((ix + offset) & 0xffff));\n};\n// 0x8c : ADC A, IXH (Undocumented)\ndd_instructions[0x8c] = function()\n{\n   do_adc((ix >>> 8) & 0xff);\n};\n// 0x8d : ADC A, IXL (Undocumented)\ndd_instructions[0x8d] = function()\n{\n   do_adc(ix & 0xff);\n};\n// 0x8e : ADC A, (IX+n)\ndd_instructions[0x8e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_adc(core.mem_read((ix + offset) & 0xffff));\n};\n// 0x94 : SUB IXH (Undocumented)\ndd_instructions[0x94] = function()\n{\n   do_sub((ix >>> 8) & 0xff);\n};\n// 0x95 : SUB IXL (Undocumented)\ndd_instructions[0x95] = function()\n{\n   do_sub(ix & 0xff);\n};\n// 0x96 : SUB A, (IX+n)\ndd_instructions[0x96] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_sub(core.mem_read((ix + offset) & 0xffff));\n};\n// 0x9c : SBC IXH (Undocumented)\ndd_instructions[0x9c] = function()\n{\n   do_sbc((ix >>> 8) & 0xff);\n};\n// 0x9d : SBC IXL (Undocumented)\ndd_instructions[0x9d] = function()\n{\n   do_sbc(ix & 0xff);\n};\n// 0x9e : SBC A, (IX+n)\ndd_instructions[0x9e] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_sbc(core.mem_read((ix + offset) & 0xffff));\n};\n// 0xa4 : AND IXH (Undocumented)\ndd_instructions[0xa4] = function()\n{\n   do_and((ix >>> 8) & 0xff);\n};\n// 0xa5 : AND IXL (Undocumented)\ndd_instructions[0xa5] = function()\n{\n   do_and(ix & 0xff);\n};\n// 0xa6 : AND A, (IX+n)\ndd_instructions[0xa6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_and(core.mem_read((ix + offset) & 0xffff));\n};\n// 0xac : XOR IXH (Undocumented)\ndd_instructions[0xac] = function()\n{\n   do_xor((ix >>> 8) & 0xff);\n};\n// 0xad : XOR IXL (Undocumented)\ndd_instructions[0xad] = function()\n{\n   do_xor(ix & 0xff);\n};\n// 0xae : XOR A, (IX+n)\ndd_instructions[0xae] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_xor(core.mem_read((ix + offset) & 0xffff));\n};\n// 0xb4 : OR IXH (Undocumented)\ndd_instructions[0xb4] = function()\n{\n   do_or((ix >>> 8) & 0xff);\n};\n// 0xb5 : OR IXL (Undocumented)\ndd_instructions[0xb5] = function()\n{\n   do_or(ix & 0xff);\n};\n// 0xb6 : OR A, (IX+n)\ndd_instructions[0xb6] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_or(core.mem_read((ix + offset) & 0xffff));\n};\n// 0xbc : CP IXH (Undocumented)\ndd_instructions[0xbc] = function()\n{\n   do_cp((ix >>> 8) & 0xff);\n};\n// 0xbd : CP IXL (Undocumented)\ndd_instructions[0xbd] = function()\n{\n   do_cp(ix & 0xff);\n};\n// 0xbe : CP A, (IX+n)\ndd_instructions[0xbe] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   do_cp(core.mem_read((ix + offset) & 0xffff));\n};\n// 0xcb : CB Prefix (IX bit instructions)\ndd_instructions[0xcb] = function()\n{\n   pc = (pc + 1) & 0xffff;\n   var offset = get_signed_offset_byte(core.mem_read(pc));\n   pc = (pc + 1) & 0xffff;\n   var opcode = core.mem_read(pc), value;\n   \n   // As with the \"normal\" CB prefix, we implement the DDCB prefix\n   //  by decoding the opcode directly, rather than using a table.\n   if (opcode < 0x40)\n   {\n      // Shift and rotate instructions.\n      var ddcb_functions = [do_rlc, do_rrc, do_rl, do_rr,\n                            do_sla, do_sra, do_sll, do_srl];\n      \n      // Most of the opcodes in this range are not valid,\n      //  so we map this opcode onto one of the ones that is.\n      var func = ddcb_functions[(opcode & 0x38) >>> 3],\n      value = func( core.mem_read((ix + offset) & 0xffff));\n      \n      core.mem_write((ix + offset) & 0xffff, value);\n   }\n   else\n   {\n      var bit_number = (opcode & 0x38) >>> 3;\n      \n      if (opcode < 0x80)\n      {\n         // BIT\n         flags.N = 0;\n         flags.H = 1;\n         flags.Z = !(core.mem_read((ix + offset) & 0xffff) & (1 << bit_number)) ? 1 : 0;\n         flags.P = flags.Z;\n         flags.S = ((bit_number === 7) && !flags.Z) ? 1 : 0;\n      }\n      else if (opcode < 0xc0)\n      {\n         // RES\n         value = core.mem_read((ix + offset) & 0xffff) & ~(1 << bit_number) & 0xff;\n         core.mem_write((ix + offset) & 0xffff, value);\n      }\n      else\n      {\n         // SET\n         value = core.mem_read((ix + offset) & 0xffff) | (1 << bit_number);\n         core.mem_write((ix + offset) & 0xffff, value);\n      }\n   }\n   \n   // This implements the undocumented shift, RES, and SET opcodes,\n   //  which write their result to memory and also to an 8080 register.\n   if (value !== undefined)\n   {\n      if ((opcode & 0x07) === 0)\n         b = value;\n      else if ((opcode & 0x07) === 1)\n         c = value;\n      else if ((opcode & 0x07) === 2)\n         d = value;\n      else if ((opcode & 0x07) === 3)\n         e = value;\n      else if ((opcode & 0x07) === 4)\n         h = value;\n      else if ((opcode & 0x07) === 5)\n         l = value;\n      // 6 is the documented opcode, which doesn't set a register.\n      else if ((opcode & 0x07) === 7)\n         a = value;\n   }\n   \n   cycle_counter += cycle_counts_cb[opcode] + 8;\n};\n// 0xe1 : POP IX\ndd_instructions[0xe1] = function()\n{\n   ix = pop_word();\n};\n// 0xe3 : EX (SP), IX\ndd_instructions[0xe3] = function()\n{\n   var temp = ix;\n   ix = core.mem_read(sp);\n   ix |= core.mem_read((sp + 1) & 0xffff) << 8;\n   core.mem_write(sp, temp & 0xff);\n   core.mem_write((sp + 1) & 0xffff, (temp >>> 8) & 0xff);\n};\n// 0xe5 : PUSH IX\ndd_instructions[0xe5] = function()\n{\n   push_word(ix);\n};\n// 0xe9 : JP (IX)\ndd_instructions[0xe9] = function()\n{\n   pc = (ix - 1) & 0xffff;\n};\n// 0xf9 : LD SP, IX\ndd_instructions[0xf9] = function()\n{\n   sp = ix;\n};\n\n\n///////////////////////////////////////////////////////////////////////////////\n/// These tables contain the number of T cycles used for each instruction.\n/// In a few special cases, such as conditional control flow instructions,\n///  additional cycles might be added to these values.\n/// The total number of cycles is the return value of run_instruction().\n///////////////////////////////////////////////////////////////////////////////\nlet cycle_counts = [\n    4, 10,  7,  6,  4,  4,  7,  4,  4, 11,  7,  6,  4,  4,  7,  4,\n    8, 10,  7,  6,  4,  4,  7,  4, 12, 11,  7,  6,  4,  4,  7,  4,\n    7, 10, 16,  6,  4,  4,  7,  4,  7, 11, 16,  6,  4,  4,  7,  4,\n    7, 10, 13,  6, 11, 11, 10,  4,  7, 11, 13,  6,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    7,  7,  7,  7,  7,  7,  4,  7,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    4,  4,  4,  4,  4,  4,  7,  4,  4,  4,  4,  4,  4,  4,  7,  4,\n    5, 10, 10, 10, 10, 11,  7, 11,  5, 10, 10,  0, 10, 17,  7, 11,\n    5, 10, 10, 11, 10, 11,  7, 11,  5,  4, 10, 11, 10,  0,  7, 11,\n    5, 10, 10, 19, 10, 11,  7, 11,  5,  4, 10,  4, 10,  0,  7, 11,\n    5, 10, 10,  4, 10, 11,  7, 11,  5,  6, 10,  4, 10,  0,  7, 11\n];\n\nlet cycle_counts_ed = [\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   12, 12, 15, 20,  8, 14,  8,  9, 12, 12, 15, 20,  8, 14,  8,  9,\n   12, 12, 15, 20,  8, 14,  8,  9, 12, 12, 15, 20,  8, 14,  8,  9,\n   12, 12, 15, 20,  8, 14,  8, 18, 12, 12, 15, 20,  8, 14,  8, 18,\n   12, 12, 15, 20,  8, 14,  8,  0, 12, 12, 15, 20,  8, 14,  8,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n   16, 16, 16, 16,  0,  0,  0,  0, 16, 16, 16, 16,  0,  0,  0,  0,\n   16, 16, 16, 16,  0,  0,  0,  0, 16, 16, 16, 16,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0\n];\n\nlet cycle_counts_cb = [\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 12,  8,  8,  8,  8,  8,  8,  8, 12,  8,\n    8,  8,  8,  8,  8,  8, 12,  8,  8,  8,  8,  8,  8,  8, 12,  8,\n    8,  8,  8,  8,  8,  8, 12,  8,  8,  8,  8,  8,  8,  8, 12,  8,\n    8,  8,  8,  8,  8,  8, 12,  8,  8,  8,  8,  8,  8,  8, 12,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8,\n    8,  8,  8,  8,  8,  8, 15,  8,  8,  8,  8,  8,  8,  8, 15,  8\n];\n\nlet cycle_counts_dd = [\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 15,  0,  0,  0,  0,  0,  0,\n    0, 14, 20, 10,  8,  8, 11,  0,  0, 15, 20, 10,  8,  8, 11,  0,\n    0,  0,  0,  0, 23, 23, 19,  0,  0, 15,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    8,  8,  8,  8,  8,  8, 19,  8,  8,  8,  8,  8,  8,  8, 19,  8,\n   19, 19, 19, 19, 19, 19,  0, 19,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  8,  8, 19,  0,  0,  0,  0,  0,  8,  8, 19,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,\n    0, 14,  0, 23,  0, 15,  0,  0,  0,  8,  0,  0,  0,  0,  0,  0,\n    0,  0,  0,  0,  0,  0,  0,  0,  0, 10,  0,  0,  0,  0,  0,  0\n];\n\n   // There's tons of stuff in this object,\n   //  but only these three functions are the public API.\n   this.saveState = getState;\n   this.loadState = setState;\n   this.reset = reset;\n   this.advanceInsn = run_instruction;\n   this.interrupt = interrupt;\n   this.getPC = ():number => { return pc; }\n   this.getSP = ():number => { return sp; }\n   this.getHalted = ():boolean => { return halted; }\n}\n\nexport interface Z80State {\nAF : number;\nBC : number;\nDE : number;\nHL : number;\nAF_ : number;\nBC_ : number;\nDE_ : number;\nHL_ : number;\nIX : number;\nIY : number;\nSP : number;\nPC : number;\nIR : number;\niff1 : number;\niff2 : number;\nim : number;\nhalted : boolean;\ndo_delayed_di : boolean;\ndo_delayed_ei : boolean;\ncycle_counter : number;\n}\n\nexport class Z80 implements CPU, InstructionBased, IOBusConnected, SavesState<Z80State>, Interruptable<number> {\n\n  cpu;\n  interruptType;\n  memBus : Bus;\n  ioBus : Bus;\n  retryInterrupts : boolean = false;\n  retryData : number = -1;\n  \n  private buildCPU() {\n    if (this.memBus && this.ioBus) {\n      this.cpu = new FastZ80({\n        mem_read: this.memBus.read.bind(this.memBus),\n        mem_write: this.memBus.write.bind(this.memBus),\n        io_read: this.ioBus.read.bind(this.ioBus),\n        io_write: this.ioBus.write.bind(this.ioBus),\n      });\n    }\n  }\n  connectMemoryBus(bus:Bus) {\n    this.memBus = bus;\n    this.buildCPU();\n  }\n  connectIOBus(bus:Bus) {\n    this.ioBus = bus;\n    this.buildCPU();\n  }\n  advanceInsn() {\n    if (this.retryInterrupts && this.retryData >= 0 && this.cpu.interrupt(false, this.retryData)) {\n     this.retryData = -1;\n    }\n    return this.cpu.advanceInsn();\n  }\n  reset() {\n    this.cpu.reset();\n  }\n  interrupt(data:number) {\n    if (!this.cpu.interrupt(false, data) && this.retryInterrupts) {\n     this.retryData = data;\n    }\n  }\n  NMI() {\n    this.cpu.interrupt(true, 0);\n  }\n  getSP() {\n    return this.cpu.getSP();\n  }\n  getPC() {\n    return this.cpu.getPC();\n  }\n  isHalted() {\n   return this.cpu.getHalted();\n  }\n  saveState() {\n    return this.cpu.saveState();\n  }\n  loadState(s) {\n    this.cpu.loadState(s);\n  }\n  isStable() { return true; }\n  // TODO: metadata\n  // TODO: disassembler\n}\n", "\nimport { SampledAudioSink } from \"./devices\";\n\n// from TSS\ndeclare var MasterChannel, AudioLooper, PsgDeviceChannel;\n\nexport class MasterAudio {\n  master = new MasterChannel();\n  looper;\n  start() {\n    if (!this.looper) {\n      this.looper = new AudioLooper(512);\n      this.looper.setChannel(this.master);\n      this.looper.activate();\n    }\n  }\n  stop() {\n    if (this.looper) {\n      this.looper.setChannel(null);\n      this.looper = null;\n    }\n  }\n}\n\nexport class AY38910_Audio {\n  master : MasterAudio;\n  psg = new PsgDeviceChannel();\n  curreg = 0;\n\n  constructor(master : MasterAudio) {\n    this.master = master;\n    this.psg.setMode(PsgDeviceChannel.MODE_SIGNED);\n    this.psg.setDevice(PsgDeviceChannel.DEVICE_AY_3_8910);\n    master.master.addChannel(this.psg);\n  }\n\n  reset() {\n    for (var i=15; i>=0; i--) {\n      this.selectRegister(i);\n      this.setData(0);\n    }\n  }\n  selectRegister(val : number) {\n    this.curreg = val & 0xf;\n  }\n  setData(val : number) {\n    this.psg.writeRegisterAY(this.curreg, val & 0xff);\n  }\n  readData() {\n    return this.psg.readRegister(this.curreg);\n  }\n  currentRegister() { return this.curreg; }\n}\n\nexport class SN76489_Audio {\n  master : MasterAudio;\n  psg = new PsgDeviceChannel();\n\n  constructor(master : MasterAudio) {\n    this.master = master;\n    this.psg.setMode(PsgDeviceChannel.MODE_SIGNED);\n    this.psg.setDevice(PsgDeviceChannel.DEVICE_SN76489);\n    master.master.addChannel(this.psg);\n  }\n  reset() {\n    // TODO\n  }\n  setData(val : number) {\n    this.psg.writeRegisterSN(0, val & 0xff);\n  }\n}\n\n// https://en.wikipedia.org/wiki/POKEY\n// https://user.xmission.com/~trevin/atari/pokey_regs.html\n// http://krap.pl/mirrorz/atari/homepage.ntlworld.com/kryten_droid/Atari/800XL/atari_hw/pokey.htm\n\nexport function newPOKEYAudio(count:number) {\n  var audio = new MasterAudio();\n  for (var i=1; i<=count; i++) {\n    var pokey = new POKEYDeviceChannel();\n    audio['pokey'+i] = pokey; // TODO: cheezy\n    audio.master.addChannel(pokey);\n  }\n  return audio;\n}\n\nfunction combinePolys(a, b) {\n  var arr = new Uint8Array(a.length * b.length);\n  var n = 0;\n  for (var i=0; i<arr.length; i++) {\n    arr[i] = b[n % b.length];\n    if (a[i % a.length]) n++;\n  }\n  return arr;\n}\n\nfunction divideBy(n) {\n  var arr = new Uint8Array(n*2);\n  arr.fill(1, 0, n);\n  return arr;\n}\n\nexport var POKEYDeviceChannel = function() {\n\n  /* definitions for AUDCx (D201, D203, D205, D207) */\n  var NOTPOLY5    = 0x80     /* selects POLY5 or direct CLOCK */\n  var POLY4       = 0x40     /* selects POLY4 or POLY17 */\n  var PURE        = 0x20     /* selects POLY4/17 or PURE tone */\n  var VOL_ONLY    = 0x10     /* selects VOLUME OUTPUT ONLY */\n  var VOLUME_MASK = 0x0f     /* volume mask */\n\n  /* definitions for AUDCTL (D208) */\n  var POLY9       = 0x80     /* selects POLY9 or POLY17 */\n  var CH1_179     = 0x40     /* selects 1.78979 MHz for Ch 1 */\n  var CH3_179     = 0x20     /* selects 1.78979 MHz for Ch 3 */\n  var CH1_CH2     = 0x10     /* clocks channel 1 w/channel 2 */\n  var CH3_CH4     = 0x08     /* clocks channel 3 w/channel 4 */\n  var CH1_FILTER  = 0x04     /* selects channel 1 high pass filter */\n  var CH2_FILTER  = 0x02     /* selects channel 2 high pass filter */\n  var CLOCK_15    = 0x01     /* selects 15.6999kHz or 63.9210kHz */\n\n  /* for accuracy, the 64kHz and 15kHz clocks are exact divisions of\n     the 1.79MHz clock */\n  var DIV_64      = 28       /* divisor for 1.79MHz clock to 64 kHz */\n  var DIV_15      = 114      /* divisor for 1.79MHz clock to 15 kHz */\n\n  /* the size (in entries) of the 4 polynomial tables */\n  var POLY4_SIZE  = 0x000f\n  var POLY5_SIZE  = 0x001f\n  var POLY9_SIZE  = 0x01ff\n\n  var POLY17_SIZE = 0x0001ffff    /* else use the full 17 bits */\n\n  /* channel/chip definitions */\n  var CHAN1       = 0\n  var CHAN2       = 1\n  var CHAN3       = 2\n  var CHAN4       = 3\n  var CHIP1       = 0\n  var CHIP2       = 4\n  var CHIP3       = 8\n  var CHIP4       = 12\n  var SAMPLE      = 127\n\n  var FREQ_17_EXACT     = 1789790.0  /* exact 1.79 MHz clock freq */\n  var FREQ_17_APPROX    = 1787520.0  /* approximate 1.79 MHz clock freq */\n\n  // LFSR sequences\n  var bit1 = new Uint8Array( [ 1 ] );\n  var bit2 = new Uint8Array( [ 0,1 ] ); // TODO?\n  var bit4 = new Uint8Array( [ 1,1,0,1,1,1,0,0,0,0,1,0,1,0,0 ] );\n  var bit5 = new Uint8Array( [ 0,0,1,1,0,0,0,1,1,1,1,0,0,1,0,1,0,1,1,0,1,1,1,0,1,0,0,0,0,0,1 ] );\n  var bit9 = new Uint8Array( [ 0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,0,1,0,1,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,0,1,0,0,1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,0,1,1,1,1,0,1,0,1,1,0,1,0,1,0,0,0,0,1,1,0,1,0,1,0,0,0,1,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,1,1,1,1,0,1,1,1,1,0,1,1,0,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,0,1,1,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,1,1,1,0,0,0,1,0,0,1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,1,1,0,0,1,0,1,0,1,1,1,0,0,0,0,0,1,1,0,1,1,0,0,0,1,0,1,0,1,0,0,0,0,1,0,1,1,1,0,0,0,0,1,0,0,1,0,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,1,1,1,0,1,0,0,1,0,0,0,1,1,0,1,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,1,1,1,0,0,1,0,1,1,0,0,1,1,1,1,1,0,0,0,1,1,0 ] );\n  var bit15 = new Uint8Array( [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0] );\n  var bit31 = new Uint8Array( [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0] );\n  var bit17 = new Uint8Array(1<<14);\n  for (var i=0; i<bit17.length; i++) {\n    bit17[i] = Math.random() > 0.5 ? 1 : 0;\n  }\n  var bit17_5 = combinePolys(bit17, bit5);\n  var bit5_4 = combinePolys(bit5, bit4);\n  var wavetones = [\n    bit17_5, bit5, bit5_4, bit5,\n    bit17, bit2, bit4, bit2\n  ];\n  // TIA\n  var div2 = divideBy(2);\n  var div6 = divideBy(6);\n  var div31 = divideBy(31);\n  var div93 = divideBy(93);\n  var bit15_4 = combinePolys(bit15, bit4);\n  var bit5_2 = combinePolys(bit5, div2);\n  var bit5_6 = combinePolys(bit5, div6);\n  var tiawavetones = [\n    bit1, bit4, bit15_4, bit5_4,\n    div2, div2, div31, bit5_2,\n    bit9, bit5, div31, bit1,\n    div6, div6, div93, bit5_6\n  ];\n  \n  // registers\n  var regs = new Uint8Array(16);\n  var counters = new Float32Array(4);\n  var deltas = new Float32Array(4);\n  var volume = new Float32Array(4);\n  var audc = new Uint8Array(4);\n  var waveforms = [bit1, bit1, bit1, bit1];\n  var buffer;\n  var sampleRate;\n  var clock, baseDelta;\n  var dirty = true;\n\n  //\n\n  this.setBufferLength = function (length) {\n    buffer = new Int32Array(length);\n  };\n\n  this.getBuffer = function () {\n    return buffer;\n  };\n\n  this.setSampleRate = function (rate) {\n    sampleRate = rate;\n    baseDelta = FREQ_17_EXACT / rate;\n  };\n\n  function updateValues(addr) {\n    var ctrl = regs[8];\n    var base = (ctrl & CLOCK_15) ? DIV_15 : DIV_64;\n    var div;\n    var i = addr & 4;\n    var j = i>>1;\n    var k = i>>2;\n    if (ctrl & (CH1_CH2>>k)) {\n      if (ctrl & (CH1_179>>k))\n         div = regs[i+2] * 256 + regs[i+0] + 7;\n      else\n         div = (regs[i+2] * 256 + regs[i+0] + 1) * base;\n      deltas[j+1] = baseDelta / div;\n      deltas[j+0] = 0;\n    } else {\n      if (ctrl & (CH1_179>>k)) {\n        div = regs[i+0] + 4;\n      } else {\n        div = (regs[i+0] + 1) * base;\n      }\n      deltas[j+0] = baseDelta / div;\n      div = (regs[i+2] + 1) * base;\n      deltas[j+1] = baseDelta / div;\n    }\n    //console.log(addr, ctrl.toString(16), div, deltas[j+0], deltas[j+1]);\n  }\n\n  this.setRegister = function(addr, value) {\n    addr &= 0xf;\n    value &= 0xff;\n    if (regs[addr] != value) {\n      regs[addr] = value;\n      switch (addr) {\n        case 0:\n        case 2:\n        case 4:\n        case 6: // AUDF\n        case 8: // ctrl\n          dirty = true;\n          break;\n        case 1:\n        case 3:\n        case 5:\n        case 7: // AUDC\n          volume[addr>>1] = value & 0xf;\n          waveforms[addr>>1] = wavetones[value>>5];\n          break;\n      }\n    }\n  }\n\n  this.getRegister = function(addr) {\n    addr &= 0xf;\n    return regs[addr];\n  }\n  \n  this.setTIARegister = function(addr, value) {\n    switch (addr) {\n      case 0x17:\n      case 0x18:\n        regs[(addr&1)*4] = value & 0x1f;\n        dirty = true;\n        break;\n      case 0x15:\n      case 0x16:\n        waveforms[(addr&1)*2] = tiawavetones[value & 0xf];\n        break;\n      case 0x19:\n      case 0x1a:\n        volume[(addr&1)*2] = value & 0xf;\n        break;\n    }\n  }\n\n  this.generate = function (length) {\n    if (dirty) {\n      updateValues(0);\n      updateValues(4);\n      dirty = false;\n    }\n    for (var s=0; s<length; s+=2) {\n      var sample = 0;\n      for (var i=0; i<4; i++) {\n        var d = deltas[i];\n        var v = volume[i];\n        if (d > 0 && d < 1 && v > 0) {\n          var wav = waveforms[i];\n          var cnt = counters[i] += d;\n          if (cnt > wav.length) {\n            cnt = counters[i] = cnt - Math.floor(cnt / wav.length) * wav.length;\n          }\n          var on = wav[Math.floor(cnt)];\n          if (on) {\n            sample += v;\n          }\n        }\n      }\n      sample *= 64;\n      buffer[s] = sample;\n      buffer[s+1] = sample;\n    }\n  }\n}\n\n////// Worker sound\n\nexport var WorkerSoundChannel = function(worker) {\n  var sampleRate;\n  var output;\n  var pending = [];\n  var pendingLength = 0;\n\n  worker.onmessage = function(e) {\n    if (e && e.data && e.data.samples && output) {\n      pending.push(e.data.samples);\n      pendingLength += e.data.samples.length;\n    }\n  };\n\n  this.setBufferLength = function (length) {\n    output = new Int16Array(length);\n    //worker.postMessage({bufferLength:length,numChannels:2});\n    pendingLength = 0;\n  };\n\n  this.getBuffer = function () {\n    return output;\n  };\n\n  this.setSampleRate = function (rate) {\n    sampleRate = rate;\n    worker.postMessage({sampleRate:rate});\n  };\n\n  this.generate = function (length) {\n    if (pendingLength < length*3) {\n      //console.log(length, pendingLength);\n      output.fill(0);\n      return; // TODO: send sync msg?\n    }\n    for (var i=0; i<output.length;) {\n      if (pending.length == 0) break; // TODO?\n      var buf = pending.shift();\n      pendingLength -= buf.length;\n      var l = output.length-i;\n      if (buf.length < l) {\n        output.set(buf, i);\n      } else {\n        output.set(buf.slice(0, l), i);\n        pending.unshift(buf.slice(l));\n        pendingLength += buf.length-l;\n      }\n      i += buf.length;\n    }\n  }\n\n}\n\n// SampleAudio\n\nexport var SampleAudio = function(clockfreq) {\n  var self = this;\n  var sfrac, sinc, accum;\n  var buffer, bufpos, bufferlist;\n  var idrain, ifill;\n  var nbuffers = 4;\n\n  function mix(ape) {\n    var buflen=ape.outputBuffer.length;\n    var lbuf = ape.outputBuffer.getChannelData(0);\n    var m = this.module;\n    if (!m) m = ape.srcElement.module;\n    if (!m) return;\n    if (m.callback) {\n      m.callback(lbuf);\n      return;\n    } else {\n      var buf = bufferlist[idrain];\n      for (var i=0; i<lbuf.length; i++) {\n        lbuf[i] = buf[i];\n        //lbuf[i] = (i&128) ? 1.0 : 0.33;\n      }\n      idrain = (idrain + 1) % bufferlist.length;\n    }\n  }\n  \n  function clearBuffers() {\n    if (bufferlist)\n      for (var buf of bufferlist)\n        buf.fill(0);\n  }\n\n  function createContext() {\n    var AudioContext = window['AudioContext'] || window['webkitAudioContext'] || window['mozAudioContext'];\n    if (! AudioContext) {\n      console.log(\"no web audio context\");\n      return;\n    }\n    var ctx : AudioContext = new AudioContext();\n    self.context = ctx;\n    self.sr=self.context.sampleRate;\n    self.bufferlen=2048;\n\n    // remove DC bias\n    self.filterNode=self.context.createBiquadFilter();\n    self.filterNode.type='lowshelf';\n    self.filterNode.frequency.value=100;\n    self.filterNode.gain.value=-6;\n\n    // mixer\n    if ( typeof self.context.createScriptProcessor === 'function') {\n      self.mixerNode=self.context.createScriptProcessor(self.bufferlen, 1, 1);\n    } else {\n      self.mixerNode=self.context.createJavaScriptNode(self.bufferlen, 1, 1);\n    }\n\n    self.mixerNode.module=self;\n    self.mixerNode.onaudioprocess=mix;\n\n    // compressor for a bit of volume boost, helps with multich tunes\n    self.compressorNode=self.context.createDynamicsCompressor();\n\n    // patch up some cables :)\n    self.mixerNode.connect(self.filterNode);\n    self.filterNode.connect(self.compressorNode);\n    self.compressorNode.connect(self.context.destination);\n  }\n\n  this.start = function() {\n    if (this.context) {\n      // Chrome autoplay (https://goo.gl/7K7WLu)\n      if (this.context.state == 'suspended') {\n        this.context.resume();\n      }\n      return;   // already created\n    }\n    createContext();\t\t// create it\n    if (!this.context) return;  // not created?\n    sinc = this.sr * 1.0 / clockfreq;\n    sfrac = 0;\n    accum = 0;\n    bufpos = 0;\n    bufferlist = [];\n    idrain = 1;\n    ifill = 0;\n    for (var i=0; i<nbuffers; i++) {\n      var arrbuf = new ArrayBuffer(self.bufferlen*4);\n      bufferlist[i] = new Float32Array(arrbuf);\n    }\n    buffer = bufferlist[0];\n  }\n  \n  this.stop = function() {\n    this.context && this.context.suspend && this.context.suspend();\n    clearBuffers(); // just in case it doesn't stop immediately\n  }\n\n  this.close = function() {\n    if (this.context) {\n      this.context.close();\n      this.context = null;\n    }\n  }\n\n  this.addSingleSample = function(value) {\n    if (!buffer) return;\n    buffer[bufpos++] = value;\n    if (bufpos >= buffer.length) {\n      bufpos = 0;\n      bufferlist[ifill] = buffer;\n      var inext = (ifill + 1) % bufferlist.length;\n      if (inext == idrain) {\n        ifill = Math.floor(idrain + nbuffers/2) % bufferlist.length;\n        //console.log('SampleAudio: skipped buffer', idrain, ifill); // TODO\n      } else {\n        ifill = inext;\n      }\n      buffer = bufferlist[ifill];\n    }\n  }\n\n  this.feedSample = function(value, count) {\n    accum += value * count;\n    sfrac += sinc * count;\n    if (sfrac >= 1) {\n      accum /= sfrac;\n      while (sfrac >= 1) {\n        this.addSingleSample(accum * sinc);\n        sfrac -= 1;\n      }\n      accum *= sfrac;\n    }\n  }\n  \n}\n\n\nexport class SampledAudio {\n  sa;\n  constructor(sampleRate : number) {\n    this.sa = new SampleAudio(sampleRate);\n  }\n  feedSample(value:number, count:number) {\n    this.sa.feedSample(value, count);\n  }\n  start() {\n    this.sa.start();\n  }\n  stop() {\n    this.sa.stop();\n  }\n}\n\ninterface TssChannel {\n  setBufferLength(len : number) : void;\n  setSampleRate(rate : number) : void;\n  getBuffer() : number[];\n  generate(numSamples : number) : void;\n}\n\nexport class TssChannelAdapter {\n  channels : TssChannel[];\n  audioGain = 1.0 / 8192;\n  bufferLength : number;\n\n  constructor(chans, oversample:number, sampleRate:number) {\n    this.bufferLength = oversample * 2;\n    this.channels = chans.generate ? [chans] : chans; // array or single channel\n    this.channels.forEach((c) => {\n      c.setBufferLength(this.bufferLength);\n      c.setSampleRate(sampleRate);\n    });\n  }\n\n  generate(sink:SampledAudioSink) {\n    var l = this.bufferLength;\n    var bufs = this.channels.map((ch) => ch.getBuffer());\n    this.channels.forEach((ch) => {\n      ch.generate(l);\n    });\n    for (let i=0; i<l; i+=2) {\n      var total = 0;\n      bufs.forEach((buf) => total += buf[i]);\n      sink.feedSample(total * this.audioGain, 1);\n    };\n  }\n}\n\n", "\nimport { Probeable, ProbeAll } from \"./devices\";\n\nexport enum ProbeFlags {\n  CLOCKS\t  = 0x00000000,\n  EXECUTE\t  = 0x01000000,\n  INTERRUPT\t= 0x08000000,\n  ILLEGAL\t  = 0x09000000,\n  SP_PUSH\t  = 0x0a000000,\n  SP_POP\t  = 0x0b000000,\n  HAS_VALUE = 0x10000000,\n  MEM_READ\t= 0x12000000,\n  MEM_WRITE\t= 0x13000000,\n  IO_READ\t  = 0x14000000,\n  IO_WRITE\t= 0x15000000,\n  VRAM_READ\t= 0x16000000,\n  VRAM_WRITE= 0x17000000,\n  DMA_READ  = 0x18000000,\n  DMA_WRITE = 0x19000000,\n  WAIT      = 0x1f000000,\n  SCANLINE\t= 0x7e000000,\n  FRAME\t\t  = 0x7f000000,\n}\n\nclass ProbeFrame {\n  data : Uint32Array;\n  len : number;\n}\n\nexport class ProbeRecorder implements ProbeAll {\n\n  m : Probeable;      // machine to probe\n  buf : Uint32Array;  // buffer\n  idx : number = 0;   // index into buffer\n  sl : number = 0;    // scanline\n  cur_sp = -1;        // last stack pointer\n  singleFrame : boolean = true; // clear between frames\n\n  constructor(m:Probeable, buflen?:number) {\n    this.m = m;\n    this.reset(buflen || 0x100000);\n  }\n  start() {\n    this.m.connectProbe(this);\n  }\n  stop() {\n    this.m.connectProbe(null);\n  }\n  reset(newbuflen? : number) {\n    if (newbuflen) this.buf = new Uint32Array(newbuflen);\n    this.sl = 0;\n    this.cur_sp = -1;\n    this.clear();\n  }\n  clear() {\n    this.idx = 0;\n  }\n  logData(a:number) {\n    this.log(a);\n  }\n  log(a:number) {\n    // TODO: coalesce READ and EXECUTE and PUSH/POP\n    if (this.idx >= this.buf.length) return;\n    this.buf[this.idx++] = a;\n  }\n  relog(a:number) {\n    this.buf[this.idx-1] = a;\n  }\n  lastOp() {\n    if (this.idx > 0)\n      return this.buf[this.idx-1] & 0xff000000;\n    else\n      return -1;\n  }\n  lastAddr() {\n    if (this.idx > 0)\n      return this.buf[this.idx-1] & 0xffffff;\n    else\n      return -1;\n  }\n  addLogBuffer(src: Uint32Array) {\n    if (this.idx + src.length > this.buf.length) {\n      src = src.slice(0, this.buf.length - this.idx);\n    }\n    this.buf.set(src, this.idx);\n    this.idx += src.length;\n}\n  logClocks(clocks:number) {\n    clocks |= 0;\n    if (clocks > 0) {\n      if (this.lastOp() == ProbeFlags.CLOCKS)\n        this.relog((this.lastAddr() + clocks) | ProbeFlags.CLOCKS); // coalesce clocks\n      else\n        this.log(clocks | ProbeFlags.CLOCKS);\n    }\n  }\n  logNewScanline() {\n    this.log(ProbeFlags.SCANLINE);\n    this.sl++;\n  }\n  logNewFrame() {\n    this.log(ProbeFlags.FRAME);\n    this.sl = 0;\n    if (this.singleFrame) this.clear();\n  }\n  logExecute(address:number, SP:number) {\n    // record stack pushes/pops (from last instruction)\n    if (this.cur_sp !== SP) {\n      if (SP < this.cur_sp) {\n        this.log(ProbeFlags.SP_PUSH | SP);\n      }\n      if (SP > this.cur_sp) {\n        this.log(ProbeFlags.SP_POP | SP);\n      }\n      this.cur_sp = SP;\n    }\n    this.log(address | ProbeFlags.EXECUTE);\n  }\n  logInterrupt(type:number) {\n    this.log(type | ProbeFlags.INTERRUPT);\n  }\n  logValue(address:number, value:number, op:number) {\n    this.log((address & 0xffff) | ((value & 0xff)<<16) | op);\n  }\n  logRead(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.MEM_READ);\n  }\n  logWrite(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.MEM_WRITE);\n  }\n  logIORead(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.IO_READ);\n  }\n  logIOWrite(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.IO_WRITE);\n  }\n  logVRAMRead(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.VRAM_READ);\n  }\n  logVRAMWrite(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.VRAM_WRITE);\n  }\n  logIllegal(address:number) {\n    this.log(address | ProbeFlags.ILLEGAL);\n  }\n  logWait(address:number) {\n    this.log(address | ProbeFlags.WAIT);\n  }\n  logDMARead(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.DMA_READ);\n  }\n  logDMAWrite(address:number, value:number) {\n    this.logValue(address, value, ProbeFlags.DMA_WRITE);\n  }\n  countEvents(op : number) : number {\n    var count = 0;\n    for (var i=0; i<this.idx; i++) {\n      if ((this.buf[i] & 0xff000000) == op)\n        count++;\n    }\n    return count;\n  }\n  countClocks() : number {\n    var count = 0;\n    for (var i=0; i<this.idx; i++) {\n      if ((this.buf[i] & 0xff000000) == ProbeFlags.CLOCKS)\n        count += this.buf[i] & 0xffff;\n    }\n    return count;\n  }\n\n}\n", "\nexport interface SavesState<S> {\n  saveState(): S;\n  loadState(state: S): void;\n}\n\nexport interface Bus {\n  read(a: number): number;\n  write(a: number, v: number): void;\n  readConst?(a: number): number;\n}\n\nexport interface Bus32 {\n  read32(a: number): number;\n  write32(a: number, v: number): void;\n  readConst32?(a: number): number;\n}\n\nexport interface ClockBased {\n  advanceClock(): void;\n}\n\nexport interface InstructionBased {\n  advanceInsn(): number;\n}\n\nexport type TrapCondition = () => boolean;\n\nexport interface FrameBased {\n  advanceFrame(trap: TrapCondition): number;\n}\n\nexport interface VideoSource {\n  getVideoParams(): VideoParams;\n  connectVideo(pixels: Uint32Array): void;\n}\n\nexport interface RasterFrameBased extends FrameBased, VideoSource {\n  getRasterY(): number;\n  getRasterX(): number;\n  getRasterCanvasPosition?(): { x: number, y: number };\n}\n\nexport interface VideoParams {\n  width: number;\n  height: number;\n  overscan?: boolean;\n  rotate?: number;\n  videoFrequency?: number; // default = 60\n  aspect?: number;\n}\n\n// TODO: frame buffer optimization (apple2, etc)\n\nexport interface SampledAudioParams {\n  sampleRate: number;\n  stereo: boolean;\n}\n\nexport interface SampledAudioSink {\n  feedSample(value: number, count: number): void;\n  //sendAudioFrame(samples:Uint16Array) : void;\n}\n\nexport interface SampledAudioSource {\n  getAudioParams(): SampledAudioParams;\n  connectAudio(audio: SampledAudioSink): void;\n}\n\nexport interface AcceptsROM {\n  loadROM(data: Uint8Array, title?: string): void;\n}\n\nexport interface AcceptsBIOS {\n  loadBIOS(data: Uint8Array, title?: string): void;\n}\n\nexport interface Resettable {\n  reset(): void;\n}\n\nexport interface MemoryBusConnected {\n  connectMemoryBus(bus: Bus): void;\n}\n\nexport interface IOBusConnected {\n  connectIOBus(bus: Bus): void;\n}\n\nexport interface CPU extends MemoryBusConnected, Resettable, SavesState<any> {\n  getPC(): number;\n  getSP(): number;\n  isStable(): boolean;\n}\n\nexport interface HasCPU extends Resettable {\n  cpu: CPU;\n}\n\nexport interface Interruptable<IT> {\n  interrupt(type: IT): void;\n}\n\nexport interface SavesInputState<CS> {\n  loadControlsState(cs: CS): void;\n  saveControlsState(): CS;\n}\n\nexport interface AcceptsKeyInput {\n  setKeyInput(key: number, code: number, flags: number): void;\n}\n\nexport interface AcceptsPaddleInput {\n  setPaddleInput(controller: number, value: number): void;\n}\n\n// TODO: interface not yet used (setKeyInput() handles joystick)\nexport interface AcceptsJoyInput {\n  setJoyInput(joy: number, bitmask: number): void;\n}\n\n// SERIAL I/O\n\nexport interface SerialEvent {\n  op: 'read' | 'write';\n  value: number;\n  nbits: number;\n}\n\n// TODO: all these needed?\nexport interface SerialIOInterface {\n  // from machine to platform\n  clearToSend(): boolean;\n  sendByte(b: number);\n  // from platform to machine\n  byteAvailable(): boolean;\n  recvByte(): number;\n  // implement these too\n  reset(): void;\n  advance(clocks: number): void;\n  //  refresh() : void;\n}\n\nexport interface HasSerialIO {\n  connectSerialIO(serial: SerialIOInterface);\n  serialOut?: SerialEvent[];    // outgoing event log\n  serialIn?: SerialEvent[];     // incoming queue\n}\n\n/// PROFILER\n\nexport interface Probeable {\n  connectProbe(probe: ProbeAll): void;\n}\n\nexport interface ProbeTime {\n  logClocks(clocks: number);\n  logNewScanline();\n  logNewFrame();\n}\n\nexport interface ProbeCPU {\n  logExecute(address: number, SP: number);\n  logInterrupt(type: number);\n  logIllegal(address: number);\n  logWait(address: number);\n}\n\nexport interface ProbeBus {\n  logRead(address: number, value: number);\n  logWrite(address: number, value: number);\n  logDMARead(address: number, value: number);\n  logDMAWrite(address: number, value: number);\n}\n\nexport interface ProbeIO {\n  logIORead(address: number, value: number);\n  logIOWrite(address: number, value: number);\n}\n\nexport interface ProbeVRAM {\n  logVRAMRead(address: number, value: number);\n  logVRAMWrite(address: number, value: number);\n}\n\nexport interface ProbeAll extends ProbeTime, ProbeCPU, ProbeBus, ProbeIO, ProbeVRAM {\n  logData(data: number); // entire 32 bits\n  addLogBuffer(src: Uint32Array);\n}\n\nexport class NullProbe implements ProbeAll {\n  logClocks() { }\n  logNewScanline() { }\n  logNewFrame() { }\n  logExecute() { }\n  logInterrupt() { }\n  logRead() { }\n  logWrite() { }\n  logIORead() { }\n  logIOWrite() { }\n  logVRAMRead() { }\n  logVRAMWrite() { }\n  logIllegal() { }\n  logWait() { }\n  logDMARead() { }\n  logDMAWrite() { }\n  logData() { }\n  addLogBuffer(src: Uint32Array) { }\n}\n\n/// CONVENIENCE\n\nexport interface BasicMachineControlsState {\n  inputs: Uint8Array;\n}\n\nexport interface BasicMachineState extends BasicMachineControlsState {\n  c: any; // TODO\n  ram: Uint8Array;\n}\n\nexport abstract class BasicHeadlessMachine implements HasCPU, Bus, AcceptsROM, Probeable,\n  SavesState<BasicMachineState>, SavesInputState<BasicMachineControlsState> {\n\n  abstract cpuFrequency: number;\n  abstract defaultROMSize: number;\n\n  abstract cpu: CPU;\n  abstract ram: Uint8Array;\n\n  rom: Uint8Array;\n  inputs: Uint8Array = new Uint8Array(32);\n  handler: (key, code, flags) => void; // keyboard handler\n\n  nullProbe = new NullProbe();\n  probe: ProbeAll = this.nullProbe;\n\n  abstract read(a: number): number;\n  abstract write(a: number, v: number): void;\n\n  setKeyInput(key: number, code: number, flags: number): void {\n    this.handler && this.handler(key, code, flags);\n  }\n  connectProbe(probe: ProbeAll): void {\n    this.probe = probe || this.nullProbe;\n  }\n  reset() {\n    this.cpu.reset();\n  }\n  loadROM(data: Uint8Array, title?: string): void {\n    if (!this.rom) this.rom = new Uint8Array(this.defaultROMSize);\n    if (data.length > this.rom.length)\n      throw new Error(`ROM too big: ${data.length} > ${this.rom.length}}`);\n    this.rom.set(data);\n  }\n  loadState(state) {\n    this.cpu.loadState(state.c);\n    this.ram.set(state.ram);\n    this.inputs.set(state.inputs);\n  }\n  saveState() {\n    return {\n      c: this.cpu.saveState(),\n      ram: this.ram.slice(0),\n      inputs: this.inputs.slice(0),\n    };\n  }\n  loadControlsState(state) {\n    this.inputs.set(state.inputs);\n  }\n  saveControlsState() {\n    return {\n      inputs: this.inputs.slice(0)\n    };\n  }\n  advanceCPU() {\n    var c = this.cpu as any;\n    var n = 1;\n    if (this.cpu.isStable()) { this.probe.logExecute(this.cpu.getPC(), this.cpu.getSP()); }\n    if (c.advanceClock) { c.advanceClock(); }\n    else if (c.advanceInsn) { n = c.advanceInsn(1); }\n    this.probe.logClocks(n);\n    return n;\n  }\n  probeMemoryBus(membus: Bus & Partial<Bus32>): Bus & Partial<Bus32> {\n    return {\n      read: (a) => {\n        let val = membus.read(a);\n        this.probe.logRead(a, val);\n        return val;\n      },\n      write: (a, v) => {\n        this.probe.logWrite(a, v);\n        membus.write(a, v);\n      },\n      read32: (a) => {\n        let val = membus.read32(a);\n        this.probe.logRead(a, val);\n        return val;\n      },\n      write32: (a, v) => {\n        this.probe.logWrite(a, v);\n        membus.write32(a, v);\n      }\n    };\n  }\n  connectCPUMemoryBus(membus: Bus): void {\n    this.cpu.connectMemoryBus(this.probeMemoryBus(membus as Bus&Bus32));\n  }\n  probeIOBus(iobus: Bus): Bus {\n    return {\n      read: (a) => {\n        let val = iobus.read(a);\n        this.probe.logIORead(a, val);\n        return val;\n      },\n      write: (a, v) => {\n        this.probe.logIOWrite(a, v);\n        iobus.write(a, v);\n      },\n    };\n  }\n  probeDMABus(iobus: Bus): Bus {\n    return {\n      read: (a) => {\n        let val = iobus.read(a);\n        this.probe.logDMARead(a, val);\n        return val;\n      },\n      write: (a, v) => {\n        this.probe.logDMAWrite(a, v);\n        iobus.write(a, v);\n      }\n    };\n  }\n  connectCPUIOBus(iobus: Bus): void {\n    this.cpu['connectIOBus'](this.probeIOBus(iobus));\n  }\n}\n\nexport abstract class BasicMachine extends BasicHeadlessMachine implements SampledAudioSource {\n\n  abstract canvasWidth: number;\n  abstract numVisibleScanlines: number;\n  abstract sampleRate: number;\n  overscan: boolean = false;\n  rotate: number = 0;\n  aspectRatio: number;\n\n  pixels: Uint32Array;\n  audio: SampledAudioSink;\n\n  scanline: number;\n\n  getAudioParams(): SampledAudioParams {\n    return { sampleRate: this.sampleRate, stereo: false };\n  }\n  connectAudio(audio: SampledAudioSink): void {\n    this.audio = audio;\n  }\n  getVideoParams(): VideoParams {\n    return {\n      width: this.canvasWidth,\n      height: this.numVisibleScanlines,\n      aspect: this.aspectRatio,\n      overscan: this.overscan,\n      rotate: this.rotate\n    };\n  }\n  connectVideo(pixels: Uint32Array): void {\n    this.pixels = pixels;\n  }\n}\n\nexport abstract class BasicScanlineMachine extends BasicMachine implements RasterFrameBased {\n\n  abstract numTotalScanlines: number;\n  abstract cpuCyclesPerLine: number;\n\n  abstract startScanline(): void;\n  abstract drawScanline(): void;\n\n  frameCycles: number;\n\n  advanceFrame(trap: TrapCondition): number {\n    this.preFrame();\n    var endLineClock = 0;\n    var steps = 0;\n    this.probe.logNewFrame();\n    this.frameCycles = 0;\n    for (var sl = 0; sl < this.numTotalScanlines; sl++) {\n      endLineClock += this.cpuCyclesPerLine; // could be fractional\n      this.scanline = sl;\n      this.startScanline();\n      while (this.frameCycles < endLineClock) {\n        if (trap && trap()) {\n          sl = 999;\n          break;\n        }\n        this.frameCycles += this.advanceCPU();\n        steps++;\n      }\n      this.drawScanline();\n      this.probe.logNewScanline();\n      this.probe.logClocks(Math.floor(this.frameCycles - endLineClock)); // remainder of prev. line\n    }\n    this.postFrame();\n    return steps; // TODO: return steps, not clock? for recorder\n  }\n  preFrame() { }\n  postFrame() { }\n  getRasterY() { return this.scanline; }\n  getRasterX() { return this.frameCycles % this.cpuCyclesPerLine; }\n}\n", "\nimport { hex } from \"../util\";\n\nconst Z80_OPS = [\"nop\",\"ld bc,xx\",\"ld (bc),a\",\"inc bc\",\"inc b\",\"dec b\",\"ld b,x\",\"rlca\",\"ex af,af'\",\"add hl,bc\",\"ld a,(bc)\",\"dec bc\",\"inc c\",\"dec c\",\"ld c,x\",\"rrca\",\"djnz x\",\"ld de,xx\",\"ld (de),a\",\"inc de\",\"inc d\",\"dec d\",\"ld d,x\",\"rla\",\"jr x\",\"add hl,de\",\"ld a,(de)\",\"dec de\",\"inc e\",\"dec e\",\"ld e,x\",\"rra\",\"jr nz,x\",\"ld hl,xx\",\"ld (xx),hl\",\"inc hl\",\"inc h\",\"dec h\",\"ld h,x\",\"daa\",\"jr z,x\",\"add hl,hl\",\"ld hl,(xx)\",\"dec hl\",\"inc l\",\"dec l\",\"ld l,x\",\"cpl\",\"jr nc,x\",\"ld sp,xx\",\"ld (xx),a\",\"inc sp\",\"inc (hl)\",\"dec (hl)\",\"ld (hl),x\",\"scf\",\"jr c,x\",\"add hl,sp\",\"ld a,(xx)\",\"dec sp\",\"inc a\",\"dec a\",\"ld a,x\",\"ccf\",\"ld b,b\",\"ld b,c\",\"ld b,d\",\"ld b,e\",\"ld b,h\",\"ld b,l\",\"ld b,(hl)\",\"ld b,a\",\"ld c,b\",\"ld c,c\",\"ld c,d\",\"ld c,e\",\"ld c,h\",\"ld c,l\",\"ld c,(hl)\",\"ld c,a\",\"ld d,b\",\"ld d,c\",\"ld d,d\",\"ld d,e\",\"ld d,h\",\"ld d,l\",\"ld d,(hl)\",\"ld d,a\",\"ld e,b\",\"ld e,c\",\"ld e,d\",\"ld e,e\",\"ld e,h\",\"ld e,l\",\"ld e,(hl)\",\"ld e,a\",\"ld h,b\",\"ld h,c\",\"ld h,d\",\"ld h,e\",\"ld h,h\",\"ld h,l\",\"ld h,(hl)\",\"ld h,a\",\"ld l,b\",\"ld l,c\",\"ld l,d\",\"ld l,e\",\"ld l,h\",\"ld l,l\",\"ld l,(hl)\",\"ld l,a\",\"ld (hl),b\",\"ld (hl),c\",\"ld (hl),d\",\"ld (hl),e\",\"ld (hl),h\",\"ld (hl),l\",\"halt\",\"ld (hl),a\",\"ld a,b\",\"ld a,c\",\"ld a,d\",\"ld a,e\",\"ld a,h\",\"ld a,l\",\"ld a,(hl)\",\"ld a,a\",\"add a,b\",\"add a,c\",\"add a,d\",\"add a,e\",\"add a,h\",\"add a,l\",\"add a,(hl)\",\"add a,a\",\"adc a,b\",\"adc a,c\",\"adc a,d\",\"adc a,e\",\"adc a,h\",\"adc a,l\",\"adc a,(hl)\",\"adc a,a\",\"sub b\",\"sub c\",\"sub d\",\"sub e\",\"sub h\",\"sub l\",\"sub (hl)\",\"sub a\",\"sbc a,b\",\"sbc a,c\",\"sbc a,d\",\"sbc a,e\",\"sbc a,h\",\"sbc a,l\",\"sbc a,(hl)\",\"sbc a,a\",\"and b\",\"and c\",\"and d\",\"and e\",\"and h\",\"and l\",\"and (hl)\",\"and a\",\"xor b\",\"xor c\",\"xor d\",\"xor e\",\"xor h\",\"xor l\",\"xor (hl)\",\"xor a\",\"or b\",\"or c\",\"or d\",\"or e\",\"or h\",\"or l\",\"or (hl)\",\"or a\",\"cp b\",\"cp c\",\"cp d\",\"cp e\",\"cp h\",\"cp l\",\"cp (hl)\",\"cp a\",\"ret nz\",\"pop bc\",\"jp nz,xx\",\"jp xx\",\"call nz,xx\",\"push bc\",\"add a,x\",\"rst 00h\",\"ret z\",\"ret\",\"jp z,xx\",\"xxBITxx\",\"call z,xx\",\"call xx\",\"adc a,x\",\"rst 08h\",\"ret nc\",\"pop de\",\"jp nc,xx\",\"out (x),a\",\"call nc,xx\",\"push de\",\"sub x\",\"rst 10h\",\"ret c\",\"exx\",\"jp c,xx\",\"in a,(x)\",\"call c,xx\",\"xxIXxx\",\"sbc a,x\",\"rst 18h\",\"ret po\",\"pop hl\",\"jp po,xx\",\"ex (sp),hl\",\"call po,xx\",\"push hl\",\"and x\",\"rst 20h\",\"ret pe\",\"jp (hl)\",\"jp pe,xx\",\"ex de,hl\",\"call pe,xx\",\"xx80xx\",\"xor x\",\"rst 28h\",\"ret p\",\"pop af\",\"jp p,xx\",\"di\",\"call p,xx\",\"push af\",\"or x\",\"rst 30h\",\"ret m\",\"ld sp,hl\",\"jp m,xx\",\"ei\",\"call m,xx\",\"xxIYxx\",\"cp x\",\"rst 38h\"];\nconst Z80_OPS_ED = [\"in b,(c)\",\"out (c),b\",\"sbc hl,bc\",\"ld (xx),bc\",\"neg\",\"retn\",\"im 0\",\"ld i,a\",\"in c,(c)\",\"out (c),c\",\"adc hl,bc\",\"ld bc,(xx)\",\"neg\",\"reti\",\"\",\"ld r,a\",\"in d,(c)\",\"out (c),d\",\"sbc hl,de\",\"ld (xx),de\",\"neg\",\"retn\",\"im 1\",\"ld a,i\",\"in e,(c)\",\"out (c),e\",\"adc hl,de\",\"ld de,(xx)\",\"neg\",\"retn\",\"im 2\",\"ld a,r\",\"in h,(c)\",\"out (c),h\",\"sbc hl,hl\",\"ld (xx),hl\",\"neg\",\"retn\",\"\",\"rrd\",\"in l,(c)\",\"out (c),l\",\"adc hl,hl\",\"ld hl,(xx)\",\"neg\",\"retn\",\"\",\"rld\",\"in f,(c)\",\"out (c),f\",\"sbc hl,sp\",\"ld (xx),sp\",\"neg\",\"retn\",\"\",\"\",\"in a,(c)\",\"out (c),a\",\"adc hl,sp\",\"ld sp,(xx)\",\"neg\",\"reti\",\"\",\"\",\"ldi\",\"cpi\",\"ini\",\"outi\",\"\",\"\",\"\",\"\",\"ldd\",\"cpd\",\"ind\",\"outd\",\"\",\"\",\"\",\"\",\"ldir\",\"cpir\",\"inir\",\"otir\",\"\",\"\",\"\",\"\",\"lddr\",\"cpdr\",\"indr\",\"otdr\",\"\",\"\",\"\",\"\"];\nconst Z80_OPS_CB = [\"rlc b\",\"rlc c\",\"rlc d\",\"rlc e\",\"rlc h\",\"rlc l\",\"rlc (hl)\",\"rlc a\",\"rrc b\",\"rrc c\",\"rrc d\",\"rrc e\",\"rrc h\",\"rrc l\",\"rrc (hl)\",\"rrc a\",\"rl b\",\"rl c\",\"rl d\",\"rl e\",\"rl h\",\"rl l\",\"rl (hl)\",\"rl a\",\"rr b\",\"rr c\",\"rr d\",\"rr e\",\"rr h\",\"rr l\",\"rr (hl)\",\"rr a\",\"sla b\",\"sla c\",\"sla d\",\"sla e\",\"sla h\",\"sla l\",\"sla (hl)\",\"sla a\",\"sra b\",\"sra c\",\"sra d\",\"sra e\",\"sra h\",\"sra l\",\"sra (hl)\",\"sra a\",\"sll b\",\"sll c\",\"sll d\",\"sll e\",\"sll h\",\"sll l\",\"sll (hl)\",\"sll a\",\"srl b\",\"srl c\",\"srl d\",\"srl e\",\"srl h\",\"srl l\",\"srl (hl)\",\"srl a\",\"bit 0,b\",\"bit 0,c\",\"bit 0,d\",\"bit 0,e\",\"bit 0,h\",\"bit 0,l\",\"bit 0,(hl)\",\"bit 0,a\",\"bit 1,b\",\"bit 1,c\",\"bit 1,d\",\"bit 1,e\",\"bit 1,h\",\"bit 1,l\",\"bit 1,(hl)\",\"bit 1,a\",\"bit 2,b\",\"bit 2,c\",\"bit 2,d\",\"bit 2,e\",\"bit 2,h\",\"bit 2,l\",\"bit 2,(hl)\",\"bit 2,a\",\"bit 3,b\",\"bit 3,c\",\"bit 3,d\",\"bit 3,e\",\"bit 3,h\",\"bit 3,l\",\"bit 3,(hl)\",\"bit 3,a\",\"bit 4,b\",\"bit 4,c\",\"bit 4,d\",\"bit 4,e\",\"bit 4,h\",\"bit 4,l\",\"bit 4,(hl)\",\"bit 4,a\",\"bit 5,b\",\"bit 5,c\",\"bit 5,d\",\"bit 5,e\",\"bit 5,h\",\"bit 5,l\",\"bit 5,(hl)\",\"bit 5,a\",\"bit 6,b\",\"bit 6,c\",\"bit 6,d\",\"bit 6,e\",\"bit 6,h\",\"bit 6,l\",\"bit 6,(hl)\",\"bit 6,a\",\"bit 7,b\",\"bit 7,c\",\"bit 7,d\",\"bit 7,e\",\"bit 7,h\",\"bit 7,l\",\"bit 7,(hl)\",\"bit 7,a\",\"res 0,b\",\"res 0,c\",\"res 0,d\",\"res 0,e\",\"res 0,h\",\"res 0,l\",\"res 0,(hl)\",\"res 0,a\",\"res 1,b\",\"res 1,c\",\"res 1,d\",\"res 1,e\",\"res 1,h\",\"res 1,l\",\"res 1,(hl)\",\"res 1,a\",\"res 2,b\",\"res 2,c\",\"res 2,d\",\"res 2,e\",\"res 2,h\",\"res 2,l\",\"res 2,(hl)\",\"res 2,a\",\"res 3,b\",\"res 3,c\",\"res 3,d\",\"res 3,e\",\"res 3,h\",\"res 3,l\",\"res 3,(hl)\",\"res 3,a\",\"res 4,b\",\"res 4,c\",\"res 4,d\",\"res 4,e\",\"res 4,h\",\"res 4,l\",\"res 4,(hl)\",\"res 4,a\",\"res 5,b\",\"res 5,c\",\"res 5,d\",\"res 5,e\",\"res 5,h\",\"res 5,l\",\"res 5,(hl)\",\"res 5,a\",\"res 6,b\",\"res 6,c\",\"res 6,d\",\"res 6,e\",\"res 6,h\",\"res 6,l\",\"res 6,(hl)\",\"res 6,a\",\"res 7,b\",\"res 7,c\",\"res 7,d\",\"res 7,e\",\"res 7,h\",\"res 7,l\",\"res 7,(hl)\",\"res 7,a\",\"set 0,b\",\"set 0,c\",\"set 0,d\",\"set 0,e\",\"set 0,h\",\"set 0,l\",\"set 0,(hl)\",\"set 0,a\",\"set 1,b\",\"set 1,c\",\"set 1,d\",\"set 1,e\",\"set 1,h\",\"set 1,l\",\"set 1,(hl)\",\"set 1,a\",\"set 2,b\",\"set 2,c\",\"set 2,d\",\"set 2,e\",\"set 2,h\",\"set 2,l\",\"set 2,(hl)\",\"set 2,a\",\"set 3,b\",\"set 3,c\",\"set 3,d\",\"set 3,e\",\"set 3,h\",\"set 3,l\",\"set 3,(hl)\",\"set 3,a\",\"set 4,b\",\"set 4,c\",\"set 4,d\",\"set 4,e\",\"set 4,h\",\"set 4,l\",\"set 4,(hl)\",\"set 4,a\",\"set 5,b\",\"set 5,c\",\"set 5,d\",\"set 5,e\",\"set 5,h\",\"set 5,l\",\"set 5,(hl)\",\"set 5,a\",\"set 6,b\",\"set 6,c\",\"set 6,d\",\"set 6,e\",\"set 6,h\",\"set 6,l\",\"set 6,(hl)\",\"set 6,a\",\"set 7,b\",\"set 7,c\",\"set 7,d\",\"set 7,e\",\"set 7,h\",\"set 7,l\",\"set 7,(hl)\",\"set 7,a\"];\n\nexport function disassembleZ80(pc:number, b0:number, b1:number, b2:number, b3:number) : {line:string, nbytes:number, isaddr:boolean} {\n\n  var op,n,am;\n  var bytes = [b0,b1,b2,b3];\n  var isaddr = false;\n  n=1;\n  switch (b0) {\n    case 0xcb:\n      am = Z80_OPS_CB[b1];\n      n++;\n      break;\n    case 0xed:\n      if (b1 >= 0x40 && b1 <= 0x7f) am = Z80_OPS_ED[b1 - 0x40];\n      if (b1 >= 0xa0 && b1 <= 0xbf) am = Z80_OPS_ED[b1 - 0xa0 + 0x40];\n      n++;\n      break;\n    case 0xdd:\n    case 0xfd:\n      var ireg = (b0 == 0xdd) ? 'ix' : 'iy';\n      if (b1 == 0xcb) {\n        // swap the 3rd and 4th bytes [$dd $cb displacement opcode]\n        am = Z80_OPS_CB[b3];\n        bytes[2] = b3;\n        bytes[3] = b2;\n        n++;\n      } else {\n        am = Z80_OPS[b1];\n      }\n      am = am.replace(/[(]hl[)]/, '('+ireg+'+x)');\n      am = am.replace(/\\bhl\\b/, ireg);\n      n++;\n      break;\n    default:\n      am = Z80_OPS[b0];\n      break;\n  }\n  if (!am || !am.length) am = \"??\";\n  if (/\\bxx\\b/.test(am)) {\n    am = am.replace(/\\bxx\\b/,'$'+hex(bytes[n]+(bytes[n+1]<<8), 4));\n    n += 2;\n    isaddr = true;\n  } else if (/\\bx\\b/.test(am)) {\n    if (am.startsWith('j')) {\n      var offset = (b1 < 0x80) ? (pc+2+b1) : (pc+2-(256-b1));\n      offset &= 0xffff;\n      am = am.replace(/\\bx\\b/,'$'+hex(offset, 4));\n      isaddr = true;\n    } else {\n      am = am.replace(/\\bx\\b/,'$'+hex(bytes[n], 2));\n    }\n    n += 1;\n  }\n  return {line:am.toUpperCase(), nbytes:n, isaddr:isaddr};\n};\n", "\nimport { CpuState, EmuState } from \"./baseplatform\";\nimport { CPU, SampledAudioSink, ProbeAll, NullProbe } from \"./devices\";\nimport { EmuHalt } from \"./emu\";\n\n// WASM Support\n// TODO: detangle from c64\n\nexport abstract class BaseWASMMachine {\n  prefix : string;\n  instance : WebAssembly.Instance;\n  exports : any;\n  sys : number;\n  pixel_dest : Uint32Array;\n  pixel_src : Uint32Array;\n  stateptr : number;\n  statearr : Uint8Array;\n  cpustateptr : number;\n  cpustatearr : Uint8Array;\n  ctrlstateptr : number;\n  ctrlstatearr : Uint8Array;\n  cpu : CPU;\n  romptr : number;\n  romlen : number;\n  romarr : Uint8Array;\n  biosptr : number;\n  biosarr : Uint8Array;\n  audio : SampledAudioSink;\n  audioarr : Float32Array;\n  probe : ProbeAll;\n  maxROMSize : number = 0x40000;\n\n  abstract getCPUState() : CpuState;\n  abstract saveState() : EmuState;\n  abstract loadState(state: EmuState);\n\n  constructor(prefix: string) {\n    this.prefix = prefix;\n    var self = this;\n    this.cpu = {\n      getPC: self.getPC.bind(self),\n      getSP: self.getSP.bind(self),\n      isStable: self.isStable.bind(self),\n      reset: self.reset.bind(self),\n      saveState: () => {\n        return self.getCPUState();\n      },\n      loadState: () => {\n        console.log(\"loadState not implemented\")\n      },\n      connectMemoryBus() {\n        console.log(\"connectMemoryBus not implemented\")\n      },\n    }\n  }\n  getImports(wmod: WebAssembly.Module) {\n    return {};\n  }\n  async fetchWASM() {\n    var wasmResponse = await fetch('res/'+this.prefix+'.wasm');\n    if (wasmResponse.status == 200 || (wasmResponse as any as Blob).size) {\n      var wasmBinary = await wasmResponse.arrayBuffer();\n      var wasmCompiled = await WebAssembly.compile(wasmBinary);\n      var wasmResult = await WebAssembly.instantiate(wasmCompiled, this.getImports(wasmCompiled));\n      this.instance = wasmResult;\n      this.exports = wasmResult.exports;\n    } else throw new Error('could not load WASM file');\n  }\n  allocateBIOS(biosBinary: Uint8Array) {\n    this.biosptr = this.exports.malloc(biosBinary.byteLength);\n    this.biosarr = new Uint8Array(this.exports.memory.buffer, this.biosptr, biosBinary.byteLength);\n}\n  async fetchBIOS() {\n    var biosResponse = await fetch('res/'+this.prefix+'.bios');\n    if (biosResponse.status == 200 || (biosResponse as any as Blob).size) {\n      var biosBinary = new Uint8Array(await biosResponse.arrayBuffer());\n      this.allocateBIOS(biosBinary);\n      this.loadBIOS(biosBinary);\n    } else throw new Error('could not load BIOS file');\n  }\n  async initWASM() {\n    // init machine instance\n    this.sys = this.exports.machine_init(this.biosptr);\n    let statesize = this.exports.machine_get_state_size();\n    this.stateptr = this.exports.malloc(statesize);\n    let ctrlstatesize = this.exports.machine_get_controls_state_size();\n    this.ctrlstateptr = this.exports.malloc(ctrlstatesize);\n    let cpustatesize = this.exports.machine_get_cpu_state_size();\n    this.cpustateptr = this.exports.malloc(cpustatesize);\n    this.romptr = this.exports.malloc(this.maxROMSize);\n    // create state buffers\n    // must do this after allocating memory (and everytime we grow memory?)\n    this.statearr = new Uint8Array(this.exports.memory.buffer, this.stateptr, statesize);\n    this.ctrlstatearr = new Uint8Array(this.exports.memory.buffer, this.ctrlstateptr, ctrlstatesize);\n    this.cpustatearr = new Uint8Array(this.exports.memory.buffer, this.cpustateptr, cpustatesize);\n    // create audio buffer\n    let sampbufsize = 4096*4;\n    this.audioarr = new Float32Array(this.exports.memory.buffer, this.exports.machine_get_sample_buffer(), sampbufsize);\n    // create ROM buffer\n    this.romarr = new Uint8Array(this.exports.memory.buffer, this.romptr, this.maxROMSize);\n    // enable c64 joystick map to arrow keys (TODO)\n    //this.exports.c64_set_joystick_type(this.sys, 1);\n    console.log('machine_init', this.sys, statesize, ctrlstatesize, cpustatesize, sampbufsize);\n  }\n  async loadWASM() {\n    await this.fetchWASM();\n    this.exports.memory.grow(96); // TODO: need more when probing?\n    await this.fetchBIOS();\n    await this.initWASM();\n  }\n  getPC() : number {\n    return this.exports.machine_cpu_get_pc(this.sys);\n  }\n  getSP() : number {\n    return this.exports.machine_cpu_get_sp(this.sys);\n  }\n  isStable() : boolean {\n    return this.exports.machine_cpu_is_stable(this.sys);\n  }\n  loadROM(rom: Uint8Array) {\n    if (rom.length > this.maxROMSize) throw new EmuHalt(`Rom size too big: ${rom.length} bytes`);\n    this.romarr.set(rom);\n    this.romlen = rom.length;\n    console.log('load rom', rom.length, 'bytes');\n    this.reset(); // TODO?\n  }\n  // TODO: can't load after machine_init\n  loadBIOS(srcArray: Uint8Array) {\n    this.biosarr.set(srcArray);\n  }\n  reset() {\n    this.exports.machine_reset(this.sys);\n  }\n  /* TODO: we don't need this because c64_exec does this?\n  pollControls() {\n    this.exports.machine_start_frame(this.sys);\n  }\n  */\n  read(address: number) : number {\n    return this.exports.machine_mem_read(this.sys, address & 0xffff);\n  }\n  readConst(address: number) : number {\n    return this.exports.machine_mem_read(this.sys, address & 0xffff);\n  }\n  write(address: number, value: number) : void {\n    this.exports.machine_mem_write(this.sys, address & 0xffff, value & 0xff);\n  }\n  getAudioParams() {\n    return {sampleRate:44100, stereo:false};\n  }\n  videoOffsetBytes = 0;\n  connectVideo(pixels:Uint32Array) : void {\n    this.pixel_dest = pixels;\n    var pixbuf = this.exports.machine_get_pixel_buffer(this.sys); // save video pointer\n    console.log('connectVideo', pixbuf, pixels.length);\n    this.pixel_src = new Uint32Array(this.exports.memory.buffer, pixbuf+this.videoOffsetBytes, pixels.length);\n  }\n  syncVideo() {\n    if (this.exports.machine_update_video) {\n      this.exports.machine_update_video(this.sys);\n    }\n    if (this.pixel_dest != null) {\n      this.pixel_dest.set(this.pixel_src);\n    }\n  }\n  // assume controls buffer is smaller than cpu buffer\n  saveControlsState() : any {\n    //console.log(1, this.romptr, this.romlen, this.ctrlstateptr, this.romarr.slice(0,4), this.ctrlstatearr.slice(0,4));\n    this.exports.machine_save_controls_state(this.sys, this.ctrlstateptr);\n    //console.log(2, this.romptr, this.romlen, this.ctrlstateptr, this.romarr.slice(0,4), this.ctrlstatearr.slice(0,4));\n    return { controls:this.ctrlstatearr.slice(0) }\n  }\n  loadControlsState(state) : void {\n    this.ctrlstatearr.set(state.controls);\n    this.exports.machine_load_controls_state(this.sys, this.ctrlstateptr);\n  }\n  connectAudio(audio : SampledAudioSink) : void {\n    this.audio = audio;\n  }\n  syncAudio() {\n    if (this.audio != null) {\n      var n = this.exports.machine_get_sample_count();\n      for (var i=0; i<n; i++) {\n        this.audio.feedSample(this.audioarr[i], 1);\n      }\n    }\n  }\n  // TODO: tick might advance 1 instruction\n  advanceFrameClock(trap, cpf:number) : number {\n    var i : number;\n    if (trap) {\n      for (i=0; i<cpf; i++) {\n        if (trap()) {\n          break;\n        }\n        this.exports.machine_tick(this.sys);\n      }\n    } else {\n      this.exports.machine_exec(this.sys, cpf);\n      i = cpf;\n    }\n    this.syncVideo();\n    this.syncAudio();\n    return i;\n  }\n  copyProbeData() {\n    if (this.probe && !(this.probe instanceof NullProbe)) {\n      var datalen = this.exports.machine_get_probe_buffer_size();\n      var dataaddr = this.exports.machine_get_probe_buffer_address();\n      // TODO: more efficient way to put into probe\n      var databuf = new Uint32Array(this.exports.memory.buffer, dataaddr, datalen);\n      this.probe.logNewFrame(); // TODO: machine should do this\n      this.probe.addLogBuffer(databuf);\n    }\n  }\n  connectProbe(probe: ProbeAll): void {\n    this.probe = probe;\n  }\n  getDebugTree() {\n    return this.saveState();\n  }\n}\n", "\"use strict\";\n/*\nThe MIT License (MIT)\nCopyright (c) 2014 Martin Maly, http://retrocip.cz, http://www.uelectronics.info,\ntwitter: @uelectronics\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nexport function CPU6809() {\n\nvar ticks;\nvar rA,rB,rX,rY,rU,rS,PC,CC,DP,\nF_CARRY     =1,\nF_OVERFLOW  =2,\nF_ZERO      =4,\nF_NEGATIVE  =8,\nF_IRQMASK   =16,\nF_HALFCARRY =32,\nF_FIRQMASK  =64,\nF_ENTIRE    =128,\n\nvecRESET = 0xFFFE,\nvecNMI = 0xFFFC,\nvecSWI = 0xFFFA,\nvecIRQ = 0xFFF8,\nvecFIRQ = 0xFFF6,\nvecSWI2 = 0xFFF4,\nvecSWI3 = 0xFFF2,\n\nT=0;\n\nvar IRQs;\n\nvar byteTo, byteAt;\n\nvar cycles = [\n      6,0,0,6,6,0,6,6,6,6,6,0,6,6,3,6,          /* 00-0F */\n      0,0,2,4,0,0,5,9,0,2,3,0,3,2,8,6,          /* 10-1F */\n      3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,          /* 20-2F */\n      4,4,4,4,5,5,5,5,0,5,3,6,9,11,0,19,        /* 30-3F */\n      2,0,0,2,2,0,2,2,2,2,2,0,2,2,0,2,          /* 40-4F */\n      2,0,0,2,2,0,2,2,2,2,2,0,2,2,0,2,          /* 50-5F */\n      6,0,0,6,6,0,6,6,6,6,6,0,6,6,3,6,          /* 60-6F */\n      7,0,0,7,7,0,7,7,7,7,7,0,7,7,4,7,          /* 70-7F */\n      2,2,2,4,2,2,2,0,2,2,2,2,4,7,3,0,          /* 80-8F */\n      4,4,4,6,4,4,4,4,4,4,4,4,6,7,5,5,          /* 90-9F */\n      4,4,4,6,4,4,4,4,4,4,4,4,6,7,5,5,          /* A0-AF */\n      5,5,5,7,5,5,5,5,5,5,5,5,7,8,6,6,          /* B0-BF */\n      2,2,2,4,2,2,2,0,2,2,2,2,3,0,3,0,          /* C0-CF */\n      4,4,4,6,4,4,4,4,4,4,4,4,5,5,5,5,          /* D0-DF */\n      4,4,4,6,4,4,4,4,4,4,4,4,5,5,5,5,          /* E0-EF */\n      5,5,5,7,5,5,5,5,5,5,5,5,6,6,6,6];         /* F0-FF */\n\n/* Instruction timing for the two-byte opcodes */\nvar cycles2 = [\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 00-0F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 10-1F */\n      0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,          /* 20-2F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,         /* 30-3F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 40-4F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 50-5F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 60-6F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 70-7F */\n      0,0,0,5,0,0,0,0,0,0,0,0,5,0,4,0,          /* 80-8F */\n      0,0,0,7,0,0,0,0,0,0,0,0,7,0,6,6,          /* 90-9F */\n      0,0,0,7,0,0,0,0,0,0,0,0,7,0,6,6,          /* A0-AF */\n      0,0,0,8,0,0,0,0,0,0,0,0,8,0,7,7,          /* B0-BF */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,          /* C0-CF */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,          /* D0-DF */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,          /* E0-EF */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,7];         /* F0-FF */\n\n/* Negative and zero flags for quicker flag settings */\nvar flagsNZ = [\n      4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 00-0F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 10-1F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 20-2F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 30-3F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 40-4F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 50-5F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 60-6F */\n      0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,          /* 70-7F */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* 80-8F */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* 90-9F */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* A0-AF */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* B0-BF */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* C0-CF */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* D0-DF */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,          /* E0-EF */\n      8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8];         /* F0-FF */\n\nvar setV8 = function(a,b,r) {CC |= (((a^b^r^(r>>1))&0x80)>>6);};\nvar setV16 = function(a,b,r) {CC |= (((a^b^r^(r>>1))&0x8000)>>14);};\nvar getD = function() {return (rA<<8)+rB;};\nvar setD = function(v) {rA = (v>>8)& 0xff;rB=v&0xff;};\nvar PUSHB = function(b) {\n    byteTo(--rS, b & 0xff);\n};\nvar PUSHW = function(b) {\n    byteTo(--rS, b & 0xff);\n    byteTo(--rS, (b>>8) & 0xff);\n};\n\nvar PUSHBU = function(b) {\n    byteTo(--rU, b & 0xff);\n};\nvar PUSHWU = function(b) {\n    byteTo(--rU, b & 0xff);\n    byteTo(--rU, (b>>8) & 0xff);\n};\nvar PULLB = function() {\n    return byteAt(rS++);\n};\nvar PULLW = function() {\n    return byteAt(rS++) * 256 + byteAt(rS++);\n};\n\nvar PULLBU = function() {\n    return byteAt(rU++);\n};\nvar PULLWU = function() {\n    return byteAt(rU++) * 256 + byteAt(rU++);\n};\n\nvar PSHS = function(ucTemp)  {\n      var i = 0;\n         if (ucTemp & 0x80) {PUSHW(PC);i += 2;}\n         if (ucTemp & 0x40) {PUSHW(rU);i += 2;}\n         if (ucTemp & 0x20){PUSHW(rY);i += 2;}\n         if (ucTemp & 0x10){PUSHW(rX);i += 2;}\n         if (ucTemp & 0x8){PUSHB(DP); i++;}\n         if (ucTemp & 0x4){PUSHB(rB); i++;}\n         if (ucTemp & 0x2){PUSHB(rA); i++;}\n         if (ucTemp & 0x1){PUSHB(CC); i++;}\n         T+=i; //timing\n};\nvar PSHU = function(ucTemp)  {\n      var i = 0;\n         if (ucTemp & 0x80) {PUSHWU(PC);i += 2;}\n         if (ucTemp & 0x40) {PUSHWU(rS);i += 2;}\n         if (ucTemp & 0x20){PUSHWU(rY);i += 2;}\n         if (ucTemp & 0x10){PUSHWU(rX);i += 2;}\n         if (ucTemp & 0x8){PUSHBU(DP); i++;}\n         if (ucTemp & 0x4){PUSHBU(rB); i++;}\n         if (ucTemp & 0x2){PUSHBU(rA); i++;}\n         if (ucTemp & 0x1){PUSHBU(CC); i++;}\n         T+=i; //timing\n};\nvar PULS = function(ucTemp)  {\n      var i = 0;\n      if (ucTemp & 0x1){CC = PULLB(); i++;}\n      if (ucTemp & 0x2){rA = PULLB(); i++;}\n      if (ucTemp & 0x4){rB = PULLB(); i++;}\n      if (ucTemp & 0x8){DP = PULLB(); i++;}\n      if (ucTemp & 0x10){rX = PULLW();i += 2;}\n      if (ucTemp & 0x20){rY = PULLW();i += 2;}\n      if (ucTemp & 0x40) {rU = PULLW();i += 2;}\n      if (ucTemp & 0x80) {PC = PULLW();i += 2;}\n      T+=i; //timing\n};\nvar PULU = function(ucTemp)  {\n      var i = 0;\n      if (ucTemp & 0x1){CC = PULLBU(); i++;}\n      if (ucTemp & 0x2){rA = PULLBU(); i++;}\n      if (ucTemp & 0x4){rB = PULLBU(); i++;}\n      if (ucTemp & 0x8){DP = PULLBU(); i++;}\n      if (ucTemp & 0x10){rX = PULLWU();i += 2;}\n      if (ucTemp & 0x20){rY = PULLWU();i += 2;}\n      if (ucTemp & 0x40) {rS = PULLWU();i += 2;}\n      if (ucTemp & 0x80) {PC = PULLWU();i += 2;}\n      T+=i; //timing\n};\n\n\nvar getPBR = function(ucPostByte) {\n    switch(ucPostByte & 0xf) {\n       case 0x00: /* D */\n            return getD();\n       case 0x1: /* X */\n          return rX;\n       case 0x2: /* Y */\n          return rY;\n       case 0x3: /* U */\n          return rU;\n       case 0x4: /* S */\n          return rS;\n       case 0x5: /* PC */\n          return PC;\n       case 0x8: /* A */\n          return rA;\n       case 0x9: /* B */\n          return rB;\n       case 0xA: /* CC */\n          return CC;\n       case 0xB: /* DP */\n          return DP;\n       default: /* illegal */\n          return null;\n       }\n};\nvar setPBR = function(ucPostByte, v) {\n    switch(ucPostByte & 0xf) /* Get destination register */\n       {\n       case 0x00: /* D */\n            setD(v);return;\n       case 0x1: /* X */\n          rX = v; return;\n       case 0x2: /* Y */\n          rY = v; return;\n       case 0x3: /* U */\n          rU = v; return;\n       case 0x4: /* S */\n          rS = v; return;\n       case 0x5: /* PC */\n          PC = v; return;\n       case 0x8: /* A */\n          rA = v; return;\n       case 0x9: /* B */\n          rB = v; return;\n       case 0xA: /* CC */\n          CC = v; return;\n       case 0xB: /* DP */\n          DP = v; return;\n       default: /* illegal */\n          return;\n       }\n};\n\nvar TFREXG = function(ucPostByte, bExchange)\n{\n\n   var ucTemp = ucPostByte & 0x88;\n   if (ucTemp == 0x80 || ucTemp == 0x08)\n      ucTemp = 0; /* PROBLEM! */\n\n    if (bExchange)\n          {\n          ucTemp = getPBR(ucPostByte>>4);\n          setPBR(ucPostByte>>4, getPBR(ucPostByte));\n          setPBR(ucPostByte, ucTemp);\n          }\n       else /* Transfer */ {\n          setPBR(ucPostByte, getPBR(ucPostByte>>4));\n        }\n} ;\n\nvar signed = function(x) {\n    return (x>127)?(x-256):x;\n};\nvar signed16 = function(x) {\n    return (x>32767)?(x-65536):x;\n};\n\nvar fetch = function() {\n    var v = byteAt(PC++);\n    PC &= 0xffff;\n    return v;\n};\nvar fetch16 = function() {\n    var v1 = byteAt(PC++);\n    PC &= 0xffff;\n    var v2 = byteAt(PC++);\n    PC &= 0xffff;\n    return v1*256+v2;\n};\n\nvar ReadWord = function(addr) {\n    var v1 = byteAt(addr++);\n    addr &= 0xffff;\n    var v2 = byteAt(addr++);\n    addr &= 0xffff;\n    return v1*256+v2;\n};\nvar WriteWord = function(addr,v) {\n    byteTo(addr++,(v>>8)&0xff);\n    addr &= 0xffff;\n    byteTo(addr,v&0xff);\n};\n\nvar PostByte = function() {\n    var pb = fetch();\n    var preg;\n    switch (pb & 0x60) {\n        case 0:\n            preg = rX; break;\n        case 0x20:\n            preg = rY; break;\n        case 0x40:\n            preg = rU; break;\n        case 0x60:\n            preg = rS; break;\n    }\n\n    var xchg = null;\n    var addr = null;\n    var sTemp;\n\n    if (pb & 0x80) /* Complex stuff */\n       {\n       switch (pb & 0x0f)\n          {\n          case 0: /* EA = ,reg+ */\n             addr = preg;\n             xchg = preg + 1;\n             T += 2;\n             break;\n          case 1: /* EA = ,reg++ */\n             addr = preg;\n             xchg = preg + 2;\n             T += 3;\n             break;\n          case 2: /* EA = ,-reg */\n             xchg = preg - 1;\n             addr = xchg;\n             T += 2;\n             break;\n          case 3: /* EA = ,--reg */\n             xchg = preg - 2;\n             addr = xchg;\n             T += 3;\n             break;\n          case 4: /* EA = ,reg */\n             addr = preg;\n             break;\n          case 5: /* EA = ,reg + B */\n             //usAddr = *pReg + (signed short)(signed char)regs->ucRegB;\n             addr = preg + signed(rB);\n             T += 1;\n             break;\n          case 6: /* EA = ,reg + A */\n              addr = preg + signed(rA);\n              T += 1;\n             break;\n          case 7: /* illegal */\n             addr = 0;\n             break;\n          case 8: /* EA = ,reg + 8-bit offset */\n             addr = preg + signed(fetch());\n             T += 1;\n             break;\n          case 9: /* EA = ,reg + 16-bit offset */\n             addr = preg + signed16(fetch16());\n             T += 4;\n             break;\n          case 0xA: /* illegal */\n             addr = 0;\n             break;\n          case 0xB: /* EA = ,reg + D */\n             T += 4;\n             addr = preg + getD();\n             break;\n          case 0xC: /* EA = PC + 8-bit offset */\n             sTemp = signed(fetch());\n             addr = PC + sTemp;\n             T += 1;\n             break;\n          case 0xD: /* EA = PC + 16-bit offset */\n             sTemp =  signed16(fetch16());\n             addr = PC + sTemp;\n             T += 5;\n             break;\n          case 0xe: /* Illegal */\n             addr = 0;\n             break;\n          case 0xF: /* EA = [,address] */\n             T += 5;\n             addr = fetch16();\n             break;\n          } /* switch */\n\n       addr &= 0xffff;\n\n       if (pb & 0x10) /* Indirect addressing */\n          {\n          addr = byteAt(addr)*256+byteAt((addr+1) & 0xffff);\n          T += 3;\n          }\n       }\n    else /* Just a 5 bit signed offset + register */\n       {\n       var sByte = pb & 0x1f;\n       if (sByte > 15) /* Two's complement 5-bit value */\n          sByte -= 32;\n       addr = preg + sByte;\n       T += 1;\n       }\n\n    if (xchg!==null) {\n        switch (pb & 0x60) {\n            case 0:\n                rX = xchg; break;\n            case 0x20:\n                rY = xchg; break;\n            case 0x40:\n                rU = xchg; break;\n            case 0x60:\n                rS = xchg; break;\n        }\n\n    }\n\n    return addr & 0xffff; /* Return the effective address */\n};\n\nvar flagsNZ16 = function(word) {\n    CC &= ~(F_ZERO | F_NEGATIVE);\n    if (word===0) CC |= F_ZERO;\n    if (word & 0x8000) CC |= F_NEGATIVE;\n};\n\n// ============= Operations\n\nvar oINC = function(b) {\n   b++;\n   b &= 0xff;\n   CC &= ~(F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[b];\n   if (b === 0 || b == 0x80) CC |= F_OVERFLOW;\n   return b;\n};\nvar oDEC = function(b) {\n   b--;\n   b &= 0xff;\n   CC &= ~(F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[b];\n   if (b === 0x7f || b == 0xff) CC |= F_OVERFLOW;\n   return b;\n};\nvar oSUB = function(b,v) {\n   var temp = b-v;\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[temp & 0xff];\n   if (temp&0x100) CC|=F_CARRY;\n   setV8(b,v,temp);\n   return temp&0xff;\n};\nvar oSUB16 = function(b,v) {\n   var temp = b-v;\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   if ((temp&0xffff)===0) CC|=F_ZERO;\n   if (temp&0x8000) CC|=F_NEGATIVE;\n   if (temp&0x10000) CC|=F_CARRY;\n   setV16(b,v,temp);\n   return temp&0xffff;\n};\nvar oADD = function(b,v) {\n   var temp = b+v;\n   //temp &= 0xff;\n   CC &= ~(F_HALFCARRY | F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[temp & 0xff];\n   if (temp&0x100) CC|=F_CARRY;\n   setV8(b,v,temp);\n   if ((temp ^ b ^ v)&0x10) CC |= F_HALFCARRY;\n   return temp&0xff;\n};\nvar oADD16 = function(b,v) {\n   var temp = b+v;\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   if ((temp&0xffff)===0) CC|=F_ZERO;\n   if (temp&0x8000) CC|=F_NEGATIVE;\n   if (temp&0x10000) CC|=F_CARRY;\n   setV16(b,v,temp);\n   return temp&0xffff;\n};\nvar oADC = function(b,v) {\n   var temp = b+v+(CC & F_CARRY);\n   //temp &= 0xff;\n   CC &= ~(F_HALFCARRY | F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[temp & 0xff];\n   if (temp&0x100) CC|=F_CARRY;\n   setV8(b,v,temp);\n   if ((temp ^ b ^ v)&0x10) CC |= F_HALFCARRY;\n   return temp&0xff;\n};\nvar oSBC = function(b,v) {\n   var temp = b-v-(CC & F_CARRY);\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[temp & 0xff];\n   if (temp&0x100) CC|=F_CARRY;\n   setV8(b,v,temp);\n   return temp&0xff;\n};\nvar oCMP = function(b,v) {\n   var temp = b-v;\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   CC |= flagsNZ[temp & 0xff];\n   if (temp&0x100) CC|=F_CARRY;\n   setV8(b,v,temp);\n   return;\n};\nvar oCMP16 = function(b,v) {\n   var temp = b-v;\n   //temp &= 0xff;\n   CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   if ((temp&0xffff)===0) CC|=F_ZERO;\n   if (temp&0x8000) CC|=F_NEGATIVE;\n   if (temp&0x10000) CC|=F_CARRY;\n   setV16(b,v,temp);\n   return;\n};\n\nvar oNEG = function(b) {\n    CC &= ~(F_CARRY | F_ZERO | F_OVERFLOW | F_NEGATIVE);\n   if (b == 0x80)\n      CC |= F_OVERFLOW;\n   b = ((~b)&0xff) + 1;\n   if (b === 0) CC |= F_ZERO;\n   if (b & 0x80) CC |= F_NEGATIVE | F_CARRY;\n   return b;\n};\n\nvar oLSR = function(b) {\n    CC &= ~(F_ZERO | F_CARRY | F_NEGATIVE);\n    if (b & 0x01) CC |= F_CARRY;\n    b >>= 1;\n    if (b === 0) CC |= F_ZERO;\n    return b & 0xff;\n};\nvar oASR = function(b) {\n    CC &= ~(F_ZERO | F_CARRY | F_NEGATIVE);\n    if (b & 0x01) CC |= F_CARRY;\n    b = (b & 0x80) | (b>>1);\n    CC |= flagsNZ[b];\n    return b;\n};\nvar oASL = function(b) {\n    var temp = b;\n    CC &= ~(F_ZERO | F_CARRY | F_NEGATIVE | F_OVERFLOW);\n    if (b & 0x80) CC |= F_CARRY;\n    b <<= 1;\n    CC |= flagsNZ[b];\n    if ((b ^ temp) & 0x80) CC|=F_OVERFLOW;\n    return b;\n};\nvar oROL = function(b) {\n    var temp = b;\n    var oldc = CC&F_CARRY;\n    CC &= ~(F_ZERO | F_CARRY | F_NEGATIVE | F_OVERFLOW);\n    if (b & 0x80) CC |= F_CARRY;\n    b = b<<1 | oldc;\n    CC |= flagsNZ[b];\n    if ((b ^ temp) & 0x80) CC|=F_OVERFLOW;\n    return b;\n};\nvar oROR = function(b) {\n    var oldc = CC&F_CARRY;\n    CC &= ~(F_ZERO | F_CARRY | F_NEGATIVE);\n    if (b & 0x01) CC |= F_CARRY;\n    b = b>>1 | oldc<<7;\n    CC |= flagsNZ[b];\n//    if ((b ^ temp) & 0x80) CC|=F_OVERFLOW;\n    return b;\n};\n\nvar oEOR = function(b,v) {\n    CC &= ~(F_ZERO | F_NEGATIVE | F_OVERFLOW);\n    b ^= v;\n    CC |= flagsNZ[b];\n    return b;\n};\nvar oOR = function(b,v) {\n    CC &= ~(F_ZERO | F_NEGATIVE | F_OVERFLOW);\n    b |= v;\n    CC |= flagsNZ[b];\n    return b;\n};\nvar oAND = function(b,v) {\n    CC &= ~(F_ZERO | F_NEGATIVE | F_OVERFLOW);\n    b &= v;\n    CC |= flagsNZ[b];\n    return b;\n};\nvar oCOM = function(b) {\n    CC &= ~(F_ZERO | F_NEGATIVE | F_OVERFLOW);\n    b ^= 0xff;\n    CC |= flagsNZ[b];\n    CC |= F_CARRY;\n    return b;\n};\n\n//----common\nvar dpadd = function() {\n    //direct page + 8bit index\n    return DP*256 + fetch();\n};\n\nvar step = function() {\n    var oldT = T;\n\n    var addr = null;\n    var pb = null;\n\n    var oldPC = PC;\n    var opcode = fetch();\n    T+=cycles[opcode];\n    switch (opcode) {\n        case 0x00: //NEG DP\n            addr = dpadd();\n            byteTo(addr, oNEG(byteAt(addr)));\n            break;\n        case 0x03: //COM DP\n            addr = dpadd();\n            byteTo(addr, oCOM(byteAt(addr)));\n            break;\n        case 0x04: //LSR DP\n            addr = dpadd();\n            byteTo(addr, oLSR(byteAt(addr)));\n            break;\n        case 0x06: //ROR DP\n            addr = dpadd();\n            byteTo(addr, oROR(byteAt(addr)));\n        break;\n        case 0x07: //ASR DP\n            addr = dpadd();\n            byteTo(addr, oASR(byteAt(addr)));\n        break;\n        case 0x08: //ASL DP\n            addr = dpadd();\n            byteTo(addr, oASL(byteAt(addr)));\n        break;\n        case 0x09: //ROL DP\n            addr = dpadd();\n            byteTo(addr, oROL(byteAt(addr)));\n        break;\n\n        case 0x0A: //DEC DP\n            addr = dpadd();\n            byteTo(addr, oDEC(byteAt(addr)));\n        break;\n        case 0x0C: //INC DP\n            addr = dpadd();\n            byteTo(addr, oINC(byteAt(addr)));\n        break;\n\n        case 0x0D: //TST DP\n            addr = dpadd();\n            pb = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[pb];\n        break;\n\n        case 0x0E: //JMP DP\n            addr = dpadd();\n            PC = addr;\n        break;\n        case 0x0F: //CLR DP\n            addr = dpadd();\n            byteTo(addr,0);\n            CC&=~(F_CARRY|F_NEGATIVE|F_OVERFLOW);\n            CC |= F_ZERO;\n        break;\n\n        case 0x12: //NOP\n            break;\n        case 0x13: //SYNC\n            break;\n        case 0x16: //LBRA relative\n            addr = signed16(fetch16());\n            PC += addr;\n            break;\n        case 0x17: //LBSR relative\n            addr = signed16(fetch16());\n            PUSHW(PC);\n            PC += addr;\n            break;\n        case 0x19: //DAA\n            var cf = 0;\n            var nhi = rA & 0xf0, nlo = rA & 0x0f;\n            if( nlo>0x09 || CC & 0x20 ) cf |= 0x06;\n            if( nhi>0x80 && nlo>0x09 ) cf |= 0x60;\n            if( nhi>0x90 || CC & 0x01 ) cf |= 0x60;\n            addr = cf + rA;\n            CC  &= ~(F_CARRY | F_NEGATIVE | F_ZERO | F_OVERFLOW);\n            if (addr & 0x100)\n               CC  |= F_CARRY;\n            rA = addr & 0xff;\n            CC  |= flagsNZ[rA];\n            break;\n        case 0x1A: //ORCC\n            CC |= fetch();\n            break;\n        case 0x1C: //ANDCC\n            CC &= fetch();\n            break;\n        case 0x1D: //SEX\n            rA = (rB & 0x80)?0xff:0;\n            flagsNZ16(getD());\n            CC &= ~F_OVERFLOW;\n            break;\n        case 0x1E: //EXG\n            pb = fetch();\n            TFREXG(pb,true);\n            break;\n        case 0x1F: //EXG\n            pb = fetch();\n            TFREXG(pb,false);\n            break;\n\n        case 0x20: //BRA\n            addr = signed(fetch());\n            PC += addr;\n            break;\n        case 0x21: //BRN\n            addr = signed(fetch());\n            break;\n        case 0x22: //BHI\n            addr = signed(fetch());\n            if (!(CC&(F_CARRY | F_ZERO))) PC += addr;\n        break;\n        case 0x23: //BLS\n            addr = signed(fetch());\n            if (CC&(F_CARRY | F_ZERO)) PC += addr;\n        break;\n        case 0x24: //BCC\n            addr = signed(fetch());\n            if (!(CC&F_CARRY)) PC += addr;\n        break;\n        case 0x25: //BCS\n            addr = signed(fetch());\n            if (CC&F_CARRY) PC += addr;\n        break;\n        case 0x26: //BNE\n            addr = signed(fetch());\n            if (!(CC&F_ZERO)) PC += addr;\n        break;\n        case 0x27: //BEQ\n            addr = signed(fetch());\n            if (CC&F_ZERO) PC += addr;\n        break;\n        case 0x28: //BVC\n            addr = signed(fetch());\n            if (!(CC&F_OVERFLOW)) PC += addr;\n        break;\n        case 0x29: //BVS\n            addr = signed(fetch());\n            if (CC&F_OVERFLOW) PC += addr;\n        break;\n        case 0x2A: //BPL\n            addr = signed(fetch());\n            if (!(CC&F_NEGATIVE)) PC += addr;\n        break;\n        case 0x2B: //BMI\n            addr = signed(fetch());\n            if (CC&F_NEGATIVE) PC += addr;\n        break;\n        case 0x2C: //BGE\n            addr = signed(fetch());\n            if (!((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2))) PC += addr;\n        break;\n        case 0x2D: //BLT\n            addr = signed(fetch());\n            if ((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2)) PC += addr;\n        break;\n        case 0x2E: //BGT\n            addr = signed(fetch());\n            if (!((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2) || (CC&F_ZERO))) PC += addr;\n        break;\n        case 0x2F: //BLE\n            addr = signed(fetch());\n            if ((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2) || (CC&F_ZERO)) PC += addr;\n        break;\n\n        case 0x30: //LEAX\n            rX = PostByte();\n            if (rX===0) CC|=F_ZERO; else CC&=~F_ZERO;\n        break;\n        case 0x31: //LEAY\n            rY = PostByte();\n            if (rY===0) CC|=F_ZERO; else CC&=~F_ZERO;\n        break;\n        case 0x32: //LEAS\n            rS = PostByte();\n        break;\n        case 0x33: //LEAU\n            rU = PostByte();\n        break;\n\n        case 0x34: //PSHS\n            PSHS(fetch());\n        break;\n        case 0x35: //PULS\n            PULS(fetch());\n        break;\n        case 0x36: //PSHU\n            PSHU(fetch());\n        break;\n        case 0x37: //PULU\n            PULU(fetch());\n        break;\n        case 0x39: //RTS\n            PC = PULLW();\n        break;\n        case 0x3A: //ABX\n            rX += rB;\n        break;\n        case 0x3B: //RTI\n            CC = PULLB();\n            if (CC & F_ENTIRE) {\n                T+=9;\n                rA = PULLB();\n                rB = PULLB();\n                DP = PULLB();\n                rX = PULLW();\n                rY = PULLW();\n                rU = PULLW();\n            }\n            PC = PULLW();\n        break;\n        case 0x3C: //CWAI **todo\n            CC &= fetch();\n        break;\n        case 0x3D: //MUL\n            addr = rA * rB;\n            if (addr===0) CC|=F_ZERO; else CC&=~F_ZERO;\n            if (addr&0x80) CC|=F_CARRY; else CC&=~F_CARRY;\n            setD(addr);\n        break;\n        case 0x3F: //SWI\n            CC |= F_ENTIRE;\n            PUSHW(PC);\n            PUSHW(rU);\n            PUSHW(rY);\n            PUSHW(rX);\n            PUSHB(DP);\n            PUSHB(rB);\n            PUSHB(rA);\n            PUSHB(CC);\n            CC |= F_IRQMASK | F_FIRQMASK;\n            PC = ReadWord(vecSWI);\n        break;\n\n        case 0x40:\n            rA = oNEG(rA);\n        break;\n        case 0x43:\n            rA = oCOM(rA);\n        break;\n        case 0x44:\n            rA = oLSR(rA);\n        break;\n        case 0x46:\n            rA = oROR(rA);\n        break;\n        case 0x47:\n            rA = oASR(rA);\n        break;\n        case 0x48:\n            rA = oASL(rA);\n        break;\n        case 0x49:\n            rA = oROL(rA);\n        break;\n        case 0x4A:\n            rA = oDEC(rA);\n        break;\n        case 0x4C:\n            rA = oINC(rA);\n        break;\n        case 0x4D:\n            CC &= ~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0x4F:\n            rA = 0;\n            CC &= ~(F_NEGATIVE|F_OVERFLOW|F_CARRY);\n            CC |= F_ZERO;\n        break;\n\n        case 0x50:\n            rB = oNEG(rB);\n        break;\n        case 0x53:\n            rB = oCOM(rB);\n        break;\n        case 0x54:\n            rB = oLSR(rB);\n        break;\n        case 0x56:\n            rB = oROR(rB);\n        break;\n        case 0x57:\n            rB = oASR(rB);\n        break;\n        case 0x58:\n            rB = oASL(rB);\n        break;\n        case 0x59:\n            rB = oROL(rB);\n        break;\n        case 0x5A:\n            rB = oDEC(rB);\n        break;\n        case 0x5C:\n            rB = oINC(rB);\n        break;\n        case 0x5D:\n            CC &= ~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0x5F:\n            rB = 0;\n            CC &= ~(F_NEGATIVE|F_OVERFLOW|F_CARRY);\n            CC |= F_ZERO;\n        break;\n\n        case 0x60: //NEG indexed\n            addr = PostByte();\n            byteTo(addr, oNEG(byteAt(addr)));\n            break;\n        case 0x63: //COM indexed\n            addr = PostByte();\n            byteTo(addr, oCOM(byteAt(addr)));\n            break;\n        case 0x64: //LSR indexed\n            addr = PostByte();\n            byteTo(addr, oLSR(byteAt(addr)));\n            break;\n        case 0x66: //ROR indexed\n            addr = PostByte();\n            byteTo(addr, oROR(byteAt(addr)));\n        break;\n        case 0x67: //ASR indexed\n            addr = PostByte();\n            byteTo(addr, oASR(byteAt(addr)));\n        break;\n        case 0x68: //ASL indexed\n            addr = PostByte();\n            byteTo(addr, oASL(byteAt(addr)));\n        break;\n        case 0x69: //ROL indexed\n            addr = PostByte();\n            byteTo(addr, oROL(byteAt(addr)));\n        break;\n\n        case 0x6A: //DEC indexed\n            addr = PostByte();\n            byteTo(addr, oDEC(byteAt(addr)));\n        break;\n        case 0x6C: //INC indexed\n            addr = PostByte();\n            byteTo(addr, oINC(byteAt(addr)));\n        break;\n\n        case 0x6D: //TST indexed\n            addr = PostByte();\n            pb = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[pb];\n        break;\n\n        case 0x6E: //JMP indexed\n            addr = PostByte();\n            PC = addr;\n        break;\n        case 0x6F: //CLR indexed\n            addr = PostByte();\n            byteTo(addr,0);\n            CC&=~(F_CARRY|F_NEGATIVE|F_OVERFLOW);\n            CC |= F_ZERO;\n        break;\n\n\n        case 0x70: //NEG extended\n            addr = fetch16();\n            byteTo(addr, oNEG(byteAt(addr)));\n            break;\n        case 0x73: //COM extended\n            addr = fetch16();\n            byteTo(addr, oCOM(byteAt(addr)));\n            break;\n        case 0x74: //LSR extended\n            addr = fetch16();\n            byteTo(addr, oLSR(byteAt(addr)));\n            break;\n        case 0x76: //ROR extended\n            addr = fetch16();\n            byteTo(addr, oROR(byteAt(addr)));\n        break;\n        case 0x77: //ASR extended\n            addr = fetch16();\n            byteTo(addr, oASR(byteAt(addr)));\n        break;\n        case 0x78: //ASL extended\n            addr = fetch16();\n            byteTo(addr, oASL(byteAt(addr)));\n        break;\n        case 0x79: //ROL extended\n            addr = fetch16();\n            byteTo(addr, oROL(byteAt(addr)));\n        break;\n\n        case 0x7A: //DEC extended\n            addr = fetch16();\n            byteTo(addr, oDEC(byteAt(addr)));\n        break;\n        case 0x7C: //INC extended\n            addr = fetch16();\n            byteTo(addr, oINC(byteAt(addr)));\n        break;\n\n        case 0x7D: //TST extended\n            addr = fetch16();\n            pb = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[pb];\n        break;\n\n        case 0x7E: //JMP extended\n            addr = fetch16();\n            PC = addr;\n        break;\n        case 0x7F: //CLR extended\n            addr = fetch16();\n            byteTo(addr,0);\n            CC&=~(F_CARRY|F_NEGATIVE|F_OVERFLOW);\n            CC |= F_ZERO;\n        break;\n\n        // regs A,X\n\n        case 0x80: //SUBA imm\n            rA = oSUB(rA, fetch());\n        break;\n        case 0x81: //CMPA imm\n            oCMP(rA, fetch());\n        break;\n        case 0x82: //SBCA imm\n            rA = oSBC(rA, fetch());\n        break;\n        case 0x83: //SUBD imm\n            setD(oSUB16(getD(),fetch16()));\n        break;\n        case 0x84: //ANDA imm\n            rA = oAND(rA, fetch());\n        break;\n        case 0x85: //BITA imm\n            oAND(rA, fetch());\n        break;\n        case 0x86: //LDA imm\n            rA = fetch();\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0x88: //EORA imm\n            rA = oEOR(rA, fetch());\n        break;\n        case 0x89: //ADCA imm\n            rA = oADC(rA, fetch());\n        break;\n        case 0x8A: //ORA imm\n            rA = oOR(rA, fetch());\n        break;\n        case 0x8B: //ADDA imm\n            rA = oADD(rA, fetch());\n        break;\n        case 0x8C: //CMPX imm\n            oCMP16(rX, fetch16());\n        break;\n\n        case 0x8D: //JSR imm\n            addr = signed(fetch());\n            PUSHW(PC);\n            PC+=addr;\n        break;\n        case 0x8E: //LDX imm\n            rX = fetch16();\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n\n\n        case 0x90: //SUBA direct\n            addr = dpadd();\n            rA = oSUB(rA, byteAt(addr));\n        break;\n        case 0x91: //CMPA direct\n            addr = dpadd();\n            oCMP(rA, byteAt(addr));\n        break;\n        case 0x92: //SBCA direct\n            addr = dpadd();\n            rA = oSBC(rA, byteAt(addr));\n        break;\n        case 0x93: //SUBD direct\n            addr = dpadd();\n            setD(oSUB16(getD(),ReadWord(addr)));\n        break;\n        case 0x94: //ANDA direct\n            addr = dpadd();\n            rA = oAND(rA, byteAt(addr));\n        break;\n        case 0x95: //BITA direct\n            addr = dpadd();\n            oAND(rA, byteAt(addr));\n        break;\n        case 0x96: //LDA direct\n            addr = dpadd();\n            rA = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0x97: //STA direct\n            addr = dpadd();\n            byteTo(addr,rA);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0x98: //EORA direct\n            addr = dpadd();\n            rA = oEOR(rA, byteAt(addr));\n        break;\n        case 0x99: //ADCA direct\n            addr = dpadd();\n            rA = oADC(rA, byteAt(addr));\n        break;\n        case 0x9A: //ORA direct\n            addr = dpadd();\n            rA = oOR(rA, byteAt(addr));\n        break;\n        case 0x9B: //ADDA direct\n            addr = dpadd();\n            rA = oADD(rA, byteAt(addr));\n        break;\n        case 0x9C: //CMPX direct\n            addr = dpadd();\n            oCMP16(rX, ReadWord(addr));\n        break;\n\n        case 0x9D: //JSR direct\n            addr = dpadd();\n            PUSHW(PC);\n            PC=addr;\n        break;\n        case 0x9E: //LDX direct\n            addr = dpadd();\n            rX = ReadWord(addr);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0x9F: //STX direct\n            addr = dpadd();\n            WriteWord(addr,rX);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xA0: //SUBA indexed\n            addr = PostByte();\n            rA = oSUB(rA, byteAt(addr));\n        break;\n        case 0xA1: //CMPA indexed\n            addr = PostByte();\n            oCMP(rA, byteAt(addr));\n        break;\n        case 0xA2: //SBCA indexed\n            addr = PostByte();\n            rA = oSBC(rA, byteAt(addr));\n        break;\n        case 0xA3: //SUBD indexed\n            addr = PostByte();\n            setD(oSUB16(getD(),ReadWord(addr)));\n        break;\n        case 0xA4: //ANDA indexed\n            addr = PostByte();\n            rA = oAND(rA, byteAt(addr));\n        break;\n        case 0xA5: //BITA indexed\n            addr = PostByte();\n            oAND(rA, byteAt(addr));\n        break;\n        case 0xA6: //LDA indexed\n            addr = PostByte();\n            rA = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0xA7: //STA indexed\n            addr = PostByte();\n            byteTo(addr,rA);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0xA8: //EORA indexed\n            addr = PostByte();\n            rA = oEOR(rA, byteAt(addr));\n        break;\n        case 0xA9: //ADCA indexed\n            addr = PostByte();\n            rA = oADC(rA, byteAt(addr));\n        break;\n        case 0xAA: //ORA indexed\n            addr = PostByte();\n            rA = oOR(rA, byteAt(addr));\n        break;\n        case 0xAB: //ADDA indexed\n            addr = PostByte();\n            rA = oADD(rA, byteAt(addr));\n        break;\n        case 0xAC: //CMPX indexed\n            addr = PostByte();\n            oCMP16(rX, ReadWord(addr));\n        break;\n\n        case 0xAD: //JSR indexed\n            addr = PostByte();\n            PUSHW(PC);\n            PC=addr;\n        break;\n        case 0xAE: //LDX indexed\n            addr = PostByte();\n            rX = ReadWord(addr);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xAF: //STX indexed\n            addr = PostByte();\n            WriteWord(addr,rX);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n\n\n        case 0xB0: //SUBA extended\n            addr = fetch16();\n            rA = oSUB(rA, byteAt(addr));\n        break;\n        case 0xB1: //CMPA extended\n            addr = fetch16();\n            oCMP(rA, byteAt(addr));\n        break;\n        case 0xB2: //SBCA extended\n            addr = fetch16();\n            rA = oSBC(rA, byteAt(addr));\n        break;\n        case 0xB3: //SUBD extended\n            addr = fetch16();\n            setD(oSUB16(getD(),ReadWord(addr)));\n        break;\n        case 0xB4: //ANDA extended\n            addr = fetch16();\n            rA = oAND(rA, byteAt(addr));\n        break;\n        case 0xB5: //BITA extended\n            addr = fetch16();\n            oAND(rA, byteAt(addr));\n        break;\n        case 0xB6: //LDA extended\n            addr = fetch16();\n            rA = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0xB7: //STA extended\n            addr = fetch16();\n            byteTo(addr,rA);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rA];\n        break;\n        case 0xB8: //EORA extended\n            addr = fetch16();\n            rA = oEOR(rA, byteAt(addr));\n        break;\n        case 0xB9: //ADCA extended\n            addr = fetch16();\n            rA = oADC(rA, byteAt(addr));\n        break;\n        case 0xBA: //ORA extended\n            addr = fetch16();\n            rA = oOR(rA, byteAt(addr));\n        break;\n        case 0xBB: //ADDA extended\n            addr = fetch16();\n            rA = oADD(rA, byteAt(addr));\n        break;\n        case 0xBC: //CMPX extended\n            addr = fetch16();\n            oCMP16(rX, ReadWord(addr));\n        break;\n\n        case 0xBD: //JSR extended\n            addr = fetch16();\n            PUSHW(PC);\n            PC=addr;\n        break;\n        case 0xBE: //LDX extended\n            addr = fetch16();\n            rX = ReadWord(addr);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xBF: //STX extended\n            addr = fetch16();\n            WriteWord(addr,rX);\n            flagsNZ16(rX);\n            CC&=~F_OVERFLOW;\n        break;\n\n        //Regs B, Y\n\n        case 0xC0: //SUBB imm\n            rB = oSUB(rB, fetch());\n        break;\n        case 0xC1: //CMPB imm\n            oCMP(rB, fetch());\n        break;\n        case 0xC2: //SBCB imm\n            rB = oSBC(rB, fetch());\n        break;\n        case 0xC3: //ADDD imm\n            setD(oADD16(getD(),fetch16()));\n        break;\n        case 0xC4: //ANDB imm\n            rB = oAND(rB, fetch());\n        break;\n        case 0xC5: //BITB imm\n            oAND(rB, fetch());\n        break;\n        case 0xC6: //LDB imm\n            rB = fetch();\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xC8: //EORB imm\n            rB = oEOR(rB, fetch());\n        break;\n        case 0xC9: //ADCB imm\n            rB = oADC(rB, fetch());\n        break;\n        case 0xCA: //ORB imm\n            rB = oOR(rB, fetch());\n        break;\n        case 0xCB: //ADDB imm\n            rB = oADD(rB, fetch());\n        break;\n        case 0xCC: //LDD imm\n            addr = fetch16();\n            setD(addr);\n            flagsNZ16(addr);\n            CC&=~F_OVERFLOW;\n        break;\n\n        case 0xCE: //LDU imm\n            rU = fetch16();\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n\n\n        case 0xD0: //SUBB direct\n            addr = dpadd();\n            rB = oSUB(rB, byteAt(addr));\n        break;\n        case 0xD1: //CMPB direct\n            addr = dpadd();\n            oCMP(rB, byteAt(addr));\n        break;\n        case 0xD2: //SBCB direct\n            addr = dpadd();\n            rB = oSBC(rB, byteAt(addr));\n        break;\n        case 0xD3: //ADDD direct\n            addr = dpadd();\n            setD(oADD16(getD(),ReadWord(addr)));\n        break;\n        case 0xD4: //ANDB direct\n            addr = dpadd();\n            rB = oAND(rB, byteAt(addr));\n        break;\n        case 0xD5: //BITB direct\n            addr = dpadd();\n            oAND(rB, byteAt(addr));\n        break;\n        case 0xD6: //LDB direct\n            addr = dpadd();\n            rB = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xD7: //STB direct\n            addr = dpadd();\n            byteTo(addr,rB);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xD8: //EORB direct\n            addr = dpadd();\n            rB = oEOR(rB, byteAt(addr));\n        break;\n        case 0xD9: //ADCB direct\n            addr = dpadd();\n            rB = oADC(rB, byteAt(addr));\n        break;\n        case 0xDA: //ORB direct\n            addr = dpadd();\n            rB = oOR(rB, byteAt(addr));\n        break;\n        case 0xDB: //ADDB direct\n            addr = dpadd();\n            rB = oADD(rB, byteAt(addr));\n        break;\n        case 0xDC: //LDD direct\n            addr = dpadd();\n            pb = ReadWord(addr);\n            setD(pb);\n            flagsNZ16(pb);\n            CC&=~F_OVERFLOW;\n        break;\n\n        case 0xDD: //STD direct\n            addr = dpadd();\n            WriteWord(addr, getD());\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xDE: //LDU direct\n            addr = dpadd();\n            rU = ReadWord(addr);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xDF: //STU direct\n            addr = dpadd();\n            WriteWord(addr,rU);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xE0: //SUBB indexed\n            addr = PostByte();\n            rB = oSUB(rB, byteAt(addr));\n        break;\n        case 0xE1: //CMPB indexed\n            addr = PostByte();\n            oCMP(rB, byteAt(addr));\n        break;\n        case 0xE2: //SBCB indexed\n            addr = PostByte();\n            rB = oSBC(rB, byteAt(addr));\n        break;\n        case 0xE3: //ADDD indexed\n            addr = PostByte();\n            setD(oADD16(getD(),ReadWord(addr)));\n        break;\n        case 0xE4: //ANDB indexed\n            addr = PostByte();\n            rB = oAND(rB, byteAt(addr));\n        break;\n        case 0xE5: //BITB indexed\n            addr = PostByte();\n            oAND(rB, byteAt(addr));\n        break;\n        case 0xE6: //LDB indexed\n            addr = PostByte();\n            rB = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xE7: //STB indexed\n            addr = PostByte();\n            byteTo(addr,rB);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xE8: //EORB indexed\n            addr = PostByte();\n            rB = oEOR(rB, byteAt(addr));\n        break;\n        case 0xE9: //ADCB indexed\n            addr = PostByte();\n            rB = oADC(rB, byteAt(addr));\n        break;\n        case 0xEA: //ORB indexed\n            addr = PostByte();\n            rB = oOR(rB, byteAt(addr));\n        break;\n        case 0xEB: //ADDB indexed\n            addr = PostByte();\n            rB = oADD(rB, byteAt(addr));\n        break;\n        case 0xEC: //LDD indexed\n            addr = PostByte();\n            pb = ReadWord(addr);\n            setD(pb);\n            flagsNZ16(pb);\n            CC&=~F_OVERFLOW;\n        break;\n\n        case 0xED: //STD indexed\n            addr = PostByte();\n            WriteWord(addr, getD());\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xEE: //LDU indexed\n            addr = PostByte();\n            rU = ReadWord(addr);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xEF: //STU indexed\n            addr = PostByte();\n            WriteWord(addr,rU);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n\n\n        case 0xF0: //SUBB extended\n            addr = fetch16();\n            rB = oSUB(rB, byteAt(addr));\n        break;\n        case 0xF1: //CMPB extended\n            addr = fetch16();\n            oCMP(rB, byteAt(addr));\n        break;\n        case 0xF2: //SBCB extended\n            addr = fetch16();\n            rB = oSBC(rB, byteAt(addr));\n        break;\n        case 0xF3: //ADDD extended\n            addr = fetch16();\n            setD(oADD16(getD(),ReadWord(addr)));\n        break;\n        case 0xF4: //ANDB extended\n            addr = fetch16();\n            rB = oAND(rB, byteAt(addr));\n        break;\n        case 0xF5: //BITB extended\n            addr = fetch16();\n            oAND(rB, byteAt(addr));\n        break;\n        case 0xF6: //LDB extended\n            addr = fetch16();\n            rB = byteAt(addr);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xF7: //STB extended\n            addr = fetch16();\n            byteTo(addr,rB);\n            CC&=~(F_ZERO|F_NEGATIVE|F_OVERFLOW);\n            CC |= flagsNZ[rB];\n        break;\n        case 0xF8: //EORB extended\n            addr = fetch16();\n            rB = oEOR(rB, byteAt(addr));\n        break;\n        case 0xF9: //ADCB extended\n            addr = fetch16();\n            rB = oADC(rB, byteAt(addr));\n        break;\n        case 0xFA: //ORB extended\n            addr = fetch16();\n            rB = oOR(rB, byteAt(addr));\n        break;\n        case 0xFB: //ADDB extended\n            addr = fetch16();\n            rB = oADD(rB, byteAt(addr));\n        break;\n        case 0xFC: //LDD extended\n            addr = fetch16();\n            pb = ReadWord(addr);\n            setD(pb);\n            flagsNZ16(pb);\n            CC&=~F_OVERFLOW;\n        break;\n\n        case 0xFD: //STD extended\n            addr = fetch16();\n            WriteWord(addr, getD());\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xFE: //LDU extended\n            addr = fetch16();\n            rU = ReadWord(addr);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n        case 0xFF: //STU extended\n            addr = fetch16();\n            WriteWord(addr,rU);\n            flagsNZ16(rU);\n            CC&=~F_OVERFLOW;\n        break;\n\n        // page 1\n        case 0x10: //page 1\n            {\n                opcode = fetch();\n                T+=cycles2[opcode];\n                switch(opcode) {\n                    case 0x21: //BRN\n                        addr = signed16(fetch16());\n                        break;\n                    case 0x22: //BHI\n                        addr = signed16(fetch16());\n                        if (!(CC&(F_CARRY | F_ZERO))) PC += addr;\n                    break;\n                    case 0x23: //BLS\n                        addr = signed16(fetch16());\n                        if (CC&(F_CARRY | F_ZERO)) PC += addr;\n                    break;\n                    case 0x24: //BCC\n                        addr = signed16(fetch16());\n                        if (!(CC&F_CARRY)) PC += addr;\n                    break;\n                    case 0x25: //BCS\n                        addr = signed16(fetch16());\n                        if (CC&F_CARRY) PC += addr;\n                    break;\n                    case 0x26: //BNE\n                        addr = signed16(fetch16());\n                        if (!(CC&F_ZERO)) PC += addr;\n                    break;\n                    case 0x27: //BEQ\n                        addr = signed16(fetch16());\n                        if (CC&F_ZERO) PC += addr;\n                    break;\n                    case 0x28: //BVC\n                        addr = signed16(fetch16());\n                        if (!(CC&F_OVERFLOW)) PC += addr;\n                    break;\n                    case 0x29: //BVS\n                        addr = signed16(fetch16());\n                        if (CC&F_OVERFLOW) PC += addr;\n                    break;\n                    case 0x2A: //BPL\n                        addr = signed16(fetch16());\n                        if (!(CC&F_NEGATIVE)) PC += addr;\n                    break;\n                    case 0x2B: //BMI\n                        addr = signed16(fetch16());\n                        if (CC&F_NEGATIVE) PC += addr;\n                    break;\n                    case 0x2C: //BGE\n                        addr = signed16(fetch16());\n                        if (!((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2))) PC += addr;\n                    break;\n                    case 0x2D: //BLT\n                        addr = signed16(fetch16());\n                        if ((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2)) PC += addr;\n                    break;\n                    case 0x2E: //BGT\n                        addr = signed16(fetch16());\n                        if (!((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2) || (CC&F_ZERO))) PC += addr;\n                    break;\n                    case 0x2F: //BLE\n                        addr = signed16(fetch16());\n                        if ((CC&F_NEGATIVE) ^ ((CC&F_OVERFLOW)<<2) || (CC&F_ZERO)) PC += addr;\n                    break;\n                    case 0x3f: //SWI2\n                        CC |= F_ENTIRE;\n                        PUSHW(PC);\n                        PUSHW(rU);\n                        PUSHW(rY);\n                        PUSHW(rX);\n                        PUSHB(DP);\n                        PUSHB(rB);\n                        PUSHB(rA);\n                        PUSHB(CC);\n                        CC |= F_IRQMASK | F_FIRQMASK;\n                        PC = ReadWord(vecSWI2);\n                    break;\n                    case 0x83: //CMPD imm\n                        oCMP16(getD(),fetch16());\n                    break;\n                    case 0x8C: //CMPY imm\n                        oCMP16(rY,fetch16());\n                    break;\n                    case 0x8E: //LDY imm\n                        rY = fetch16();\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0x93: //CMPD direct\n                        addr = dpadd();\n                        oCMP16(getD(),ReadWord(addr));\n                    break;\n                    case 0x9C: //CMPY direct\n                        addr = dpadd();\n                        oCMP16(rY,ReadWord(addr));\n                    break;\n                    case 0x9E: //LDY direct\n                        addr = dpadd();\n                        rY = ReadWord(addr);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0x9F: //STY direct\n                        addr = dpadd();\n                        WriteWord(addr,rY);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xA3: //CMPD indexed\n                        addr = PostByte();\n                        oCMP16(getD(),ReadWord(addr));\n                    break;\n                    case 0xAC: //CMPY indexed\n                        addr = PostByte();\n                        oCMP16(rY,ReadWord(addr));\n                    break;\n                    case 0xAE: //LDY indexed\n                        addr = PostByte();\n                        rY = ReadWord(addr);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xAF: //STY indexed\n                        addr = PostByte();\n                        WriteWord(addr,rY);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xB3: //CMPD extended\n                        addr = fetch16();\n                        oCMP16(getD(),ReadWord(addr));\n                    break;\n                    case 0xBC: //CMPY extended\n                        addr = fetch16();\n                        oCMP16(rY,ReadWord(addr));\n                    break;\n                    case 0xBE: //LDY extended\n                        addr = fetch16();\n                        rY = ReadWord(addr);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xBF: //STY extended\n                        addr = fetch16();\n                        WriteWord(addr,rY);\n                        flagsNZ16(rY);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xCE: //LDS imm\n                        rS = fetch16();\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xDE: //LDS direct\n                        addr = dpadd();\n                        rS = ReadWord(addr);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xDF: //STS direct\n                        addr = dpadd();\n                        WriteWord(addr,rS);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xEE: //LDS indexed\n                        addr = PostByte();\n                        rS = ReadWord(addr);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xEF: //STS indexed\n                        addr = PostByte();\n                        WriteWord(addr,rS);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xFE: //LDS extended\n                        addr = fetch16();\n                        rS = ReadWord(addr);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                    case 0xFF: //STS extended\n                        addr = fetch16();\n                        WriteWord(addr,rS);\n                        flagsNZ16(rS);\n                        CC&=~F_OVERFLOW;\n                    break;\n                }\n            }\n        break;\n        // page 2\n        case 0x11: //page 2\n            {\n                opcode = fetch();\n                T+=cycles2[opcode];\n                switch(opcode) {\n                    case 0x3f: //SWI3\n                        CC |= F_ENTIRE;\n                        PUSHW(PC);\n                        PUSHW(rU);\n                        PUSHW(rY);\n                        PUSHW(rX);\n                        PUSHB(DP);\n                        PUSHB(rB);\n                        PUSHB(rA);\n                        PUSHB(CC);\n                        CC |= F_IRQMASK | F_FIRQMASK;\n                        PC = ReadWord(vecSWI3);\n                    break;\n                    case 0x83: //CMPU imm\n                        oCMP16(rU, fetch16());\n                    break;\n                    case 0x8C: //CMPS imm\n                        oCMP16(rS, fetch16());\n                    break;\n                    case 0x93: //CMPU imm\n                        addr = dpadd();\n                        oCMP16(rU, ReadWord(addr));\n                    break;\n                    case 0x9C: //CMPS imm\n                        addr = dpadd();\n                        oCMP16(rS, ReadWord(addr));\n                    break;\n                    case 0xA3: //CMPU imm\n                        addr = PostByte();\n                        oCMP16(rU, ReadWord(addr));\n                    break;\n                    case 0xAC: //CMPS imm\n                        addr = PostByte();\n                        oCMP16(rS, ReadWord(addr));\n                    break;\n                    case 0xB3: //CMPU imm\n                        addr = fetch16();\n                        oCMP16(rU, ReadWord(addr));\n                    break;\n                    case 0xBC: //CMPS imm\n                        addr = fetch16();\n                        oCMP16(rS, ReadWord(addr));\n                    break;\n\n                }\n            }\n        break;\n\n\n    }\n\n    rA &= 0xff;\n    rB &= 0xff;\n    CC &= 0xff;\n    DP &= 0xff;\n    rX &= 0xffff;\n    rY &= 0xffff;\n    rU &= 0xffff;\n    rS &= 0xffff;\n    PC &= 0xffff;\n    return T-oldT;\n\n};\n\nvar reset = function(){\n    PC = ReadWord(vecRESET);\n    DP = 0;\n    CC |= F_FIRQMASK | F_IRQMASK;\n    T=0;\n    rA=rB=DP=rX=rY=rU=rS=0;\n};\n\n//---------- Disassembler\n\n/*\nILLEGAL 0\nDIRECT 1\nINHERENT 2\nBRANCH_REL_16 3\nIMMEDIAT_8 4\nBRANCH_REL_8 5\nINDEXED 6\nEXTENDED 7\nIMMEDIAT_16 8\n\nPSHS 10\nPSHU 11\n\nEXG, TFR 20\n*/\nvar ds = [\n[2,  1,\"NEG\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[2,  1,\"COM\"],\n[2,  1,\"LSR\"],\n[1,  0,\"???\"],\n[2,  1,\"ROR\"],\n[2,  1,\"ASR\"],\n[2,  1,\"LSL\"],\n[2,  1,\"ROL\"],\n[2,  1,\"DEC\"],\n[1,  0,\"???\"],\n[2,  1,\"INC\"],\n[2,  1,\"TST\"],\n[2,  1,\"JMP\"],\n[2,  1,\"CLR\"],\n[1,  0,\"Prefix\"],\n[1,  0,\"Prefix\"],\n[1,  2,\"NOP\"],\n[1,  2,\"SYNC\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[3,  3,\"LBRA\"],\n[3,  3,\"LBSR\"],\n[1,  0,\"???\"],\n[1,  2,\"DAA\"],\n[2,  4,\"ORCC\"],\n[1,  0,\"???\"],\n[2,  4,\"ANDCC\"],\n[1,  2,\"SEX\"],\n[2,  20,\"EXG\"],\n[2,  20,\"TFR\"],\n[2,  5,\"BRA\"],\n[2,  5,\"BRN\"],\n[2,  5,\"BHI\"],\n[2,  5,\"BLS\"],\n[2,  5,\"BCC\"],\n[2,  5,\"BCS\"],\n[2,  5,\"BNE\"],\n[2,  5,\"BEQ\"],\n[2,  5,\"BVC\"],\n[2,  5,\"BVS\"],\n[2,  5,\"BPL\"],\n[2,  5,\"BMI\"],\n[2,  5,\"BGE\"],\n[2,  5,\"BLT\"],\n[2,  5,\"BGT\"],\n[2,  5,\"BLE\"],\n[2,  6,\"LEAX\"],\n[2,  6,\"LEAY\"],\n[2,  6,\"LEAS\"],\n[2,  6,\"LEAU\"],\n[2,  10,\"PSHS\"],\n[2,  10,\"PULS\"],\n[2,  11,\"PSHU\"],\n[2,  11,\"PULU\"],\n[1,  0,\"???\"],\n[1,  2,\"RTS\"],\n[1,  2,\"ABX\"],\n[1,  2,\"RTI\"],\n[2,  2,\"CWAI\"],\n[1,  2,\"MUL\"],\n[1,  2,\"RESET\"],\n[1,  2,\"SWI1\"],\n[1,  2,\"NEGA\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[1,  2,\"COMA\"],\n[1,  2,\"LSRA\"],\n[1,  0,\"???\"],\n[1,  2,\"RORA\"],\n[1,  2,\"ASRA\"],\n[1,  2,\"ASLA\"],\n[1,  2,\"ROLA\"],\n[1,  2,\"DECA\"],\n[1,  0,\"???\"],\n[1,  2,\"INCA\"],\n[1,  2,\"TSTA\"],\n[1,  0,\"???\"],\n[1,  2,\"CLRA\"],\n[1,  2,\"NEGB\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[1,  2,\"COMB\"],\n[1,  2,\"LSRB\"],\n[1,  0,\"???\"],\n[1,  2,\"RORB\"],\n[1,  2,\"ASRB\"],\n[1,  2,\"ASLB\"],\n[1,  2,\"ROLB\"],\n[1,  2,\"DECB\"],\n[1,  0,\"???\"],\n[1,  2,\"INCB\"],\n[1,  2,\"TSTB\"],\n[1,  0,\"???\"],\n[1,  2,\"CLRB\"],\n[2,  6,\"NEG\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[2,  6,\"COM\"],\n[2,  6,\"LSR\"],\n[1,  0,\"???\"],\n[2,  6,\"ROR\"],\n[2,  6,\"ASR\"],\n[2,  6,\"LSL\"],\n[2,  6,\"ROL\"],\n[2,  6,\"DEC\"],\n[1,  0,\"???\"],\n[2,  6,\"INC\"],\n[2,  6,\"TST\"],\n[2,  6,\"JMP\"],\n[2,  6,\"CLR\"],\n[3,  7,\"NEG\"],\n[1,  0,\"???\"],\n[1,  0,\"???\"],\n[3,  7,\"COM\"],\n[3,  7,\"LSR\"],\n[1,  0,\"???\"],\n[3,  7,\"ROR\"],\n[3,  7,\"ASR\"],\n[3,  7,\"LSL\"],\n[3,  7,\"ROL\"],\n[3,  7,\"DEC\"],\n[1,  0,\"???\"],\n[3,  7,\"INC\"],\n[3,  7,\"TST\"],\n[3,  7,\"JMP\"],\n[3,  7,\"CLR\"],\n[2,  4,\"SUBA\"],\n[2,  4,\"CMPA\"],\n[2,  4,\"SBCA\"],\n[3,  8,\"SUBD\"],\n[2,  4,\"ANDA\"],\n[2,  4,\"BITA\"],\n[2,  4,\"LDA\"],\n[1,  0,\"???\"],\n[2,  4,\"EORA\"],\n[2,  4,\"ADCA\"],\n[2,  4,\"ORA\"],\n[2,  4,\"ADDA\"],\n[3,  8,\"CMPX\"],\n[2,  5,\"BSR\"],\n[3,  8,\"LDX\"],\n[1,  0,\"???\"],\n[2,  1,\"SUBA\"],\n[2,  1,\"CMPA\"],\n[2,  1,\"SBCA\"],\n[2,  1,\"SUBd\"],\n[2,  1,\"ANDA\"],\n[2,  1,\"BITA\"],\n[2,  1,\"LDA\"],\n[2,  1,\"STA\"],\n[2,  1,\"EORA\"],\n[2,  1,\"ADCA\"],\n[2,  1,\"ORA\"],\n[2,  1,\"ADDA\"],\n[2,  1,\"CMPX\"],\n[2,  1,\"JSR\"],\n[2,  1,\"LDX\"],\n[2,  1,\"STX\"],\n[2,  6,\"SUBA\"],\n[2,  6,\"CMPA\"],\n[2,  6,\"SBCA\"],\n[2,  6,\"SUBD\"],\n[2,  6,\"ANDA\"],\n[2,  6,\"BITA\"],\n[2,  6,\"LDA\"],\n[2,  6,\"STA\"],\n[2,  6,\"EORA\"],\n[2,  6,\"ADCA\"],\n[2,  6,\"ORA\"],\n[2,  6,\"ADDA\"],\n[2,  6,\"CMPX\"],\n[2,  6,\"JSR\"],\n[2,  6,\"LDX\"],\n[2,  6,\"STX\"],\n[3,  7,\"SUBA\"],\n[3,  7,\"CMPA\"],\n[3,  7,\"SBCA\"],\n[3,  7,\"SUBD\"],\n[3,  7,\"ANDA\"],\n[3,  7,\"BITA\"],\n[3,  7,\"LDA\"],\n[3,  7,\"STA\"],\n[3,  7,\"EORA\"],\n[3,  7,\"ADCA\"],\n[3,  7,\"ORA\"],\n[3,  7,\"ADDA\"],\n[3,  7,\"CMPX\"],\n[3,  7,\"JSR\"],\n[3,  7,\"LDX\"],\n[3,  7,\"STX\"],\n[2,  4,\"SUBB\"],\n[2,  4,\"CMPB\"],\n[2,  4,\"SBCB\"],\n[3,  8,\"ADDD\"],\n[2,  4,\"ANDB\"],\n[2,  4,\"BITB\"],\n[2,  4,\"LDB\"],\n[1,  0,\"???\"],\n[2,  4,\"EORB\"],\n[2,  4,\"ADCB\"],\n[2,  4,\"ORB\"],\n[2,  4,\"ADDB\"],\n[3,  8,\"LDD\"],\n[1,  0,\"???\"],\n[3,  8,\"LDU\"],\n[1,  0,\"???\"],\n[2,  1,\"SUBB\"],\n[2,  1,\"CMPB\"],\n[2,  1,\"SBCB\"],\n[2,  1,\"ADDD\"],\n[2,  1,\"ANDB\"],\n[2,  1,\"BITB\"],\n[2,  1,\"LDB\"],\n[2,  1,\"STB\"],\n[2,  1,\"EORB\"],\n[2,  1,\"ADCB\"],\n[2,  1,\"ORB \"],\n[2,  1,\"ADDB\"],\n[2,  1,\"LDD \"],\n[2,  1,\"STD \"],\n[2,  1,\"LDU \"],\n[2,  1,\"STU \"],\n[2,  6,\"SUBB\"],\n[2,  6,\"CMPB\"],\n[2,  6,\"SBCB\"],\n[2,  6,\"ADDD\"],\n[2,  6,\"ANDB\"],\n[2,  6,\"BITB\"],\n[2,  6,\"LDB\"],\n[2,  6,\"STB\"],\n[2,  6,\"EORB\"],\n[2,  6,\"ADCB\"],\n[2,  6,\"ORB\"],\n[2,  6,\"ADDB\"],\n[2,  6,\"LDD\"],\n[2,  6,\"STD\"],\n[2,  6,\"LDU\"],\n[2,  6,\"STU\"],\n[3,  7,\"SUBB\"],\n[3,  7,\"CMPB\"],\n[3,  7,\"SBCB\"],\n[3,  7,\"ADDD\"],\n[3,  7,\"ANDB\"],\n[3,  7,\"BITB\"],\n[3,  7,\"LDB\"],\n[3,  7,\"STB\"],\n[3,  7,\"EORB\"],\n[3,  7,\"ADCB\"],\n[3,  7,\"ORB\"],\n[3,  7,\"ADDB\"],\n[3,  7,\"LDD\"],\n[3,  7,\"STD\"],\n[3,  7,\"LDU\"],\n[3,  7,\"STU\"]\n];\n\nvar ds11 = {\n0x3F: [2,2,\"SWI3\"],\n0x83: [4,8,\"CMPU\"],\n0x8C: [4,8,\"CMPS\"],\n0x93: [3,1,\"CMPU\"],\n0x9C: [3,1,\"CMPS\"],\n0xA3: [3,6,\"CMPU\"],\n0xAC: [3,6,\"CMPS\"],\n0xB3: [4,7,\"CMPU\"],\n0xBC: [4,7,\"CMPS\"]\n};\n\nvar ds10 = {\n0x21:[5,3,\"LBRN\"],\n0x22:[5,3,\"LBHI\"],\n0x23:[5,3,\"LBLS\"],\n0x24:[5,3,\"LBCC\"],\n0x25:[5,3,\"LBCS\"],\n0x26:[5,3,\"LBNE\"],\n0x27:[5,3,\"LBEQ\"],\n0x28:[5,3,\"LBVC\"],\n0x29:[5,3,\"LBVS\"],\n0x2a:[5,3,\"LBPL\"],\n0x2b:[5,3,\"LBMI\"],\n0x2c:[5,3,\"LBGE\"],\n0x2d:[5,3,\"LBLT\"],\n0x2e:[5,3,\"LBGT\"],\n0x2f:[5,3,\"LBLE\"],\n0x3F:[2,2,\"SWI2\"],\n0x83:[4,8,\"CMPD\"],\n0x8C:[4,8,\"CMPY\"],\n0x8E:[4,8,\"LDY\"],\n0x93:[3,1,\"CMPD\"],\n0x9C:[3,1,\"CMPY\"],\n0x9E:[3,1,\"LDY\"],\n0x9F:[3,1,\"STY\"],\n0xA3:[3,6,\"CMPD\"],\n0xAC:[3,6,\"CMPY\"],\n0xAE:[3,6,\"LDY\"],\n0xAF:[3,6,\"STY\"],\n0xB3:[4,7,\"CMPD\"],\n0xBC:[4,7,\"CMPY\"],\n0xBE:[4,7,\"LDY\"],\n0xBF:[4,7,\"STY\"],\n0xCE:[4,8,\"LDS\"],\n0xDE:[3,1,\"LDS\"],\n0xDF:[3,1,\"STS\"],\n0xEE:[3,6,\"LDS\"],\n0xEF:[3,6,\"STS\"],\n0xFE:[4,7,\"LDS\"],\n0xFF:[4,7,\"STS\"]\n};\n/*\nILLEGAL 0\nDIRECT 1\nINHERENT 2\nBRANCH_REL_16 3\nIMMEDIAT_8 4\nBRANCH_REL_8 5\nINDEXED 6\nEXTENDED 7\nIMMEDIAT_16 8\n*/\n\nvar disasm = function(i,a,b,c,d,pc) {\n    var toHexN = function(n,d) {\n      var s = n.toString(16);\n      while (s.length <d) {s = '0'+s;}\n      return s.toUpperCase();\n    };\n\n    var toHex2 = function(n) {return toHexN(n & 0xff,2);};\n    var toHex4 = function(n) {return toHexN(n,4);};\n    var rx,ro,j;\n      var sx = ds[i];\n      if (i===0x10) {\n        sx = ds10[a];\n        if (sx===undefined) {\n            return [\"???\",2];\n        }\n        i=a;a=b;b=c;c=d;\n      }\n      if (i===0x11) {\n        sx = ds11[a];\n        if (sx===undefined) {\n            return [\"???\",2];\n        }\n        i=a;a=b;b=c;c=d;\n      }\n      var bytes = sx[0] as number;\n      var mode = sx[1] as number;\n      var mnemo = sx[2];\n\n      switch (mode) {\n        case 0: //invalid\n            break;\n        case 1: //direct page\n            mnemo+=\"\\t$\"+toHex2(a); break;\n        case 2: // inherent\n            break;\n        case 3: //brel16\n            mnemo+=\"\\t#$\"+toHex4((a*256+b)<32768 ? (a*256+b+pc):(a*256+b+pc-65536)); break;\n        case 4: //imm8\n            mnemo+=\"\\t#$\"+toHex2(a); break;\n        case 5: //brel8\n            mnemo+=\"\\t#$\"+toHex4((a)<128 ? (a+pc+2):(a+pc-254)); break;\n        case 6: //indexed, postbyte etc.\n            mnemo+='\\t';\n            var pb = a;\n            var ixr = [\"X\",\"Y\",\"U\",\"S\"][(pb & 0x60)>>5];\n            if (!(pb & 0x80)) {\n                //direct5\n                var disp = pb & 0x1f;\n                if (disp>15) disp = disp-32;\n                mnemo+=disp+','+ixr;\n                break;\n            }\n            var ind = pb & 0x10;\n            var mod = pb & 0x0f;\n            var ofs8 = (b>127)?(b-256):b;\n            var ofs16 = ((b*256+c)>32767)?((b*256+c)-65536):(b*256+c);\n            if (!ind) {\n                switch (mod) {\n                    case 0: mnemo += \",\"+ixr+'+'; break;\n                    case 1: mnemo += \",\"+ixr+'++'; break;\n                    case 2: mnemo += \",-\"+ixr; break;\n                    case 3: mnemo += \",--\"+ixr; break;\n                    case 4: mnemo += \",\"+ixr; break;\n                    case 5: mnemo += \"B,\"+ixr; break;\n                    case 6: mnemo += \"A,\"+ixr; break;\n                    case 7: mnemo += \"???\"; break;\n                    case 8: mnemo += ofs8+\",\"+ixr; bytes++; break;\n                    case 9: mnemo += ofs16+\",\"+ixr; bytes+=2; break;\n                    case 10: mnemo += \"???\"; break;\n                    case 11: mnemo += \"D,\"+ixr; break;\n                    case 12: mnemo += ofs8+\",PC\"; bytes++; break;\n                    case 13: mnemo += ofs16+\",PC\"; bytes+=2; break;\n                    case 14: mnemo += \"???\"; break;\n                    case 15: mnemo += \"$\"+toHex4((b*256+c)); bytes+=2; break;\n                }\n            }  else {\n                switch (mod) {\n                    case 0: mnemo += \"???\"; break;\n                    case 1: mnemo += \"[,\"+ixr+'++]'; break;\n                    case 2: mnemo += \"???\"; break;\n                    case 3: mnemo += \"[,--\"+ixr+']'; break;\n                    case 4: mnemo += \"[,\"+ixr+']'; break;\n                    case 5: mnemo += \"[B,\"+ixr+']'; break;\n                    case 6: mnemo += \"[A,\"+ixr+']'; break;\n                    case 7: mnemo += \"???\"; break;\n                    case 8: mnemo += \"[\"+ofs8+\",\"+ixr+']'; bytes++; break;\n                    case 9: mnemo += \"[\"+ofs16+\",\"+ixr+']'; bytes+=2; break;\n                    case 10: mnemo += \"???\"; break;\n                    case 11: mnemo += \"[D,\"+ixr+']'; break;\n                    case 12: mnemo += \"[\"+ofs8+\",PC]\"; bytes++; break;\n                    case 13: mnemo += \"[\"+ofs16+\",PC]\"; bytes+=2; break;\n                    case 14: mnemo += \"???\"; break;\n                    case 15: mnemo += \"[$\"+toHex4((b*256+c))+']'; bytes+=2; break;\n                }\n            }\n\n            break;\n        case 7: //extended\n            mnemo+=\"\\t$\"+toHex4(a*256+b); break;\n        case 8: //imm16\n            mnemo+=\"\\t#$\"+toHex4(a*256+b); break;\n\n        case 10: //pshs, puls\n            rx = ['PC','U','Y','X','DP','B','A','CC'];\n            ro = [];\n            for (j=0;j<8;j++) {\n                if ((a & 1)!==0) {ro.push(rx[7-j]);}\n                a>>=1;\n            }\n            mnemo += '\\t'+ro.join(',');\n            break;\n        case 11: //pshs, puls\n            rx = ['PC','S','Y','X','DP','B','A','CC'];\n            ro = [];\n            for (j=0;j<8;j++) {\n                if ((a & 1)!==0) {ro.push(rx[7-j]);}\n                a>>=1;\n            }\n            mnemo += '\\t'+ro.join(',');\n            break;\n        case 20: //TFR etc\n            rx = ['D','X','Y','U','S','PC','?','?','A','B','CC','DP','?','?','?','?'];\n            mnemo += '\\t'+rx[a>>4]+','+rx[a&0x0f];\n            break;\n      }\n\n      return {line:mnemo,nbytes:bytes};\n    };\n\n\n//---------- Exports\n\nreturn {\n    steps: function(Ts){\n        //T=0;\n        while (Ts>0){\n            Ts-=step();\n        }\n    },\n    runFrame: function(Tt){\n        while (T<Tt){\n          step();\n        }\n    },\n    advanceInsn: function() {\n        return step();\n    },\n    T:function(){return T;},\n    getTstates:function(){return T;},\n    setTstates:function(t){T=t;},\n    reset: reset,\n    init: function(bt,ba,tck){\n        byteTo=bt;\n        byteAt=ba;\n        ticks=tck;\n        reset();\n    },\n    getPC: function() { return PC; },\n    getSP: function() { return rS; },\n    saveState: function() {\n        return {\n            PC:PC,\n            SP:rS,\n            U:rU,\n            A:rA,\n            B:rB,\n            X:rX,\n            Y:rY,\n            DP:DP,\n            CC:CC,\n            T:T\n        };\n    },\n    loadState: function(s) {\n      PC=s.PC;\n      rS=s.SP;\n      rU=s.U;\n      rA=s.A;\n      rB=s.B;\n      rX=s.X;\n      rY=s.Y;\n      DP=s.DP;\n      CC=s.CC;\n      T=s.T;\n    },\n    firq: function() {\n      if (CC & F_FIRQMASK) return;\n      PUSHW(PC);\n      CC &= ~F_ENTIRE;\n      PUSHB(CC);\n      CC |= F_IRQMASK | F_FIRQMASK;\n      PC = ReadWord(vecFIRQ);\n      T += 9;\n    },\n    interrupt: function() {\n      if (CC & F_IRQMASK) return;\n      PUSHW(PC);\n      PUSHW(rU);\n      PUSHW(rY);\n      PUSHW(rX);\n      PUSHB(DP);\n      PUSHB(rB);\n      PUSHB(rA);\n      CC |= F_ENTIRE;\n      PUSHB(CC);\n      CC |= F_IRQMASK;\n      PC = ReadWord(vecIRQ);\n      T += 18;\n    },\n    nmi: function() {\n      PUSHW(PC);\n      PUSHW(rU);\n      PUSHW(rY);\n      PUSHW(rX);\n      PUSHB(DP);\n      PUSHB(rB);\n      PUSHB(rA);\n      CC |= F_ENTIRE;\n      PUSHB(CC);\n      CC |= F_IRQMASK | F_FIRQMASK;\n      PC = ReadWord(vecNMI);\n      T += 18;\n    },\n    set:function(reg,value) {\n        switch (reg.toUpperCase()) {\n            case \"PC\": PC=value;return;\n            case \"A\": rA=value;return;\n            case \"B\": rB=value;return;\n            case \"X\": rX=value;return;\n            case \"Y\": rY=value;return;\n            case \"SP\": rS=value;return;\n            case \"U\": rU=value;return;\n            case \"FLAGS\": CC=value;return;\n        }\n    },\n    flagsToString: function() {\n        var f='',fx = \"EFHINZVC\";\n        for (var i=0;i<8;i++) {\n            var n = CC&(0x80>>i);\n            if (n===0) {f+=fx[i].toLowerCase();} else {f+=fx[i];}\n        }\n        return f;\n    },\n    disasm: disasm,\n    isStable: function() { return true; }\n};\n\n};\n", "\nimport { CPU, Bus, ClockBased, SavesState, Interruptable } from \"../devices\";\n\n// Copyright 2015 by Paulo Augusto Peccin. See license.txt distributed with this file.\n\nexport var _MOS6502 = function() {\n    var self = this;\n\n    this.powerOn = function() {\n        this.reset();\n    };\n\n    this.powerOff = function() {\n    };\n\n    this.clockPulse = function() {\n        if (!RDY) return;      // TODO Should be ignored in the last cycle of the instruction\n        T++;\n        instruction[T]();\n    };\n\n    this.connectBus = function(aBus) {\n        bus = aBus;\n    };\n\n    this.setRDY = function(boo) {\n        RDY = boo;\n    };\n\n    this.isRDY = function() {\n        return RDY;\n    }\n\n    this.reset = function() {\n        I = 1;\n        T = -1;\n        instruction = [ fetchOpcodeAndDecodeInstruction ];    // Bootstrap instruction\n        PC = bus.read(RESET_VECTOR) | (bus.read(RESET_VECTOR + 1) << 8);\n        this.setRDY(true);\n    };\n\n    // Interfaces\n    var bus : Bus;\n    var RDY : boolean = false;\n\n    // Registers\n    var PC : number = 0;\n    var SP : number = 0;\n    var A : number = 0;\n    var X : number = 0;\n    var Y : number = 0;\n\n    // Status Bits\n    var N : number = 0;\n    var V : number = 0;\n    var D : number = 0;\n    var I : number = 0;\n    var Z : number = 0;\n    var C : number = 0;\n\n    // Internal decoding registers\n    var T : number = -1;\n    var opcode : number = -1;\n    var instruction : (() => void)[];\n    var data : number = 0;\n    var AD : number = 0;\n    var BA : number = 0;\n    var BALCrossed : boolean = false;\n    var IA : number = 0;\n    var branchOffset : number = 0;\n    var branchOffsetCrossAdjust : number = 0;\n\n    // Vectors\n    const NMI_VECTOR = 0xfffa;\n    const RESET_VECTOR = 0xfffc;\n    const IRQ_VECTOR = 0xfffe;\n\n    // Index registers names\n    const rX = 0;\n    const rY = 1;\n\n    // Status bits names\n    const bN = 7;\n    const bV = 6;\n    // const bE = 5;\t// Not used\n    // const bB = 4;\t// Not used\n    // const bD = 3;  // Not used\n    // const bI = 2;  // Not used\n    const bZ = 1;\n    const bC = 0;\n\n    // Auxiliary variables\n    // TODO\n    //noinspection JSUnusedGlobalSymbols\n    this.debug = false;\n    //noinspection JSUnusedGlobalSymbols\n    this.trace = false;\n\n\n    // Internal operations\n\n    var fetchOpcodeAndDecodeInstruction = function() {\n        opcode = bus.read(PC);\n        instruction = instructions[opcode];\n        T = 0;\n\n        // if (self.trace) self.breakpoint(\"TRACE\");\n        // console.log(\"PC: \" + PC + \", op: \" + opcode + \": \" + opcodes[opcode]);\n\n        PC++;\n    };\n\n    var fetchNextOpcode = fetchOpcodeAndDecodeInstruction;\n\n    var fetchOpcodeAndDiscard = function() {\n        bus.read(PC);\n    };\n\n    var fetchBranchOffset = function() {\n        branchOffset = bus.read(PC);\n        PC++;\n    };\n\n    var fetchADL = function() {\n        AD = bus.read(PC);\n        PC++;\n    };\n\n    var fetchADH = function() {\n        AD |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var fetchADLFromBA = function() {\n        AD = bus.read(BA);\n    };\n\n    var fetchADHFromBA = function() {\n        AD |= bus.read(BA) << 8;\n    };\n\n    var fetchBAL = function() {\n        BA = bus.read(PC);\n        PC++;\n    };\n\n    var fetchBAH = function() {\n        BA |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var fetchBALFromIA = function() {\n        BA = bus.read(IA);\n    };\n\n    var fetchBAHFromIA = function() {\n        BA |= bus.read(IA) << 8;\n    };\n\n    var addXtoBAL = function() {\n        var low = (BA & 255) + X;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var addYtoBAL = function() {\n        var low = (BA & 255) + Y;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var add1toBAL = function() {\n        var low = (BA & 255) + 1;\n        BALCrossed = low > 255;\n        BA = (BA & 0xff00) | (low & 255);\n    };\n\n    var add1toBAHifBALCrossed = function() {\n        if (BALCrossed)\n            BA = (BA + 0x0100) & 0xffff;\n    };\n\n    var fetchIAL = function() {\n        IA = bus.read(PC);\n        PC++;\n    };\n\n    var fetchIAH = function() {\n        IA |= bus.read(PC) << 8;\n        PC++;\n    };\n\n    var add1toIAL = function() {\n        var low = (IA & 255) + 1;\n        IA = (IA & 0xff00) | (low & 255);\n    };\n\n    var fetchDataFromImmediate = function() {\n        data = bus.read(PC);\n        PC++;\n    };\n\n    var fetchDataFromAD = function() {\n        data = bus.read(AD);\n    };\n\n    var fetchDataFromBA = function() {\n        data = bus.read(BA);\n    };\n\n    var writeDataToAD = function() {\n        bus.write(AD, data);\n    };\n\n    var writeDataToBA = function() {\n        bus.write(BA, data);\n    };\n\n    var addBranchOffsetToPCL = function() {\n        var oldLow = (PC & 0x00ff);\n        var newLow = (oldLow + branchOffset) & 255;\n        // Negative offset?\n        if (branchOffset > 127)\n            branchOffsetCrossAdjust = (newLow > oldLow) ? -0x0100 : 0;\n        else\n            branchOffsetCrossAdjust = (newLow < oldLow) ? 0x0100 : 0;\n        PC = (PC & 0xff00) | newLow;\n    };\n\n    var adjustPCHForBranchOffsetCross = function() {\n        PC = (PC + branchOffsetCrossAdjust) & 0xffff;\n    };\n\n    var setZ = function(val) {\n        Z = (val === 0) ? 1 : 0;\n    };\n\n    var setN = function(val) {\n        N = (val & 0x080) ? 1 : 0;\n    };\n\n    var setV = function(boo) {\n        V = boo ? 1 : 0;\n    };\n\n    var setC = function(boo) {\n        C = boo ? 1 : 0;\n    };\n\n    var popFromStack = function() {\n        SP = (SP + 1) & 255;\n        return bus.read(0x0100 + SP);\n    };\n\n    var peekFromStack = function() {\n        return bus.read(0x0100 + SP);\n    };\n\n    var pushToStack = function(val) {\n        bus.write(0x0100 + SP, val);\n        SP = (SP - 1) & 255;\n    };\n\n    var getStatusBits = function() {\n        return N << 7 | V << 6 | 0x30                 // Always push with E (bit 5) and B (bit 4) ON\n            |  D << 3 | I << 2 | Z << 1 | C;\n    };\n\n    var setStatusBits = function(val) {\n        N = val >>> 7; V = val >>> 6 & 1;             // E and B flags actually do not exist as real flags, so ignore\n        D = val >>> 3 & 1; I = val >>> 2 & 1; Z = val >>> 1 & 1; C = val & 1;\n    };\n\n    var illegalOpcode = function(op) {\n        if (self.debug) self.breakpoint(\"Illegal Opcode: \" + op);\n    };\n\n\n    // Addressing routines\n\n    var implied = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var immediateRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var zeroPageRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var absoluteRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var indirectXRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            fetchDataFromAD,\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var absoluteIndexedRead = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                function() {\n                    if (BALCrossed) {\n                        fetchDataFromBA();\n                    } else {\n                        operation();\n                        fetchNextOpcode();\n                    }\n                },\n                function() {\n                    operation();\n                    fetchNextOpcode();\n                }\n            ];\n        };\n    };\n\n    var zeroPageIndexedRead = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                },\n                function() {\n                    operation();\n                    fetchNextOpcode();\n                }\n            ];\n        };\n    };\n\n    var indirectYRead = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            function() {\n                if(BALCrossed) {\n                    fetchDataFromBA();\n                } else {\n                    operation();\n                    fetchNextOpcode();\n                }\n            },\n            function() {\n                operation();\n                fetchNextOpcode();\n            }\n        ];\n    };\n\n    var zeroPageWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var indirectXWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteIndexedWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function() {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                function() {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var zeroPageIndexedWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function() {\n                    addIndex();\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var indirectYWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            function() {\n                operation();\n                writeDataToBA();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n\n    var zeroPageReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,                        // ADH will be zero\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var absoluteReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var zeroPageIndexedReadModifyWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,                        // BAH will be zero\n                fetchDataFromBA,\n                function () {\n                    addIndex();\n                    fetchDataFromBA();\n                },\n                writeDataToBA,\n                function () {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var absoluteIndexedReadModifyWrite = function(index) {\n        var addIndex = index === rX ? addXtoBAL : addYtoBAL;\n        return function(operation) {\n            return [\n                fetchOpcodeAndDecodeInstruction,\n                fetchBAL,\n                fetchBAH,\n                function () {\n                    addIndex();\n                    fetchDataFromBA();\n                    add1toBAHifBALCrossed();\n                },\n                fetchDataFromBA,\n                writeDataToBA,\n                function () {\n                    operation();\n                    writeDataToBA();\n                },\n                fetchNextOpcode\n            ];\n        };\n    };\n\n    var indirectXReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBAL,                        // BAH will be zero\n            fetchDataFromBA,\n            function() {\n                addXtoBAL();\n                fetchADLFromBA();\n            },\n            function() {\n                add1toBAL();\n                fetchADHFromBA();\n            },\n            fetchDataFromAD,\n            writeDataToAD,\n            function() {\n                operation();\n                writeDataToAD();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n    var indirectYReadModifyWrite = function(operation) {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() {\n                addYtoBAL();\n                fetchDataFromBA();\n                add1toBAHifBALCrossed();\n            },\n            fetchDataFromBA,\n            writeDataToBA,\n            function() {\n                operation();\n                writeDataToBA();\n            },\n            fetchNextOpcode\n        ];\n    };\n\n\n    // Instructions  ========================================================================================\n\n    // Complete instruction set\n    var opcodes =      new Array(256);\n    var instructions = new Array(256);\n\n    opcodes[0x00] = \"BRK\";  instructions[0x00] = BRK();\n    opcodes[0x01] = \"ORA\";  instructions[0x01] = ORA(indirectXRead);\n    opcodes[0x02] = \"uKIL\"; instructions[0x02] = uKIL();\n    opcodes[0x03] = \"uSLO\"; instructions[0x03] = uSLO(indirectXReadModifyWrite);\n    opcodes[0x04] = \"uNOP\"; instructions[0x04] = uNOP(zeroPageRead);\n    opcodes[0x05] = \"ORA\";  instructions[0x05] = ORA(zeroPageRead);\n    opcodes[0x06] = \"ASL\";  instructions[0x06] = ASL(zeroPageReadModifyWrite);\n    opcodes[0x07] = \"uSLO\"; instructions[0x07] = uSLO(zeroPageReadModifyWrite);\n    opcodes[0x08] = \"PHP\";  instructions[0x08] = PHP();\n    opcodes[0x09] = \"ORA\";  instructions[0x09] = ORA(immediateRead);\n    opcodes[0x0a] = \"ASL\";  instructions[0x0a] = ASL_ACC();\n    opcodes[0x0b] = \"uANC\"; instructions[0x0b] = uANC(immediateRead);\n    opcodes[0x0c] = \"uNOP\"; instructions[0x0c] = uNOP(absoluteRead);\n    opcodes[0x0d] = \"ORA\";  instructions[0x0d] = ORA(absoluteRead);\n    opcodes[0x0e] = \"ASL\";  instructions[0x0e] = ASL(absoluteReadModifyWrite);\n    opcodes[0x0f] = \"uSLO\"; instructions[0x0f] = uSLO(absoluteReadModifyWrite);\n    opcodes[0x10] = \"BPL\";  instructions[0x10] = Bxx(bN, 0);                 // BPL\n    opcodes[0x11] = \"ORA\";  instructions[0x11] = ORA(indirectYRead);\n    opcodes[0x12] = \"uKIL\"; instructions[0x12] = uKIL();\n    opcodes[0x13] = \"uSLO\"; instructions[0x13] = uSLO(indirectYReadModifyWrite);\n    opcodes[0x14] = \"uNOP\"; instructions[0x14] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x15] = \"ORA\";  instructions[0x15] = ORA(zeroPageIndexedRead(rX));\n    opcodes[0x16] = \"ASL\";  instructions[0x16] = ASL(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x17] = \"uSLO\"; instructions[0x17] = uSLO(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x18] = \"CLC\";  instructions[0x18] = CLC();\n    opcodes[0x19] = \"ORA\";  instructions[0x19] = ORA(absoluteIndexedRead(rY));\n    opcodes[0x1a] = \"uNOP\"; instructions[0x1a] = uNOP(implied);\n    opcodes[0x1b] = \"uSLO\"; instructions[0x1b] = uSLO(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x1c] = \"uNOP\"; instructions[0x1c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x1d] = \"ORA\";  instructions[0x1d] = ORA(absoluteIndexedRead(rX));\n    opcodes[0x1e] = \"ASL\";  instructions[0x1e] = ASL(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x1f] = \"uSLO\"; instructions[0x1f] = uSLO(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x20] = \"JSR\";  instructions[0x20] = JSR();\n    opcodes[0x21] = \"AND\";  instructions[0x21] = AND(indirectXRead);\n    opcodes[0x22] = \"uKIL\"; instructions[0x22] = uKIL();\n    opcodes[0x23] = \"uRLA\"; instructions[0x23] = uRLA(indirectXReadModifyWrite);\n    opcodes[0x24] = \"BIT\";  instructions[0x24] = BIT(zeroPageRead);\n    opcodes[0x25] = \"AND\";  instructions[0x25] = AND(zeroPageRead);\n    opcodes[0x26] = \"ROL\";  instructions[0x26] = ROL(zeroPageReadModifyWrite);\n    opcodes[0x27] = \"uRLA\"; instructions[0x27] = uRLA(zeroPageReadModifyWrite);\n    opcodes[0x28] = \"PLP\";  instructions[0x28] = PLP();\n    opcodes[0x29] = \"AND\";  instructions[0x29] = AND(immediateRead);\n    opcodes[0x2a] = \"ROL\";  instructions[0x2a] = ROL_ACC();\n    opcodes[0x2b] = \"uANC\"; instructions[0x2b] = uANC(immediateRead);\n    opcodes[0x2c] = \"BIT\";  instructions[0x2c] = BIT(absoluteRead);\n    opcodes[0x2d] = \"AND\";  instructions[0x2d] = AND(absoluteRead);\n    opcodes[0x2e] = \"ROL\";  instructions[0x2e] = ROL(absoluteReadModifyWrite);\n    opcodes[0x2f] = \"uRLA\"; instructions[0x2f] = uRLA(absoluteReadModifyWrite);\n    opcodes[0x30] = \"BMI\";  instructions[0x30] = Bxx(bN, 1);                 // BMI\n    opcodes[0x31] = \"AND\";  instructions[0x31] = AND(indirectYRead);\n    opcodes[0x32] = \"uKIL\"; instructions[0x32] = uKIL();\n    opcodes[0x33] = \"uRLA\"; instructions[0x33] = uRLA(indirectYReadModifyWrite);\n    opcodes[0x34] = \"uNOP\"; instructions[0x34] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x35] = \"AND\";  instructions[0x35] = AND(zeroPageIndexedRead(rX));\n    opcodes[0x36] = \"ROL\";  instructions[0x36] = ROL(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x37] = \"uRLA\"; instructions[0x37] = uRLA(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x38] = \"SEC\";  instructions[0x38] = SEC();\n    opcodes[0x39] = \"AND\";  instructions[0x39] = AND(absoluteIndexedRead(rY));\n    opcodes[0x3a] = \"uNOP\"; instructions[0x3a] = uNOP(implied);\n    opcodes[0x3b] = \"uRLA\"; instructions[0x3b] = uRLA(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x3c] = \"uNOP\"; instructions[0x3c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x3d] = \"AND\";  instructions[0x3d] = AND(absoluteIndexedRead(rX));\n    opcodes[0x3e] = \"ROL\";  instructions[0x3e] = ROL(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x3f] = \"uRLA\"; instructions[0x3f] = uRLA(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x40] = \"RTI\";  instructions[0x40] = RTI();\n    opcodes[0x41] = \"EOR\";  instructions[0x41] = EOR(indirectXRead);\n    opcodes[0x42] = \"uKIL\"; instructions[0x42] = uKIL();\n    opcodes[0x43] = \"uSRE\"; instructions[0x43] = uSRE(indirectXReadModifyWrite);\n    opcodes[0x44] = \"uNOP\"; instructions[0x44] = uNOP(zeroPageRead);\n    opcodes[0x45] = \"EOR\";  instructions[0x45] = EOR(zeroPageRead);\n    opcodes[0x46] = \"LSR\";  instructions[0x46] = LSR(zeroPageReadModifyWrite);\n    opcodes[0x47] = \"uSRE\"; instructions[0x47] = uSRE(zeroPageReadModifyWrite);\n    opcodes[0x48] = \"PHA\";  instructions[0x48] = PHA();\n    opcodes[0x49] = \"EOR\";  instructions[0x49] = EOR(immediateRead);\n    opcodes[0x4a] = \"LSR\";  instructions[0x4a] = LSR_ACC();\n    opcodes[0x4b] = \"uASR\"; instructions[0x4b] = uASR(immediateRead);\n    opcodes[0x4c] = \"JMP\";  instructions[0x4c] = JMP_ABS();\n    opcodes[0x4d] = \"EOR\";  instructions[0x4d] = EOR(absoluteRead);\n    opcodes[0x4e] = \"LSR\";  instructions[0x4e] = LSR(absoluteReadModifyWrite);\n    opcodes[0x4f] = \"uSRE\"; instructions[0x4f] = uSRE(absoluteReadModifyWrite);\n    opcodes[0x50] = \"BVC\";  instructions[0x50] = Bxx(bV, 0);                 // BVC\n    opcodes[0x51] = \"EOR\";  instructions[0x51] = EOR(indirectYRead);\n    opcodes[0x52] = \"uKIL\"; instructions[0x52] = uKIL();\n    opcodes[0x53] = \"uSRE\"; instructions[0x53] = uSRE(indirectYReadModifyWrite);\n    opcodes[0x54] = \"uNOP\"; instructions[0x54] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x55] = \"EOR\";  instructions[0x55] = EOR(zeroPageIndexedRead(rX));\n    opcodes[0x56] = \"LSR\";  instructions[0x56] = LSR(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x57] = \"uSRE\"; instructions[0x57] = uSRE(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x58] = \"CLI\";  instructions[0x58] = CLI();\n    opcodes[0x59] = \"EOR\";  instructions[0x59] = EOR(absoluteIndexedRead(rY));\n    opcodes[0x5a] = \"uNOP\"; instructions[0x5a] = uNOP(implied);\n    opcodes[0x5b] = \"uSRE\"; instructions[0x5b] = uSRE(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x5c] = \"uNOP\"; instructions[0x5c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x5d] = \"EOR\";  instructions[0x5d] = EOR(absoluteIndexedRead(rX));\n    opcodes[0x5e] = \"LSR\";  instructions[0x5e] = LSR(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x5f] = \"uSRE\"; instructions[0x5f] = uSRE(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x60] = \"RTS\";  instructions[0x60] = RTS();\n    opcodes[0x61] = \"ADC\";  instructions[0x61] = ADC(indirectXRead);\n    opcodes[0x62] = \"uKIL\"; instructions[0x62] = uKIL();\n    opcodes[0x63] = \"uRRA\"; instructions[0x63] = uRRA(indirectXReadModifyWrite);\n    opcodes[0x64] = \"uNOP\"; instructions[0x64] = uNOP(zeroPageRead);\n    opcodes[0x65] = \"ADC\";  instructions[0x65] = ADC(zeroPageRead);\n    opcodes[0x66] = \"ROR\";  instructions[0x66] = ROR(zeroPageReadModifyWrite);\n    opcodes[0x67] = \"uRRA\"; instructions[0x67] = uRRA(zeroPageReadModifyWrite);\n    opcodes[0x68] = \"PLA\";  instructions[0x68] = PLA();\n    opcodes[0x69] = \"ADC\";  instructions[0x69] = ADC(immediateRead);\n    opcodes[0x6a] = \"ROR\";  instructions[0x6a] = ROR_ACC();\n    opcodes[0x6b] = \"uARR\"; instructions[0x6b] = uARR(immediateRead);\n    opcodes[0x6c] = \"JMP\";  instructions[0x6c] = JMP_IND();\n    opcodes[0x6d] = \"ADC\";  instructions[0x6d] = ADC(absoluteRead);\n    opcodes[0x6e] = \"ROR\";  instructions[0x6e] = ROR(absoluteReadModifyWrite);\n    opcodes[0x6f] = \"uRRA\"; instructions[0x6f] = uRRA(absoluteReadModifyWrite);\n    opcodes[0x70] = \"BVS\";  instructions[0x70] = Bxx(bV, 1);                 // BVS\n    opcodes[0x71] = \"ADC\";  instructions[0x71] = ADC(indirectYRead);\n    opcodes[0x72] = \"uKIL\"; instructions[0x72] = uKIL();\n    opcodes[0x73] = \"uRRA\"; instructions[0x73] = uRRA(indirectYReadModifyWrite);\n    opcodes[0x74] = \"uNOP\"; instructions[0x74] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0x75] = \"ADC\";  instructions[0x75] = ADC(zeroPageIndexedRead(rX));\n    opcodes[0x76] = \"ROR\";  instructions[0x76] = ROR(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x77] = \"uRRA\"; instructions[0x77] = uRRA(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0x78] = \"SEI\";  instructions[0x78] = SEI();\n    opcodes[0x79] = \"ADC\";  instructions[0x79] = ADC(absoluteIndexedRead(rY));\n    opcodes[0x7a] = \"uNOP\"; instructions[0x7a] = uNOP(implied);\n    opcodes[0x7b] = \"uRRA\"; instructions[0x7b] = uRRA(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0x7c] = \"uNOP\"; instructions[0x7c] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0x7d] = \"ADC\";  instructions[0x7d] = ADC(absoluteIndexedRead(rX));\n    opcodes[0x7e] = \"ROR\";  instructions[0x7e] = ROR(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x7f] = \"uRRA\"; instructions[0x7f] = uRRA(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0x80] = \"uNOP\"; instructions[0x80] = uNOP(immediateRead);\n    opcodes[0x81] = \"STA\";  instructions[0x81] = STA(indirectXWrite);\n    opcodes[0x82] = \"uNOP\"; instructions[0x82] = uNOP(immediateRead);\n    opcodes[0x83] = \"uSAX\"; instructions[0x83] = uSAX(indirectXWrite);\n    opcodes[0x84] = \"STY\";  instructions[0x84] = STY(zeroPageWrite);\n    opcodes[0x85] = \"STA\";  instructions[0x85] = STA(zeroPageWrite);\n    opcodes[0x86] = \"STX\";  instructions[0x86] = STX(zeroPageWrite);\n    opcodes[0x87] = \"uSAX\"; instructions[0x87] = uSAX(zeroPageWrite);\n    opcodes[0x88] = \"DEY\";  instructions[0x88] = DEY();\n    opcodes[0x89] = \"uNOP\"; instructions[0x89] = uNOP(immediateRead);\n    opcodes[0x8a] = \"TXA\";  instructions[0x8a] = TXA();\n    opcodes[0x8b] = \"uANE\"; instructions[0x8b] = uANE(immediateRead);\n    opcodes[0x8c] = \"STY\";  instructions[0x8c] = STY(absoluteWrite);\n    opcodes[0x8d] = \"STA\";  instructions[0x8d] = STA(absoluteWrite);\n    opcodes[0x8e] = \"STX\";  instructions[0x8e] = STX(absoluteWrite);\n    opcodes[0x8f] = \"uSAX\"; instructions[0x8f] = uSAX(absoluteWrite);\n    opcodes[0x90] = \"BCC\";  instructions[0x90] = Bxx(bC, 0);                 // BCC\n    opcodes[0x91] = \"STA\";  instructions[0x91] = STA(indirectYWrite);\n    opcodes[0x92] = \"uKIL\"; instructions[0x92] = uKIL();\n    opcodes[0x93] = \"uSHA\"; instructions[0x93] = uSHA(indirectYWrite);\n    opcodes[0x94] = \"STY\";  instructions[0x94] = STY(zeroPageIndexedWrite(rX));\n    opcodes[0x95] = \"STA\";  instructions[0x95] = STA(zeroPageIndexedWrite(rX));\n    opcodes[0x96] = \"STX\";  instructions[0x96] = STX(zeroPageIndexedWrite(rY));\n    opcodes[0x97] = \"uSAX\"; instructions[0x97] = uSAX(zeroPageIndexedWrite(rY));\n    opcodes[0x98] = \"TYA\";  instructions[0x98] = TYA();\n    opcodes[0x99] = \"STA\";  instructions[0x99] = STA(absoluteIndexedWrite(rY));\n    opcodes[0x9a] = \"TXS\";  instructions[0x9a] = TXS();\n    opcodes[0x9b] = \"uSHS\"; instructions[0x9b] = uSHS(absoluteIndexedWrite(rY));\n    opcodes[0x9c] = \"uSHY\"; instructions[0x9c] = uSHY(absoluteIndexedWrite(rX));\n    opcodes[0x9d] = \"STA\";  instructions[0x9d] = STA(absoluteIndexedWrite(rX));\n    opcodes[0x9e] = \"uSHX\"; instructions[0x9e] = uSHX(absoluteIndexedWrite(rY));\n    opcodes[0x9f] = \"uSHA\"; instructions[0x9f] = uSHA(absoluteIndexedWrite(rY));\n    opcodes[0xa0] = \"LDY\";  instructions[0xa0] = LDY(immediateRead);\n    opcodes[0xa1] = \"LDA\";  instructions[0xa1] = LDA(indirectXRead);\n    opcodes[0xa2] = \"LDX\";  instructions[0xa2] = LDX(immediateRead);\n    opcodes[0xa3] = \"uLAX\"; instructions[0xa3] = uLAX(indirectXRead);\n    opcodes[0xa4] = \"LDY\";  instructions[0xa4] = LDY(zeroPageRead);\n    opcodes[0xa5] = \"LDA\";  instructions[0xa5] = LDA(zeroPageRead);\n    opcodes[0xa6] = \"LDX\";  instructions[0xa6] = LDX(zeroPageRead);\n    opcodes[0xa7] = \"uLAX\"; instructions[0xa7] = uLAX(zeroPageRead);\n    opcodes[0xa8] = \"TAY\";  instructions[0xa8] = TAY();\n    opcodes[0xa9] = \"LDA\";  instructions[0xa9] = LDA(immediateRead);\n    opcodes[0xaa] = \"TAX\";  instructions[0xaa] = TAX();\n    opcodes[0xab] = \"uLXA\"; instructions[0xab] = uLXA(immediateRead);\n    opcodes[0xac] = \"LDY\";  instructions[0xac] = LDY(absoluteRead);\n    opcodes[0xad] = \"LDA\";  instructions[0xad] = LDA(absoluteRead);\n    opcodes[0xae] = \"LDX\";  instructions[0xae] = LDX(absoluteRead);\n    opcodes[0xaf] = \"uLAX\"; instructions[0xaf] = uLAX(absoluteRead);\n    opcodes[0xb0] = \"BCS\";  instructions[0xb0] = Bxx(bC, 1);                 // BCS\n    opcodes[0xb1] = \"LDA\";  instructions[0xb1] = LDA(indirectYRead);\n    opcodes[0xb2] = \"uKIL\"; instructions[0xb2] = uKIL();\n    opcodes[0xb3] = \"uLAX\"; instructions[0xb3] = uLAX(indirectYRead);\n    opcodes[0xb4] = \"LDY\";  instructions[0xb4] = LDY(zeroPageIndexedRead(rX));\n    opcodes[0xb5] = \"LDA\";  instructions[0xb5] = LDA(zeroPageIndexedRead(rX));\n    opcodes[0xb6] = \"LDX\";  instructions[0xb6] = LDX(zeroPageIndexedRead(rY));\n    opcodes[0xb7] = \"uLAX\"; instructions[0xb7] = uLAX(zeroPageIndexedRead(rY));\n    opcodes[0xb8] = \"CLV\";  instructions[0xb8] = CLV();\n    opcodes[0xb9] = \"LDA\";  instructions[0xb9] = LDA(absoluteIndexedRead(rY));\n    opcodes[0xba] = \"TSX\";  instructions[0xba] = TSX();\n    opcodes[0xbb] = \"uLAS\"; instructions[0xbb] = uLAS(absoluteIndexedRead(rY));\n    opcodes[0xbc] = \"LDY\";  instructions[0xbc] = LDY(absoluteIndexedRead(rX));\n    opcodes[0xbd] = \"LDA\";  instructions[0xbd] = LDA(absoluteIndexedRead(rX));\n    opcodes[0xbe] = \"LDX\";  instructions[0xbe] = LDX(absoluteIndexedRead(rY));\n    opcodes[0xbf] = \"uLAX\"; instructions[0xbf] = uLAX(absoluteIndexedRead(rY));\n    opcodes[0xc0] = \"CPY\";  instructions[0xc0] = CPY(immediateRead);\n    opcodes[0xc1] = \"CMP\";  instructions[0xc1] = CMP(indirectXRead);\n    opcodes[0xc2] = \"uNOP\"; instructions[0xc2] = uNOP(immediateRead);\n    opcodes[0xc3] = \"uDCP\"; instructions[0xc3] = uDCP(indirectXReadModifyWrite);\n    opcodes[0xc4] = \"CPY\";  instructions[0xc4] = CPY(zeroPageRead);\n    opcodes[0xc5] = \"CMP\";  instructions[0xc5] = CMP(zeroPageRead);\n    opcodes[0xc6] = \"DEC\";  instructions[0xc6] = DEC(zeroPageReadModifyWrite);\n    opcodes[0xc7] = \"uDCP\"; instructions[0xc7] = uDCP(zeroPageReadModifyWrite);\n    opcodes[0xc8] = \"INY\";  instructions[0xc8] = INY();\n    opcodes[0xc9] = \"CMP\";  instructions[0xc9] = CMP(immediateRead);\n    opcodes[0xca] = \"DEX\";  instructions[0xca] = DEX();\n    opcodes[0xcb] = \"uSBX\"; instructions[0xcb] = uSBX(immediateRead);\n    opcodes[0xcc] = \"CPY\";  instructions[0xcc] = CPY(absoluteRead);\n    opcodes[0xcd] = \"CMP\";  instructions[0xcd] = CMP(absoluteRead);\n    opcodes[0xce] = \"DEC\";  instructions[0xce] = DEC(absoluteReadModifyWrite);\n    opcodes[0xcf] = \"uDCP\"; instructions[0xcf] = uDCP(absoluteReadModifyWrite);\n    opcodes[0xd0] = \"BNE\";  instructions[0xd0] = Bxx(bZ, 0);                 // BNE\n    opcodes[0xd1] = \"CMP\";  instructions[0xd1] = CMP(indirectYRead);\n    opcodes[0xd2] = \"uKIL\"; instructions[0xd2] = uKIL();\n    opcodes[0xd3] = \"uDCP\"; instructions[0xd3] = uDCP(indirectYReadModifyWrite);\n    opcodes[0xd4] = \"uNOP\"; instructions[0xd4] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0xd5] = \"CMP\";  instructions[0xd5] = CMP(zeroPageIndexedRead(rX));\n    opcodes[0xd6] = \"DEC\";  instructions[0xd6] = DEC(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xd7] = \"uDCP\"; instructions[0xd7] = uDCP(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xd8] = \"CLD\";  instructions[0xd8] = CLD();\n    opcodes[0xd9] = \"CMP\";  instructions[0xd9] = CMP(absoluteIndexedRead(rY));\n    opcodes[0xda] = \"uNOP\"; instructions[0xda] = uNOP(implied);\n    opcodes[0xdb] = \"uDCP\"; instructions[0xdb] = uDCP(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0xdc] = \"uNOP\"; instructions[0xdc] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0xdd] = \"CMP\";  instructions[0xdd] = CMP(absoluteIndexedRead(rX));\n    opcodes[0xde] = \"DEC\";  instructions[0xde] = DEC(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xdf] = \"uDCP\"; instructions[0xdf] = uDCP(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xe0] = \"CPX\";  instructions[0xe0] = CPX(immediateRead);\n    opcodes[0xe1] = \"SBC\";  instructions[0xe1] = SBC(indirectXRead);\n    opcodes[0xe2] = \"uNOP\"; instructions[0xe2] = uNOP(immediateRead);\n    opcodes[0xe3] = \"uISB\"; instructions[0xe3] = uISB(indirectXReadModifyWrite);\n    opcodes[0xe4] = \"CPX\";  instructions[0xe4] = CPX(zeroPageRead);\n    opcodes[0xe5] = \"SBC\";  instructions[0xe5] = SBC(zeroPageRead);\n    opcodes[0xe6] = \"INC\";  instructions[0xe6] = INC(zeroPageReadModifyWrite);\n    opcodes[0xe7] = \"uISB\"; instructions[0xe7] = uISB(zeroPageReadModifyWrite);\n    opcodes[0xe8] = \"INX\";  instructions[0xe8] = INX();\n    opcodes[0xe9] = \"SBC\";  instructions[0xe9] = SBC(immediateRead);\n    opcodes[0xea] = \"NOP\";  instructions[0xea] = NOP();\n    opcodes[0xeb] = \"SBC\";  instructions[0xeb] = SBC(immediateRead);\n    opcodes[0xec] = \"CPX\";  instructions[0xec] = CPX(absoluteRead);\n    opcodes[0xed] = \"SBC\";  instructions[0xed] = SBC(absoluteRead);\n    opcodes[0xee] = \"INC\";  instructions[0xee] = INC(absoluteReadModifyWrite);\n    opcodes[0xef] = \"uISB\"; instructions[0xef] = uISB(absoluteReadModifyWrite);\n    opcodes[0xf0] = \"BEQ\";  instructions[0xf0] = Bxx(bZ, 1);                 // BEQ\n    opcodes[0xf1] = \"SBC\";  instructions[0xf1] = SBC(indirectYRead);\n    opcodes[0xf2] = \"uKIL\"; instructions[0xf2] = uKIL();\n    opcodes[0xf3] = \"uISB\"; instructions[0xf3] = uISB(indirectYReadModifyWrite);\n    opcodes[0xf4] = \"uNOP\"; instructions[0xf4] = uNOP(zeroPageIndexedRead(rX));\n    opcodes[0xf5] = \"SBC\";  instructions[0xf5] = SBC(zeroPageIndexedRead(rX));\n    opcodes[0xf6] = \"INC\";  instructions[0xf6] = INC(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xf7] = \"uISB\"; instructions[0xf7] = uISB(zeroPageIndexedReadModifyWrite(rX));\n    opcodes[0xf8] = \"SED\";  instructions[0xf8] = SED();\n    opcodes[0xf9] = \"SBC\";  instructions[0xf9] = SBC(absoluteIndexedRead(rY));\n    opcodes[0xfa] = \"uNOP\"; instructions[0xfa] = uNOP(implied);\n    opcodes[0xfb] = \"uISB\"; instructions[0xfb] = uISB(absoluteIndexedReadModifyWrite(rY));\n    opcodes[0xfc] = \"uNOP\"; instructions[0xfc] = uNOP(absoluteIndexedRead(rX));\n    opcodes[0xfd] = \"SBC\";  instructions[0xfd] = SBC(absoluteIndexedRead(rX));\n    opcodes[0xfe] = \"INC\";  instructions[0xfe] = INC(absoluteIndexedReadModifyWrite(rX));\n    opcodes[0xff] = \"uISB\"; instructions[0xff] = uISB(absoluteIndexedReadModifyWrite(rX));\n\n\n    // Single Byte instructions\n\n    function ASL_ACC() {\n        return implied(function() {\n            setC(A > 127);\n            A = (A << 1) & 255;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function CLC() {\n        return implied(function() {\n            C = 0;\n        });\n    }\n\n    function CLD() {\n        return implied(function() {\n            D = 0;\n        });\n    }\n\n    function CLI() {\n        return implied(function() {\n            I = 0;\n        });\n    }\n\n    function CLV() {\n        return implied(function() {\n            V = 0;\n        });\n    }\n\n    function DEX() {\n        return implied(function() {\n            X = (X - 1) & 255;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function DEY() {\n        return implied(function() {\n            Y = (Y - 1) & 255;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function INX() {\n        return implied(function() {\n            X = (X + 1) & 255;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function INY() {\n        return implied(function() {\n            Y = (Y + 1) & 255;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function LSR_ACC() {\n        return implied(function() {\n            C = A & 0x01;\n            A >>>= 1;\n            setZ(A);\n            N = 0;\n        });\n    }\n\n    function NOP() {\n        return implied(function() {\n            // nothing\n        });\n    }\n\n    function ROL_ACC() {\n        return implied(function() {\n            var newC = A > 127;\n            A = ((A << 1) | C) & 255;\n            setC(newC);\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function ROR_ACC() {\n        return implied(function() {\n            var newC = A & 0x01;\n            A = (A >>> 1) | (C << 7);\n            setC(newC);\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function SEC() {\n        return implied(function() {\n            C = 1;\n        });\n    }\n\n    function SED() {\n        return implied(function() {\n            D = 1;\n        });\n    }\n\n    function SEI() {\n        return implied(function() {\n            I = 1;\n        });\n    }\n\n    function TAX() {\n        return implied(function() {\n            X = A;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function TAY() {\n        return implied(function() {\n            Y = A;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function TSX() {\n        return implied(function() {\n            X = SP;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function TXA() {\n        return implied(function() {\n            A = X;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function TXS() {\n        return implied(function() {\n            SP = X;\n        });\n    }\n\n    function TYA() {\n        return implied(function() {\n            A = Y;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function uKIL() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            function() {\n                illegalOpcode(\"KIL/HLT/JAM\");\n            },\n            function() {\n                T--;        // Causes the processor to be stuck in this instruction forever\n            }\n        ];\n    }\n\n    function uNOP(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"NOP/DOP\");\n            // nothing\n        });\n    }\n\n\n    // Internal Execution on Memory Data\n\n    function ADC(addressing) {\n        return addressing(function() {\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) + (operand & 15) + C;\n                if (AL > 9) { AL += 6; }\n                var AH = ((A >> 4) + (operand >> 4) + ((AL > 15)?1:0)) << 4;\n                setZ((A + operand + C) & 255);\n                setN(AH);\n                setV(((A ^AH) & ~(A ^ operand)) & 128);\n                if (AH > 0x9f) { AH += 0x60; }\n                setC(AH > 255);\n                A = (AH | (AL & 15)) & 255;\n            } else {\n                var add = A + data + C;\n                setC(add > 255);\n                setV(((A ^ add) & (data ^ add)) & 0x80);\n                A = add & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function AND(addressing) {\n        return addressing(function() {\n            A &= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function BIT(addressing) {\n        return addressing(function() {\n            var par = data;\n            setZ(A & par);\n            setV(par & 0x40);\n            setN(par);\n        });\n    }\n\n    function CMP(addressing) {\n        return addressing(function() {\n            var val = (A - data) & 255;\n            setC(A >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function CPX(addressing) {\n        return addressing(function() {\n            var val = (X - data) & 255;\n            setC(X >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function CPY(addressing) {\n        return addressing(function() {\n            var val = (Y - data) & 255;\n            setC(Y >= data);\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function EOR(addressing) {\n        return addressing(function() {\n            A ^= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function LDA(addressing) {\n        return addressing(function() {\n            A = data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function LDX(addressing) {\n        return addressing(function() {\n            X = data;\n            setZ(X);\n            setN(X);\n        });\n    }\n\n    function LDY(addressing) {\n        return addressing(function() {\n            Y = data;\n            setZ(Y);\n            setN(Y);\n        });\n    }\n\n    function ORA(addressing) {\n        return addressing(function() {\n            A |= data;\n            setZ(A);\n            setN(A);\n        });\n    }\n\n    function SBC(addressing) {\n        return addressing(function() {\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) - (operand & 15) - (1-C);\n                var AH = (A >> 4) - (operand >> 4) - ((AL < 0)?1:0);\n                if (AL < 0) { AL -= 6; }\n                if (AH < 0) { AH -= 6; }\n                var sub = A - operand - (1-C);\n                setC(~sub & 256);\n                setV(((A ^ operand) & (A ^ sub)) & 128);\n                setZ(sub & 255);\n                setN(sub);\n                A = ((AH << 4) | (AL & 15)) & 255;\n            } else {\n                operand = (~data) & 255;\n                sub = A + operand + C;\n                setC(sub > 255);\n                setV(((A ^ sub) & (operand ^ sub) & 0x80));\n                A = sub & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uANC(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ANC\");\n            A &= data;\n            setZ(A);\n            N = C = (A & 0x080) ? 1 : 0;\n        });\n    }\n\n    function uANE(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ANE\");\n            // Exact operation unknown. Do nothing\n        });\n    }\n\n    function uARR(addressing) {\n        // Some sources say flags are affected per ROR, others say its more complex. The complex one is chosen\n        return addressing(function() {\n            illegalOpcode(\"ARR\");\n            var val = A & data;\n            var oldC = C ? 0x80 : 0;\n            val = (val >>> 1) | oldC;\n            A = val;\n            setZ(val);\n            setN(val);\n            var comp = A & 0x60;\n            if (comp == 0x60) \t\t{ C = 1; V = 0; }\n            else if (comp == 0x00) \t{ C = 0; V = 0; }\n            else if (comp == 0x20) \t{ C = 0; V = 1; }\n            else if (comp == 0x40) \t{ C = 1; V = 1; }\n        });\n    }\n\n    function uASR(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ASR\");\n            var val = A & data;\n            C = (val & 0x01);\t\t// bit 0\n            val = val >>> 1;\n            A = val;\n            setZ(val);\n            N = 0;\n        });\n    }\n\n    function uLAS(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"LAS\");\n            var val = SP & data;\n            A = val;\n            X = val;\n            SP = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uLAX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"LAX\");\n            var val = data;\n            A = val;\n            X = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uLXA(addressing) {\n        return addressing(function() {\n            // Some sources say its an OR with $EE then AND with IMM, others exclude the OR,\n            // others exclude both the OR and the AND. Excluding just the OR...\n            illegalOpcode(\"LXA\");\n            var val = A /* | 0xEE) */ & data;\n            A = val;\n            X = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uSBX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SBX\");\n            var par = A & X;\n            var val = data;\n            var newX = (par - val) & 255;\n            X = newX;\n            setC(par >= val);\n            setZ(newX);\n            setN(newX);\n        });\n    }\n\n\n    // Store operations\n\n    function STA(addressing) {\n        return addressing(function() {\n            data = A;\n        });\n    }\n\n    function STX(addressing) {\n        return addressing(function() {\n            data = X;\n        });\n    }\n\n    function STY(addressing) {\n        return addressing(function() {\n            data = Y;\n        });\n    }\n\n    function uSAX(addressing) {\n        return addressing(function() {\n            // Some sources say it would affect N and Z flags, some say it wouldn't. Chose not to affect\n            illegalOpcode(\"SAX\");\n            data = A & X;\n        });\n    }\n\n    function uSHA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHA\");\n            data = A & X & ((BA >>> 8) + 1) & 255; // A & X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHS(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHS\");\n            var val = A & X;\n            SP = val;\n            data = val & ((BA >>> 8) + 1) & 255; // A & X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHX(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHX\");\n            data = X & ((BA >>> 8) + 1) & 255; // X & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n    function uSHY(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SHY\");\n            data = Y & ((BA >>> 8) + 1) & 255; // Y & (High byte of effective address + 1) !!!\n            // data would also be stored BAH if page boundary is crossed. Unobservable, not needed here\n        });\n    }\n\n\n    // Read-Modify-Write operations\n\n    function ASL(addressing) {\n        return addressing(function() {\n            setC(data > 127);\n            var par = (data << 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function DEC(addressing) {\n        return addressing(function() {\n            var par = (data - 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function INC(addressing) {\n        return addressing(function() {\n            var par = (data + 1) & 255;\n            data = par;\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function LSR(addressing) {\n        return addressing(function() {\n            C = data & 0x01;\n            data >>>= 1;\n            setZ(data);\n            N = 0;\n        });\n    }\n\n    function ROL(addressing) {\n        return addressing(function() {\n            var newC = data > 127;\n            var par = ((data << 1) | C) & 255;\n            data = par;\n            setC(newC);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function ROR(addressing) {\n        return addressing(function() {\n            var newC = data & 0x01;\n            var par = (data >>> 1) | (C << 7);\n            data = par;\n            setC(newC);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function uDCP(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"DCP\");\n            var par = (data - 1) & 255;\n            data = par;\n            par = A - par;\n            setC(par >= 0);\n            setZ(par);\n            setN(par);\n        });\n    }\n\n    function uISB(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"ISB\");\n            data = (data + 1) & 255;    // ISB is the same as SBC but incs the operand first\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) - (operand & 15) - (1-C);\n                var AH = (A >> 4) - (operand >> 4) - ((AL < 0)?1:0);\n                if (AL < 0) { AL -= 6; }\n                if (AH < 0) { AH -= 6; }\n                var sub = A - operand - (1-C);\n                setC(~sub & 256);\n                setV(((A ^ operand) & (A ^ sub)) & 128);\n                setZ(sub & 255);\n                setN(sub);\n                A = ((AH << 4) | (AL & 15)) & 255;\n            } else {\n                operand = (~data) & 255;\n                sub = A + operand + C;\n                setC(sub > 255);\n                setV(((A ^ sub) & (operand ^ sub) & 0x80));\n                A = sub & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uRLA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"RLA\");\n            var val = data;\n            var oldC = C;\n            setC(val & 0x80);\t\t// bit 7 was set\n            val = ((val << 1) | oldC) & 255;\n            data = val;\n            A &= val;\n            setZ(val);              // TODO Verify. May be A instead of val in the flags setting\n            setN(val);\n        });\n    }\n\n    function uRRA(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"RRA\");\n            var val = data;\n            var oldC = C ? 0x80 : 0;\n            setC(val & 0x01);\t\t// bit 0 was set\n            val = (val >>> 1) | oldC;\n            data = val;\n            // RRA is the same as ADC from here\n            if (D) {\n                var operand = data;\n                var AL = (A & 15) + (operand & 15) + C;\n                if (AL > 9) { AL += 6; }\n                var AH = ((A >> 4) + (operand >> 4) + ((AL > 15)?1:0)) << 4;\n                setZ((A + operand + C) & 255);\n                setN(AH);\n                setV(((A ^AH) & ~(A ^ operand)) & 128);\n                if (AH > 0x9f) { AH += 0x60; }\n                setC(AH > 255);\n                A = (AH | (AL & 15)) & 255;\n            } else {\n                var add = A + data + C;\n                setC(add > 255);\n                setV(((A ^ add) & (data ^ add)) & 0x80);\n                A = add & 255;\n                setZ(A);\n                setN(A);\n            }\n        });\n    }\n\n    function uSLO(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SLO\");\n            var val = data;\n            setC(val & 0x80);\t\t// bit 7 was set\n            val = (val << 1) & 255;\n            data = val;\n            val = A | val;\n            A = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n    function uSRE(addressing) {\n        return addressing(function() {\n            illegalOpcode(\"SRE\");\n            var val = data;\n            setC(val & 0x01);\t\t// bit 0 was set\n            val = val >>> 1;\n            data = val;\n            val = (A ^ val) & 255;\n            A = val;\n            setZ(val);\n            setN(val);\n        });\n    }\n\n\n    // Miscellaneous operations\n\n    function PHA() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() { pushToStack(A); },\n            fetchNextOpcode\n        ];\n    }\n\n    function PHP() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            function() { pushToStack(getStatusBits()); },\n            fetchNextOpcode\n        ];\n    }\n\n    function PLA() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() {\n                A = popFromStack();\n                setZ(A);\n                setN(A);\n            },\n            fetchNextOpcode\n        ];\n    }\n\n    function PLP() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { setStatusBits(popFromStack()); },\n            fetchNextOpcode\n        ];\n    }\n\n    function JSR() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            peekFromStack,\n            function() { pushToStack((PC >>> 8)  & 0xff); },\n            function() { pushToStack(PC & 0xff); },\n            fetchADH,\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function BRK() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,                 // For debugging purposes, use operand as an arg for BRK!\n            function() {\n                if (self.debug) self.breakpoint(\"BRK \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits()); }, // set B flag\n            function() { AD = bus.read(IRQ_VECTOR); },\n            function() { AD |= bus.read(IRQ_VECTOR + 1) << 8; },\n            function() { PC = AD; I = 1; fetchNextOpcode(); }\n        ];\n    }\n\n    function IRQ() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,                 // For debugging purposes, use operand as an arg for BRK!\n            function() {\n                if (self.debug) self.breakpoint(\"IRQ \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits() & ~0x10); }, // no BRK flag\n            function() { AD = bus.read(IRQ_VECTOR); },\n            function() { AD |= bus.read(IRQ_VECTOR + 1) << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function NMI() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchDataFromImmediate,\n            function() {\n                if (self.debug) self.breakpoint(\"NMI \" + data);\n                pushToStack((PC >>> 8) & 0xff);\n            },\n            function() { pushToStack(PC & 0xff); },\n            function() { pushToStack(getStatusBits() & ~0x10); }, // no BRK flag\n            function() { AD = bus.read(NMI_VECTOR); },\n            function() { AD |= bus.read(NMI_VECTOR + 1) << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function RTI() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { setStatusBits(popFromStack()); },\n            function() { AD = popFromStack(); },\n            function() { AD |= popFromStack() << 8; },\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function RTS() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchOpcodeAndDiscard,\n            peekFromStack,\n            function() { AD = popFromStack(); },\n            function() { AD |= popFromStack() << 8; },\n            function() { PC = AD; fetchDataFromImmediate(); },\n            fetchNextOpcode\n        ];\n    }\n\n    function JMP_ABS() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchADL,\n            fetchADH,\n            function() { PC = AD; fetchNextOpcode(); }\n        ];\n    }\n\n    function JMP_IND() {\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchIAL,                           // IAH will be zero\n            fetchIAH,\n            fetchBALFromIA,\n            function() {\n                add1toIAL();\n                fetchBAHFromIA();\n            },\n            function() { PC = BA; fetchNextOpcode(); }\n        ];\n    }\n\n    function Bxx(reg, cond) {\n        var branchTaken;\n        if      (reg === bZ) branchTaken = function() { return Z === cond; };\n        else if (reg === bN) branchTaken = function() { return N === cond; };\n        else if (reg === bC) branchTaken = function() { return C === cond; };\n        else                 branchTaken = function() { return V === cond; };\n        return [\n            fetchOpcodeAndDecodeInstruction,\n            fetchBranchOffset,\n            function() {\n                if (branchTaken()) {\n                    fetchOpcodeAndDiscard();\n                    addBranchOffsetToPCL();\n                } else {\n                    fetchNextOpcode();\n                }\n            },\n            function() {\n                if(branchOffsetCrossAdjust) {\n                    fetchOpcodeAndDiscard();\n                    adjustPCHForBranchOffsetCross();\n                } else {\n                    fetchNextOpcode();\n                }\n            },\n            fetchNextOpcode\n        ];\n    }\n\n\n    // Savestate  -------------------------------------------\n\n    this.saveState = function():MOS6502State {\n        return {\n            PC: (PC-1) & 0xffff,\n            A: A, X: X, Y: Y, SP: SP,\n            N: N, V: V, D: D, I: I, Z: Z, C: C,\n            T: T, o: opcode, R: RDY?1:0,\n            d: data, AD: AD, BA: BA, BC: BALCrossed?1:0, IA: IA,\n            bo: branchOffset, boa: branchOffsetCrossAdjust\n        };\n    };\n\n    this.loadState = function(state:MOS6502State) {\n        PC = (state.PC+1) & 0xffff;\n        A = state.A; X = state.X; Y = state.Y; SP = state.SP;\n        N = state.N; V = state.V; D = state.D; I = state.I; Z = state.Z; C = state.C;\n        T = state.T; opcode = state.o; RDY = !!state.R;\n        data = state.d; AD = state.AD; BA = state.BA; BALCrossed = !!state.BC; IA = state.IA;\n        branchOffset = state.bo; branchOffsetCrossAdjust = state.boa;\n        instruction = opcode < 0 ? [ fetchOpcodeAndDecodeInstruction ] : instructions[opcode];\n    };\n\n\n    // Accessory methods\n\n    this.toString = function() {\n        return \"CPU \" +\n            \" PC: \" + PC.toString(16) + \"  op: \" + opcode.toString() + \"  T: \" + T + \"  data: \" + data + \"\\n\" +\n            \" A: \" + A.toString(16) + \"  X: \" + X.toString(16) + \"  Y: \" + Y.toString(16) + \"  SP: \" + SP.toString(16) + \"     \" +\n            \"N\" + N + \"  \" + \"V\" + V + \"  \" + \"D\" + D + \"  \" + \"I\" + I + \"  \" + \"Z\" + Z + \"  \" + \"C\" + C + \"  \";\n    };\n\n    this.breakpoint = function(mes) {\n        //jt.Util.log(mes);\n        if (this.trace) {\n            var text = \"CPU Breakpoint!  \" + (mes ? \"(\" + mes + \")\" : \"\") + \"\\n\\n\" + this.toString();\n            //jt.Util.message(text);\n        }\n    };\n\n    var cycletime = [\n      7, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      0, 6, 0, 6, 3, 3, 3, 3, 2, 0, 2, 0, 4, 4, 4, 4,\n      2, 6, 0, 0, 4, 4, 4, 4, 2, 5, 2, 0, 0, 5, 0, 0,\n      2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 0, 4, 4, 4, 4,\n      2, 5, 0, 5, 4, 4, 4, 4, 2, 4, 2, 0, 4, 4, 4, 4,\n      2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,\n      2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 0, 4, 4, 6, 6,\n      2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7\n    ];\n\n    var extracycles = [\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,\n      0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n      2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1\n    ];\n\n    var insnlengths = [\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      3, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      0, 2, 0, 2, 2, 2, 2, 2, 1, 0, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 0, 2, 2, 2, 3, 1, 3, 1, 0, 0, 3, 0, 0,\n      2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,\n      2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3\n    ];\n\n    var validinsns = [\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      3, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 0, 0,\n      2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,\n      2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,\n      2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0\n    ];\n\n    this.getOpcodeMetadata = function(opcode, address) {\n      // TODO: more intelligent maximum cycles\n      //var i = instructions[opcode];\n      return {\n        opcode:opcode,\n        mnenomic:opcodes[opcode],\n        minCycles:cycletime[opcode],\n        maxCycles:cycletime[opcode] + extracycles[opcode],\n        insnlength:insnlengths[opcode]\n      };\n    }\n\n    // only call when isPCStable() is true\n    this.setNMI = function() {\n      instruction = NMI();\n      T = 1;\n      PC = (PC-1) & 0xffff;\n    }\n    this.setIRQ = function() {\n      if (!I) { // only if not disabled\n        instruction = IRQ();\n        T = 1;\n        PC = (PC-1) & 0xffff;\n      }\n    }\n\n    this.getSP = function() { return SP; }\n    this.getPC = function() { return (PC-1) & 0xffff; }\n    this.getT = function() { return T; }\n    this.isHalted = function() { return opcodes[opcode] == \"uKIL\"; }\n    \n    this.isPCStable = function() {\n      return T == 0;\n    }\n};\n\nexport interface MOS6502State {\nPC : number;\nSP : number;\nA : number;\nX : number;\nY : number;\nN : number;\nV : number;\nD : number;\nI : number;\nZ : number;\nC : number;\nT : number;\no : number;\nR : number;\nd : number;\nAD : number;\nBA : number;\nBC : number;\nIA : number;\nbo : number;\nboa : number;\n}\n\nexport enum MOS6502Interrupts { None=0, NMI=1, IRQ=2 };\n\nexport class MOS6502 implements CPU, ClockBased, SavesState<MOS6502State>, Interruptable<MOS6502Interrupts> {\n\n  cpu = new _MOS6502();\n  interruptType : MOS6502Interrupts = MOS6502Interrupts.None;\n  \n  connectMemoryBus(bus:Bus) {\n    this.cpu.connectBus(bus);\n  }\n  advanceClock() {\n    if (this.interruptType && this.isStable()) {\n      switch (this.interruptType) {\n        case MOS6502Interrupts.NMI: this.cpu.setNMI(); break;\n        case MOS6502Interrupts.IRQ: this.cpu.setIRQ(); break;\n      }\n      this.interruptType = 0;\n    }\n    this.cpu.clockPulse();\n  }\n  advanceInsn() {\n    do {\n      this.advanceClock();\n    } while (!this.isStable());\n  }\n  reset() {\n    this.cpu.reset();\n    this.interruptType = 0;\n  }\n  interrupt(itype:number) {\n    if (this.interruptType != MOS6502Interrupts.NMI) {\n        this.interruptType = itype;\n    }\n  }\n  NMI() {\n    this.interrupt(MOS6502Interrupts.NMI);\n  }\n  IRQ() {\n    this.interrupt(MOS6502Interrupts.IRQ);\n  }\n  getSP() {\n    return this.cpu.getSP();\n  }\n  getPC() {\n    return this.cpu.getPC();\n  }\n  isHalted() {\n    return this.cpu.isHalted();\n  }\n  saveState() {\n    var s = this.cpu.saveState();\n    s.it = this.interruptType;\n    return s;\n  }\n  loadState(s) {\n    this.cpu.loadState(s);\n    this.interruptType = s.it;\n  }\n  isStable() : boolean {\n    return this.cpu.isPCStable();\n  }\n  getOpcodeMetadata(op: number) {\n    return this.cpu.getOpcodeMetadata(op);\n  }\n}\n", "\nimport { RasterVideo, dumpRAM, AnimationTimer, ControllerPoller, drawCrosshair } from \"./emu\";\nimport { hex, printFlags, invertMap, byteToASCII } from \"./util\";\nimport { CodeAnalyzer } from \"./analysis\";\nimport { Segment, FileData } from \"./workertypes\";\nimport { disassemble6502 } from \"./cpu/disasm6502\";\nimport { disassembleZ80 } from \"./cpu/disasmz80\";\nimport { Z80 } from \"./cpu/ZilogZ80\";\n\nimport { Bus, Resettable, FrameBased, VideoSource, SampledAudioSource, AcceptsROM, AcceptsBIOS, AcceptsKeyInput, SavesState, SavesInputState, HasCPU, HasSerialIO, SerialIOInterface, AcceptsJoyInput } from \"./devices\";\nimport { Probeable, RasterFrameBased, AcceptsPaddleInput } from \"./devices\";\nimport { SampledAudio } from \"./audio\";\nimport { ProbeRecorder } from \"./probe\";\nimport { BaseWASMMachine } from \"./wasmplatform\";\nimport { CPU6809 } from \"./cpu/6809\";\nimport { _MOS6502 } from \"./cpu/MOS6502\";\n\n///\n\nexport interface OpcodeMetadata {\n  minCycles: number;\n  maxCycles: number;\n  insnlength: number;\n  opcode: number;\n}\n\nexport interface CpuState {\n  PC:number;\n  EPC?:number; // effective PC (for bankswitching)\n  o?:number;/*opcode*/\n  SP?:number\n  /*\n  A:number, X:number, Y:number, SP:number, R:boolean,\n  N,V,D,Z,C:boolean*/\n};\nexport interface EmuState {\n  c?:CpuState,\t// CPU state\n  b?:Uint8Array|number[], \t// RAM (TODO: not for vcs, support Uint8Array)\n  ram?:Uint8Array,\n  o?:{},\t\t\t\t// verilog\n};\nexport interface EmuControlsState {\n}\nexport type DisasmLine = {\n  line:string,\n  nbytes:number,\n  isaddr:boolean\n};\n\nexport type SymbolMap = {[ident:string]:number};\nexport type AddrSymbolMap = {[address:number]:string};\n\nexport class DebugSymbols {\n  symbolmap : SymbolMap;\t// symbol -> address\n  addr2symbol : AddrSymbolMap;\t// address -> symbol\n  debuginfo : {}; // extra platform-specific debug info\n\n  constructor(symbolmap : SymbolMap, debuginfo : {}) {\n    this.symbolmap = symbolmap;\n    this.debuginfo = debuginfo;\n    this.addr2symbol = invertMap(symbolmap);\n    //// TODO: shouldn't be necc.\n    if (!this.addr2symbol[0x0]) this.addr2symbol[0x0] = '$00'; // needed for ...\n    this.addr2symbol[0x10000] = '__END__'; // ... dump memory to work\n  }\n}\n\ntype MemoryMapType = \"main\" | \"vram\";\ntype MemoryMap = { [type:string] : Segment[] };\n\nexport function isDebuggable(arg:any): arg is Debuggable {\n    return arg && typeof arg.getDebugCategories === 'function';\n}\n\nexport interface Debuggable {\n  getDebugCategories?() : string[];\n  getDebugInfo?(category:string, state:EmuState) : string;\n}\n\nexport interface Platform {\n  start() : void | Promise<void>;\n  reset() : void;\n  isRunning() : boolean;\n  getToolForFilename(s:string) : string;\n  getDefaultExtension() : string;\n  getPresets?() : Preset[];\n  pause() : void;\n  resume() : void;\n  loadROM(title:string, rom:any); // TODO: Uint8Array\n  loadBIOS?(title:string, rom:Uint8Array);\n  getROMExtension?(rom:FileData) : string;\n\n  loadState?(state : EmuState) : void;\n  saveState?() : EmuState;\n  loadControlsState?(state : EmuControlsState) : void;\n  saveControlsState?() : EmuControlsState;\n\n  inspect?(ident:string) : string;\n  disassemble?(addr:number, readfn:(addr:number)=>number) : DisasmLine;\n  readAddress?(addr:number) : number;\n  readVRAMAddress?(addr:number) : number;\n  \n  setFrameRate?(fps:number) : void;\n  getFrameRate?() : number;\n\n  setupDebug?(callback : BreakpointCallback) : void;\n  clearDebug?() : void;\n  step?() : void;\n  runToVsync?() : void;\n  runToPC?(pc:number) : void;\n  runUntilReturn?() : void;\n  stepBack?() : void;\n  runEval?(evalfunc : DebugEvalCondition) : void;\n  runToFrameClock?(clock : number) : void;\n  stepOver?() : void;\n  restartAtPC?(pc:number) : boolean;\n\n  getOpcodeMetadata?(opcode:number, offset:number) : OpcodeMetadata; //TODO\n  getSP?() : number;\n  getPC?() : number;\n  getOriginPC?() : number;\n  newCodeAnalyzer?() : CodeAnalyzer;\n  \n  getPlatformName?() : string;\n  getMemoryMap?() : MemoryMap;\n\n  setRecorder?(recorder : EmuRecorder) : void;\n  advance?(novideo? : boolean) : number;\n  advanceFrameClock?(trap:DebugCondition, step:number) : number;\n  showHelp?() : string;\n  resize?() : void;\n\n  getRasterScanline?() : number;\n  getRasterLineClock?() : number;\n  setBreakpoint?(id : string, cond : DebugCondition);\n  clearBreakpoint?(id : string);\n  hasBreakpoint?(id : string) : boolean;\n  getCPUState?() : CpuState;\n\n  debugSymbols? : DebugSymbols;\n  getDebugTree?() : {};\n  \n  startProbing?() : ProbeRecorder;\n  stopProbing?() : void;\n\n  isBlocked?() : boolean; // is blocked, halted, or waiting for input?\n\n  readFile?(path: string) : FileData;\n  writeFile?(path: string, data: FileData) : boolean;\n  sourceFileFetch?: (path:string) => FileData;\n\n  getDownloadFile?() : {extension:string, blob:Blob};\n  getDebugSymbolFile?() : {extension:string, blob:Blob};\n}\n\nexport interface Preset {\n  id : string;\n  name : string;\n  chapter? : number;\n  title? : string;\n  category?: string;\n}\n\nexport interface MemoryBus {\n  read : (address:number) => number;\n  write : (address:number, value:number) => void;\n  contend?: (address:number, cycles:number) => number;\n  isContended?: (address:number) => boolean;\n}\n\nexport type DebugCondition = () => boolean;\nexport type DebugEvalCondition = (c:CpuState) => boolean;\nexport type BreakpointCallback = (s:EmuState, msg?:string) => void;\n// for composite breakpoints w/ single debug function\nexport class BreakpointList {\n  id2bp : {[id:string] : Breakpoint} = {};\n  getDebugCondition() : DebugCondition {\n    if (Object.keys(this.id2bp).length == 0) {\n      return null; // no breakpoints\n    } else {\n      // evaluate all breakpoints\n      return () => {\n        var result = false;\n        for (var id in this.id2bp)\n          if (this.id2bp[id].cond())\n            result = true;\n        return result;\n      };\n    }\n  }\n}\nexport interface Breakpoint {\n  cond: DebugCondition;\n};\n\nexport interface EmuRecorder {\n  frameRequested() : boolean;\n  recordFrame(state : EmuState);\n}\n\n/////\n\nexport abstract class BasePlatform {\n  recorder : EmuRecorder = null;\n  debugSymbols : DebugSymbols;\n  internalFiles : {[path:string] : FileData} = {};\n\n  abstract loadState(state : EmuState) : void;\n  abstract saveState() : EmuState;\n  abstract pause() : void;\n  abstract resume() : void;\n  abstract advance(novideo? : boolean) : number;\n\n  setRecorder(recorder : EmuRecorder) : void {\n    this.recorder = recorder;\n  }\n  updateRecorder() {\n    // are we recording and do we need to save a frame?\n    if (this.recorder && (<Platform><any>this).isRunning() && this.recorder.frameRequested()) {\n      this.recorder.recordFrame(this.saveState());\n    }\n  }\n  inspect(sym: string) : string {\n    return inspectSymbol((this as any) as Platform, sym);\n  }\n  getDebugTree() : {} {\n    var o : any = { };\n    o.state = this.saveState();\n    if (this.debugSymbols?.debuginfo) o.debuginfo = this.debugSymbols.debuginfo;\n    return o;\n  }\n  readFile(path: string) : FileData {\n    return this.internalFiles[path];\n  }\n  writeFile(path: string, data: FileData) : boolean {\n    this.internalFiles[path] = data;\n    return true;\n  }\n}\n\nexport abstract class BaseDebugPlatform extends BasePlatform {\n  onBreakpointHit : BreakpointCallback;\n  debugCallback : DebugCondition;\n  debugSavedState : EmuState = null;\n  debugBreakState : EmuState = null;\n  debugTargetClock : number = 0;\n  debugClock : number = 0;\n  breakpoints : BreakpointList = new BreakpointList();\n  frameCount : number = 0;\n\n  abstract getCPUState() : CpuState;\n\n  setBreakpoint(id : string, cond : DebugCondition) {\n    if (cond) {\n      this.breakpoints.id2bp[id] = {cond:cond};\n      this.restartDebugging();\n    } else {\n      this.clearBreakpoint(id);\n    }\n  }\n  clearBreakpoint(id : string) {\n    delete this.breakpoints.id2bp[id];\n  }\n  hasBreakpoint(id : string) {\n    return this.breakpoints.id2bp[id] != null;\n  }\n  getDebugCallback() : DebugCondition {\n    return this.breakpoints.getDebugCondition();\n  }\n  setupDebug(callback : BreakpointCallback) : void {\n    this.onBreakpointHit = callback;\n  }\n  clearDebug() {\n    if (this.debugBreakState != null && this.debugSavedState != null) {\n      this.loadState(this.debugSavedState);\n    }\n    this.debugSavedState = null;\n    this.debugBreakState = null;\n    this.debugTargetClock = -1;\n    this.debugClock = 0;\n    this.onBreakpointHit = null;\n    this.clearBreakpoint('debug');\n    this.frameCount = 0;\n  }\n  setDebugCondition(debugCond : DebugCondition) {\n    this.setBreakpoint('debug', debugCond);\n  }\n  resetDebugging() {\n    if (this.debugSavedState) {\n      this.loadState(this.debugSavedState);\n    } else {\n      this.debugSavedState = this.saveState();\n    }\n    this.debugClock = 0;\n    this.debugCallback = this.getDebugCallback();\n    this.debugBreakState = null;\n  }\n  restartDebugging() {\n    this.resetDebugging();\n    this.resume();\n  }\n  preFrame() {\n    // save state before frame, to record any inputs that happened pre-frame\n    if (this.debugCallback && !this.debugBreakState) {\n      // save state every frame and rewind debug clocks\n      this.debugSavedState = this.saveState();\n      this.debugTargetClock -= this.debugClock;\n      this.debugClock = 0;\n    }\n  }\n  postFrame() {\n    // reload debug state at end of frame after breakpoint\n    if (this.debugCallback && this.debugBreakState) {\n      this.loadState(this.debugBreakState);\n    }\n    this.frameCount++;\n  }\n  pollControls() {\n  }\n  nextFrame(novideo : boolean) : number {\n    this.pollControls();\n    this.updateRecorder();\n    this.preFrame();\n    var steps = this.advance(novideo);\n    this.postFrame();\n    return steps;\n  }\n  // default debugging\n  abstract getSP() : number;\n  abstract getPC() : number;\n  abstract isStable() : boolean;\n\n  evalDebugCondition() {\n    if (this.debugCallback && !this.debugBreakState) {\n      this.debugCallback();\n    }\n  }\n  wasBreakpointHit() : boolean {\n    return this.debugBreakState != null;\n  }\n  breakpointHit(targetClock : number, reason? : string) {\n    console.log(this.debugTargetClock, targetClock, this.debugClock, this.isStable());\n    this.debugTargetClock = targetClock;\n    this.debugBreakState = this.saveState();\n    console.log(\"Breakpoint at clk\", this.debugClock, \"PC\", this.debugBreakState.c.PC.toString(16));\n    this.pause();\n    if (this.onBreakpointHit) {\n      this.onBreakpointHit(this.debugBreakState, reason);\n    }\n  }\n  haltAndCatchFire(reason : string) {\n    this.breakpointHit(this.debugClock, reason);\n  }\n  runEval(evalfunc : DebugEvalCondition) {\n    this.setDebugCondition( () => {\n      if (++this.debugClock >= this.debugTargetClock && this.isStable()) {\n        var cpuState = this.getCPUState();\n        if (evalfunc(cpuState)) {\n          this.breakpointHit(this.debugClock);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    });\n  }\n  runToPC(pc: number) {\n    this.debugTargetClock++;\n    this.runEval((c) => {\n      return c.PC == pc;\n    });\n  }\n  runUntilReturn() {\n    var SP0 = this.getSP();\n    this.runEval( (c:CpuState) : boolean => {\n      return c.SP > SP0; // TODO: check for RTS/RET opcode\n    });\n  }\n  runToFrameClock(clock : number) : void {\n    this.restartDebugging();\n    this.debugTargetClock = clock;\n    this.runEval(() : boolean => { return true; });\n  }\n  step() {\n    this.runToFrameClock(this.debugClock+1);\n  }\n  stepBack() {\n    var prevState;\n    var prevClock;\n    var clock0 = this.debugTargetClock;\n    this.restartDebugging();\n    this.debugTargetClock = clock0 - 25; // TODO: depends on CPU\n    this.runEval( (c:CpuState) : boolean => {\n      if (this.debugClock < clock0) {\n        prevState = this.saveState();\n        prevClock = this.debugClock;\n        return false;\n      } else {\n        if (prevState) {\n          this.loadState(prevState);\n          this.debugClock = prevClock;\n        }\n        return true;\n      }\n    });\n  }\n  runToVsync() {\n    this.restartDebugging();\n    var frame0 = this.frameCount;\n    this.runEval( () : boolean => {\n      return this.frameCount > frame0;\n    });\n  }\n}\n\nexport function inspectSymbol(platform : Platform, sym : string) : string {\n  if (!platform.debugSymbols) return;\n  var symmap = platform.debugSymbols.symbolmap;\n  var addr2sym = platform.debugSymbols.addr2symbol;\n  if (!symmap || !platform.readAddress) return null;\n  var addr = symmap[\"_\"+sym] || symmap[sym]; // look for C or asm symbol\n  if (!(typeof addr == 'number')) return null;\n  var b = platform.readAddress(addr);\n  // don't show 2 bytes if there's a symbol at the next address\n  if (addr2sym && addr2sym[addr+1] != null) {\n    return \"$\"+hex(addr,4) + \" = $\"+hex(b,2)+\" (\"+b+\" decimal)\"; // unsigned\n  } else {\n    let b2 = platform.readAddress(addr+1);\n    let w = b | (b2<<8);\n    return \"$\"+hex(addr,4) + \" = $\"+hex(b,2)+\" $\"+hex(b2,2)+\" (\"+((w<<16)>>16)+\" decimal)\"; // signed\n  }\n}\n\n////// 6502\n\nexport function getToolForFilename_6502(fn:string) : string {\n  if (fn.endsWith(\"-llvm.c\")) return \"remote:llvm-mos\";\n  if (fn.endsWith(\".c\")) return \"cc65\";\n  if (fn.endsWith(\".h\")) return \"cc65\";\n  if (fn.endsWith(\".s\")) return \"ca65\";\n  if (fn.endsWith(\".ca65\")) return \"ca65\";\n  if (fn.endsWith(\".dasm\")) return \"dasm\";\n  if (fn.endsWith(\".acme\")) return \"acme\";\n  if (fn.endsWith(\".wiz\")) return \"wiz\";\n  if (fn.endsWith(\".ecs\")) return \"ecs\";\n  if (fn.endsWith(\".cpp\")) return \"oscar64\";\n  if (fn.endsWith(\".cc\")) return \"oscar64\";\n  if (fn.endsWith(\".o64\")) return \"oscar64\";\n  return \"dasm\"; // .a\n}\n\n// TODO: can merge w/ Z80?\nexport abstract class Base6502Platform extends BaseDebugPlatform {\n\n  // some platforms store their PC one byte before or after the first opcode\n  // so we correct when saving and loading from state\n  debugPCDelta = -1;\n  fixPC(c)   { c.PC = (c.PC + this.debugPCDelta) & 0xffff; return c; }\n  unfixPC(c) { c.PC = (c.PC - this.debugPCDelta) & 0xffff; return c;}\n  getSP()    { return this.getCPUState().SP };\n  getPC()    { return this.getCPUState().PC };\n  isStable() { return !this.getCPUState()['T']; }\n  abstract readAddress(addr:number) : number;\n\n  newCPU(membus : MemoryBus) {\n    var cpu = new _MOS6502();\n    cpu.connectBus(membus);\n    return cpu;\n  }\n\n  getOpcodeMetadata(opcode, offset) {\n    return getOpcodeMetadata_6502(opcode, offset);\n  }\n\n  getOriginPC() : number {\n    return (this.readAddress(0xfffc) | (this.readAddress(0xfffd) << 8)) & 0xffff;\n  }\n\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassemble6502(pc, read(pc), read(pc+1), read(pc+2));\n  }\n  getToolForFilename = getToolForFilename_6502;\n  getDefaultExtension() { return \".a\"; };\n\n  getDebugCategories() {\n    return ['CPU','ZPRAM','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_6502(state.c);\n      case 'ZPRAM': return dumpRAM(state.b||state.ram, 0x0, 0x100);\n      case 'Stack': return dumpStackToString(<Platform><any>this, state.b||state.ram, 0x100, 0x1ff, 0x100+state.c.SP, 0x20);\n    }\n  }\n}\n\nexport function cpuStateToLongString_6502(c) : string {\n  function decodeFlags(c) {\n    var s = \"\";\n    s += c.N ? \" N\" : \" -\";\n    s += c.V ? \" V\" : \" -\";\n    s += c.D ? \" D\" : \" -\";\n    s += c.Z ? \" Z\" : \" -\";\n    s += c.C ? \" C\" : \" -\";\n    s += c.I ? \" I\" : \" -\";\n    return s;\n  }\n  return \"PC \" + hex(c.PC,4) + \"  \" + decodeFlags(c) + \"\\n\"\n       + \" A \" + hex(c.A)    + \"     \" + (c.R ? \"\" : \"BUSY\") + \"\\n\"\n       + \" X \" + hex(c.X)    + \"\\n\"\n       + \" Y \" + hex(c.Y)    + \"     \" + \"SP \" + hex(c.SP) + \"\\n\";\n}\n\nvar OPMETA_6502 = {\n  cycletime: [\n  7, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 4, 4, 6, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,    6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 4, 4, 6, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,    6, 6, 0, 8, 3, 3, 5, 5, 3, 2, 2, 2, 3, 4, 6, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,    6, 6, 0, 8, 3, 3, 5, 5, 4, 2, 2, 2, 5, 4, 6, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,    0, 6, 0, 6, 3, 3, 3, 3, 2, 0, 2, 0, 4, 4, 4, 4,    2, 6, 0, 0, 4, 4, 4, 4, 2, 5, 2, 0, 0, 5, 0, 0,    2, 6, 2, 6, 3, 3, 3, 3, 2, 2, 2, 0, 4, 4, 4, 4,    2, 5, 0, 5, 4, 4, 4, 4, 2, 4, 2, 0, 4, 4, 4, 4,    2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 2, 4, 4, 3, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7,    2, 6, 0, 8, 3, 3, 5, 5, 2, 2, 2, 0, 4, 4, 6, 6,    2, 5, 0, 8, 4, 4, 6, 6, 2, 4, 0, 7, 4, 4, 7, 7\n  ],\n  extracycles: [\n  0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1,    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,    2, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1\n  ],\n  insnlengths: [\n  1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,    3, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,    1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,    1, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,    0, 2, 0, 2, 2, 2, 2, 2, 1, 0, 1, 0, 3, 3, 3, 3,    2, 2, 0, 0, 2, 2, 2, 3, 1, 3, 1, 0, 0, 3, 0, 0,    2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 1, 0, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 2, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 2, 1, 0, 3, 3, 3, 3,    2, 2, 0, 2, 2, 2, 2, 2, 1, 3, 0, 3, 3, 3, 3, 3\n  ],\n  validinsns: [\n  1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 0, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,    3, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,    1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,    1, 2, 0, 0, 0, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,    0, 2, 0, 0, 2, 2, 2, 0, 1, 0, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 0, 3, 0, 0,    2, 2, 2, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 2, 2, 2, 0, 1, 3, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0,    2, 2, 0, 0, 2, 2, 2, 0, 1, 2, 1, 0, 3, 3, 3, 0,    2, 2, 0, 0, 0, 2, 2, 0, 1, 3, 0, 0, 0, 3, 3, 0\n  ],\n}\n\nexport function getOpcodeMetadata_6502(opcode, address) {\n  // TODO: more intelligent maximum cycles\n  // TODO: must always be new object, b/c we might modify it\n  return {\n    opcode:opcode,\n    minCycles:OPMETA_6502.cycletime[opcode],\n    maxCycles:OPMETA_6502.cycletime[opcode] + OPMETA_6502.extracycles[opcode],\n    insnlength:OPMETA_6502.insnlengths[opcode]\n  };\n}\n\n////// Z80\n\nexport function cpuStateToLongString_Z80(c) {\n  function decodeFlags(flags) {\n    return printFlags(flags, [\"S\",\"Z\",,\"H\",,\"V\",\"N\",\"C\"], true);\n  }\n  return \"PC \" + hex(c.PC,4) + \"  \" + decodeFlags(c.AF) + \" \" + (c.iff1?\"I\":\"-\") + (c.iff2?\"I\":\"-\") + \"\\n\"\n       + \"SP \" + hex(c.SP,4) + \"  IR \" + hex(c.IR,4) + \"\\n\"\n       + \"IX \" + hex(c.IX,4) + \"  IY \" + hex(c.IY,4) + \"\\n\"\n       + \"AF \" + hex(c.AF,4) + \"  BC \" + hex(c.BC,4) + \"\\n\"\n       + \"DE \" + hex(c.DE,4) + \"  HL \" + hex(c.HL,4) + \"\\n\"\n       ;\n}\n\nexport abstract class BaseZ80Platform extends BaseDebugPlatform {\n\n  _cpu;\n  waitCycles : number = 0;\n\n  newCPU(membus : MemoryBus, iobus : MemoryBus) {\n    this._cpu = new Z80();\n    this._cpu.connectMemoryBus(membus);\n    this._cpu.connectIOBus(iobus);\n    return this._cpu;\n  }\n\n  getPC() { return this._cpu.getPC(); }\n  getSP() { return this._cpu.getSP(); }\n  isStable() { return true; }\n\n  // TODO: refactor other parts into here\n  runCPU(cpu, cycles:number) : number {\n    this._cpu = cpu; // TODO?\n    this.waitCycles = 0; // TODO: needs to spill over betwenn calls\n    if (this.wasBreakpointHit())\n      return 0;\n    var debugCond = this.getDebugCallback();\n    var n = 0;\n    this.waitCycles += cycles;\n    while (this.waitCycles > 0) {\n      if (debugCond && debugCond()) {\n        debugCond = null;\n        break;\n      }\n      var cyc = cpu.advanceInsn();\n      n += cyc;\n      this.waitCycles -= cyc;\n    }\n    return n;\n  }\n\n  getToolForFilename = getToolForFilename_z80;\n  getDefaultExtension() { return \".c\"; };\n  // TODO: Z80 opcode metadata\n  //this.getOpcodeMetadata = function() { }\n\n  getDebugCategories() {\n    return ['CPU','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_Z80(state.c);\n      case 'Stack': {\n        var sp = (state.c.SP-1) & 0xffff;\n        var start = sp & 0xff00;\n        var end = start + 0xff;\n        if (sp == 0) sp = 0x10000;\n        console.log(sp,start,end);\n        return dumpStackToString(<Platform><any>this, [], start, end, sp, 0xcd);\n      }\n    }\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassembleZ80(pc, read(pc), read(pc+1), read(pc+2), read(pc+3));\n  }\n}\n\nexport function getToolForFilename_z80(fn:string) : string {\n  if (fn.endsWith(\".c\")) return \"sdcc\";\n  if (fn.endsWith(\".h\")) return \"sdcc\";\n  if (fn.endsWith(\".s\")) return \"sdasz80\";\n  if (fn.endsWith(\".sgb\")) return \"sdasgb\";\n  if (fn.endsWith(\".ns\")) return \"naken\";\n  if (fn.endsWith(\".scc\")) return \"sccz80\";\n  if (fn.endsWith(\".z\")) return \"zmac\";\n  if (fn.endsWith(\".wiz\")) return \"wiz\";\n  return \"zmac\";\n}\n\n////// 6809\n\nexport function cpuStateToLongString_6809(c) {\n  function decodeFlags(flags) {\n    return printFlags(flags, [\"E\",\"F\",\"H\",\"I\", \"N\",\"Z\",\"V\",\"C\"], true);\n  }\n  return \"PC \" + hex(c.PC,4) + \"  \" + decodeFlags(c.CC) + \"\\n\"\n       + \"SP \" + hex(c.SP,4) + \"\\n\"\n       + \"DP \" + hex(c.DP,2) + \"\\n\"\n       + \" A \" + hex(c.A,2) + \"\\n\"\n       + \" B \" + hex(c.B,2) + \"\\n\"\n       + \" X \" + hex(c.X,4) + \"\\n\"\n       + \" Y \" + hex(c.Y,4) + \"\\n\"\n       + \" U \" + hex(c.U,4) + \"\\n\"\n       ;\n}\n\nexport function getToolForFilename_6809(fn:string) : string {\n  if (fn.endsWith(\".c\")) return \"cmoc\";\n  if (fn.endsWith(\".h\")) return \"cmoc\";\n  if (fn.endsWith(\".xasm\")) return \"xasm6809\";\n  if (fn.endsWith(\".lwasm\")) return \"lwasm\";\n  return \"cmoc\";\n}\n\nexport abstract class Base6809Platform extends BaseZ80Platform {\n\n  newCPU(membus : MemoryBus) {\n    var cpu = Object.create(CPU6809());\n    cpu.init(membus.write, membus.read, 0);\n    return cpu;\n  }\n\n  cpuStateToLongString(c:CpuState) {\n    return cpuStateToLongString_6809(c);\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    // TODO: don't create new CPU\n    return Object.create(CPU6809()).disasm(read(pc), read(pc+1), read(pc+2), read(pc+3), read(pc+4), pc);\n  }\n  getDefaultExtension() : string { return \".asm\"; };\n  //this.getOpcodeMetadata = function() { }\n  getToolForFilename = getToolForFilename_6809;\n  getDebugCategories() {\n    return ['CPU','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_6809(state.c);\n      default:      return super.getDebugInfo(category, state);\n    }\n  }\n}\n\n\n//TODO: how to get stack_end?\nexport function dumpStackToString(platform:Platform, mem:Uint8Array|number[], start:number, end:number, sp:number, jsrop:number, bigendian?:boolean) : string {\n  var s = \"\";\n  var nraw = 0;\n  //s = dumpRAM(mem.slice(start,start+end+1), start, end-start+1);\n  function read(addr) {\n    if (addr < mem.length) return mem[addr];\n    else return platform.readAddress(addr);\n  }\n  while (sp < end) {\n    sp++;\n    // see if there's a JSR on the stack here\n    // TODO: make work with roms and memory maps\n    var addr = read(sp) + read(sp+1)*256;\n    if (bigendian) { addr = ((addr & 0xff) << 8) | ((addr & 0xff00) >> 8) }\n    var jsrofs = jsrop==0x20 ? -2 : -3; // 6502 vs Z80\n    var opcode = read(addr + jsrofs); // might be out of bounds\n    if (opcode == jsrop) { // JSR\n      s += \"\\n$\" + hex(sp) + \": \";\n      s += hex(addr,4) + \" \" + lookupSymbol(platform, addr, true);\n      sp++;\n      nraw = 0;\n    } else {\n      if (nraw == 0)\n        s += \"\\n$\" + hex(sp) + \": \";\n      s += hex(read(sp)) + \" \";\n      if (++nraw == 8) nraw = 0;\n    }\n  }\n  return s+\"\\n\";\n}\n\n// TODO: slow, funky, uses global\nexport function lookupSymbol(platform:Platform, addr:number, extra:boolean) {\n  var start = addr;\n  var addr2symbol = platform.debugSymbols && platform.debugSymbols.addr2symbol;\n  while (addr2symbol && addr >= 0) {\n    var sym = addr2symbol[addr];\n    if (sym) { // return first symbol we find\n      var sym = addr2symbol[addr];\n      return extra ? (sym + \" + $\" + hex(start-addr)) : sym;\n    }\n    if (!extra) break;\n    addr--;\n  }\n  return \"\";\n}\n\n/// new Machine platform adapters\n\nexport interface Machine extends Bus, Resettable, FrameBased, AcceptsROM, HasCPU, SavesState<EmuState>, SavesInputState<any> {\n}\n\nexport function hasVideo(arg:any): arg is VideoSource {\n    return typeof arg.connectVideo === 'function';\n}\nexport function hasAudio(arg:any): arg is SampledAudioSource {\n    return typeof arg.connectAudio === 'function';\n}\nexport function hasKeyInput(arg:any): arg is AcceptsKeyInput {\n    return typeof arg.setKeyInput === 'function';\n}\nexport function hasJoyInput(arg:any): arg is AcceptsJoyInput {\n  return typeof arg.setJoyInput === 'function';\n}\nexport function hasPaddleInput(arg:any): arg is AcceptsPaddleInput {\n    return typeof arg.setPaddleInput === 'function';\n}\nexport function isRaster(arg:any): arg is RasterFrameBased {\n    return typeof arg.getRasterY === 'function';\n}\nexport function hasProbe(arg:any): arg is Probeable {\n    return typeof arg.connectProbe == 'function';\n}\nexport function hasBIOS(arg:any): arg is AcceptsBIOS {\n  return typeof arg.loadBIOS == 'function';\n}\nexport function hasSerialIO(arg:any): arg is HasSerialIO {\n  return typeof arg.connectSerialIO === 'function';\n}\n\nexport abstract class BaseMachinePlatform<T extends Machine> extends BaseDebugPlatform implements Platform {\n  machine : T;\n  mainElement : HTMLElement;\n  timer : AnimationTimer;\n  video : RasterVideo;\n  audio : SampledAudio;\n  poller : ControllerPoller;\n  serialIOInterface : SerialIOInterface;\n  serialVisualizer : SerialIOVisualizer;\n\n  probeRecorder : ProbeRecorder;\n  startProbing;\n  stopProbing;\n\n  abstract newMachine() : T;\n  abstract getToolForFilename(s:string) : string;\n  abstract getDefaultExtension() : string;\n  abstract getPresets() : Preset[];\n  \n  constructor(mainElement : HTMLElement) {\n    super();\n    this.mainElement = mainElement;\n  }\n\n  reset() {\n    this.machine.reset();\n    if (this.serialVisualizer != null) this.serialVisualizer.reset();\n  }\n  loadState(s)   { this.machine.loadState(s); }\n  saveState()    { return this.machine.saveState(); }\n  getSP()        { return this.machine.cpu.getSP(); }\n  getPC()        { return this.machine.cpu.getPC(); }\n  isStable() \t { return this.machine.cpu.isStable(); }\n  getCPUState()  { return this.machine.cpu.saveState(); }\n  loadControlsState(s)   { this.machine.loadControlsState(s); }\n  saveControlsState()    { return this.machine.saveControlsState(); }\n  \n  async start() {\n    this.machine = this.newMachine();\n    const m = this.machine;\n    // block on WASM loading\n    if (m instanceof BaseWASMMachine) {\n      await m.loadWASM();\n    }\n    var videoFrequency;\n    if (hasVideo(m)) {\n      var vp = m.getVideoParams();\n      this.video = new RasterVideo(this.mainElement, vp.width, vp.height, \n        {overscan: !!vp.overscan,\n           rotate: vp.rotate|0,\n           aspect: vp.aspect});\n      this.video.create();\n      m.connectVideo(this.video.getFrameData());\n      // TODO: support keyboard w/o video?\n      if (hasKeyInput(m)) {\n        this.video.setKeyboardEvents(m.setKeyInput.bind(m));\n        this.poller = new ControllerPoller(m.setKeyInput.bind(m));\n      }\n      videoFrequency = vp.videoFrequency;\n    }\n    this.timer = new AnimationTimer(videoFrequency || 60, this.nextFrame.bind(this));\n    if (hasAudio(m)) {\n      var ap = m.getAudioParams();\n      this.audio = new SampledAudio(ap.sampleRate);\n      this.audio.start();\n      m.connectAudio(this.audio);\n    }\n    if (hasPaddleInput(m)) {\n      this.video.setupMouseEvents();\n    }\n    if (hasProbe(m)) {\n      this.probeRecorder = new ProbeRecorder(m);\n      this.startProbing = () => {\n        m.connectProbe(this.probeRecorder);\n        return this.probeRecorder;\n      };\n      this.stopProbing = () => {\n        m.connectProbe(null);\n      };\n    }\n    if (hasBIOS(m)) {\n      this.loadBIOS = (title, data) => {\n        m.loadBIOS(data, title);\n      };\n    }\n    if (hasSerialIO(m)) {\n      if (this.serialIOInterface == null) {\n        this.serialVisualizer = new SerialIOVisualizer(this.mainElement, m);\n      } else {\n        m.connectSerialIO(this.serialIOInterface);\n      }\n    }\n  }\n\n  loadROM(title, data) {\n    this.machine.loadROM(data, title);\n    this.reset();\n  }\n\n  loadBIOS : (title, data) => void; // only set if hasBIOS() is true\n\n  pollControls() {\n    this.poller && this.poller.poll();\n    if (hasPaddleInput(this.machine)) {\n      this.machine.setPaddleInput(0, this.video.paddle_x);\n      this.machine.setPaddleInput(1, this.video.paddle_y);\n    }\n    // TODO: put into interface\n    if (this.machine['pollControls']) {\n      this.machine['pollControls']();\n    }\n  }\n\n  advance(novideo:boolean) {\n    let trap = this.getDebugCallback();\n    try {\n      var steps = this.machine.advanceFrame(trap);\n      return steps;\n    } finally {\n      // in case EmuHalt is thrown...\n      if (!novideo && this.video) {\n        this.video.updateFrame();\n        this.updateVideoDebugger();\n      }\n      if (!novideo && this.serialVisualizer) {\n        this.serialVisualizer.refresh();\n      }\n    }\n  }\n\n  updateVideoDebugger() {\n    if (!this.isRunning() && isRaster(this.machine) && this.machine.getRasterCanvasPosition) {\n      const {x,y} = this.machine.getRasterCanvasPosition();\n      if (x >= 0 || y >= 0) {\n        const ctx = this.video?.getContext();\n        if (ctx) {\n          drawCrosshair(ctx, x, y, 1);\n        }\n      }\n    }\n  }\n\n  advanceFrameClock(trap, step) {\n    if (!(step > 0)) return;\n    if (this.machine instanceof BaseWASMMachine) {\n      return this.machine.advanceFrameClock(trap, step);\n    } else {\n      return this.machine.advanceFrame(() => {\n        return --step <= 0;\n      });\n    }\n  }\n\n  isRunning() {\n    return this.timer && this.timer.isRunning();\n  }\n\n  resume() {\n    this.timer.start();\n    this.audio && this.audio.start();\n  }\n\n  pause() {\n    this.timer.stop();\n    this.audio && this.audio.stop();\n  }\n\n  // so probe views stick around TODO: must be a better way?\n  runToVsync() {\n    this.restartDebugging();\n    var flag = false;\n    this.runEval( () : boolean => {\n      if (this.getRasterScanline() > 0) flag = true;\n      else return flag;\n    });\n  }\n\n  // TODO: reset target clock counter\n  getRasterScanline() {\n    return isRaster(this.machine) && this.machine.getRasterY ? this.machine.getRasterY() : -1;\n  }\n  getRasterLineClock() {\n    return isRaster(this.machine) && this.machine.getRasterX ? this.machine.getRasterX() : -1;\n  }\n\n  readAddress(addr : number) : number {\n    return this.machine.read(addr);\n  }\n\n  getDebugCategories() {\n    if (isDebuggable(this.machine))\n      return this.machine.getDebugCategories();\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    return isDebuggable(this.machine) && this.machine.getDebugInfo(category, state);\n  }\n}\n\n// TODO: move debug info into CPU?\n\nexport abstract class Base6502MachinePlatform<T extends Machine> extends BaseMachinePlatform<T> {\n\n  getOpcodeMetadata     = getOpcodeMetadata_6502;\n  getToolForFilename(fn) { return getToolForFilename_6502(fn); }\n\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassemble6502(pc, read(pc), read(pc+1), read(pc+2));\n  }\n  getDebugCategories() {\n    if (isDebuggable(this.machine))\n      return this.machine.getDebugCategories();\n    else\n      return ['CPU','ZPRAM','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_6502(state.c);\n      case 'ZPRAM': return dumpRAM(state.b||state.ram, 0x0, 0x100);\n      case 'Stack': return dumpStackToString(<Platform><any>this, state.b||state.ram, 0x100, 0x1ff, 0x100+state.c.SP, 0x20);\n      default: return isDebuggable(this.machine) && this.machine.getDebugInfo(category, state);\n    }\n  }\n}\n\nexport abstract class BaseZ80MachinePlatform<T extends Machine> extends BaseMachinePlatform<T> {\n\n  //getOpcodeMetadata     = getOpcodeMetadata_z80;\n  getToolForFilename    = getToolForFilename_z80;\n\n  getDebugCategories() {\n    if (isDebuggable(this.machine))\n      return this.machine.getDebugCategories();\n    else\n      return ['CPU','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_Z80(state.c);\n      case 'Stack': {\n        var sp = (state.c.SP-1) & 0xffff;\n        var start = sp & 0xff00;\n        var end = start + 0xff;\n        if (sp == 0) sp = 0x10000;\n        return dumpStackToString(<Platform><any>this, [], start, end, sp, 0xcd);\n      }\n      default: return isDebuggable(this.machine) && this.machine.getDebugInfo(category, state);\n    }\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    return disassembleZ80(pc, read(pc), read(pc+1), read(pc+2), read(pc+3));\n  }\n\n}\n\nexport abstract class Base6809MachinePlatform<T extends Machine> extends BaseMachinePlatform<T> {\n\n  getToolForFilename    = getToolForFilename_6809;\n\n  getDebugCategories() {\n    if (isDebuggable(this.machine))\n      return this.machine.getDebugCategories();\n    else\n      return ['CPU','Stack'];\n  }\n  getDebugInfo(category:string, state:EmuState) : string {\n    switch (category) {\n      case 'CPU':   return cpuStateToLongString_6809(state.c);\n      case 'Stack': {\n        var sp = (state.c.SP-1) & 0xffff;\n        var start = sp & 0xff00;\n        var end = start + 0xff;\n        if (sp == 0) sp = 0x10000;\n        return dumpStackToString(<Platform><any>this, [], start, end, sp, 0x17, true);\n      }\n      default: return super.getDebugInfo(category, state);\n    }\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    // TODO: don't create new CPU\n    return Object.create(CPU6809()).disasm(read(pc), read(pc+1), read(pc+2), read(pc+3), read(pc+4), pc);\n  }\n}\n\n///\n\nclass SerialIOVisualizer {\n\n  textarea : HTMLTextAreaElement;\n  //vlist: VirtualTextScroller;\n  device: HasSerialIO;\n  lastOutCount = -1;\n  lastInCount = -1;\n\n  constructor(parentElement: HTMLElement, device: HasSerialIO) {\n    this.device = device;\n    this.textarea = document.createElement(\"textarea\");\n    this.textarea.classList.add('transcript');\n    this.textarea.classList.add('transcript-style-2');\n    this.textarea.style.display = 'none';\n    parentElement.appendChild(this.textarea);\n    /*\n    this.vlist = new VirtualTextScroller(parentElement);\n    this.vlist.create(parentElement, 1024, this.getMemoryLineAt.bind(this));\n    this.vlist.maindiv.style.height = '8em';\n    this.vlist.maindiv.style.overflow = 'clip';\n    */\n  }\n  reset() {\n    this.lastOutCount = 0;\n    this.lastInCount = 0;\n    this.textarea.style.display = 'none';\n  }\n  refresh() {\n    var lastop = '';\n    if (this.device.serialOut.length != this.lastOutCount) {\n      var s = '';\n      for (var ev of this.device.serialOut) {\n        if (lastop != ev.op) {\n          if (s != '') s += '\\n';\n          if (ev.op === 'read') s += '<< ';\n          else if (ev.op === 'write') s += '>> ';\n          lastop = ev.op;\n        }\n        if (ev.value == 10) { s += '\\u21b5'; lastop = ''; }\n        else { s += byteToASCII(ev.value); }\n      }\n      this.textarea.value = s;\n      this.lastOutCount = this.device.serialOut.length;\n      this.textarea.style.display = 'block';\n    }\n  }\n}\n"],
  "mappings": "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AAQ,SAAS,OAAO,YAAY,YAAY,YAAY,SAAS,QAAQ,QAAQ,SAAS,OAAO,SAAS,WAAW,YAAY,SAAS,QAAQ,QAAQ,SAAS,MAAM,OAAO,YAAY,YAAY,SAAS,QAAQ,QAAQ,SAAS,MAAM,UAAU,WAAW,aAAa,SAAS,QAAQ,QAAQ,SAAS,MAAM,SAAS,YAAY,aAAa,SAAS,QAAQ,QAAQ,SAAS,MAAM,UAAU,WAAW,YAAY,SAAS,WAAW,WAAW,YAAY,MAAM,SAAS,YAAY,YAAY,SAAS,QAAQ,QAAQ,SAAS,MAAM,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,YAAY,YAAY,YAAY,YAAY,YAAY,YAAY,OAAO,YAAY,SAAS,SAAS,SAAS,SAAS,SAAS,SAAS,YAAY,SAAS,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,aAAa,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,aAAa,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,UAAU,UAAU,UAAU,UAAU,UAAU,UAAU,aAAa,UAAU,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,QAAQ,WAAW,QAAQ,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,UAAU,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,UAAU,OAAO,SAAS,SAAS,WAAW,QAAQ,aAAa,UAAU,UAAU,UAAU,QAAQ,MAAM,UAAU,UAAU,YAAY,UAAU,UAAU,UAAU,SAAS,SAAS,WAAW,YAAY,aAAa,UAAU,QAAQ,UAAU,QAAQ,MAAM,UAAU,WAAW,YAAY,SAAS,UAAU,UAAU,SAAS,SAAS,WAAW,aAAa,aAAa,UAAU,QAAQ,UAAU,SAAS,UAAU,WAAW,WAAW,aAAa,SAAS,QAAQ,UAAU,QAAQ,SAAS,UAAU,KAAK,YAAY,U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EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAC/B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAGjCC,GAAU,CACR,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAC9B,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAGjjCC,GAAQ,SAASC,EAAEC,EAAEC,EAAG,CAAC3B,KAASyB,EAAEC,EAAEC,EAAGA,GAAG,GAAI,MAAO,CAAG,EAC1DC,EAAS,SAASH,EAAEC,EAAEC,EAAG,CAAC3B,KAASyB,EAAEC,EAAEC,EAAGA,GAAG,GAAI,QAAS,EAAI,EAC9DE,EAAO,UAAW,CAAC,OAAQpC,GAAI,GAAGC,CAAG,EACrCoC,GAAO,SAASC,EAAG,CAACtC,EAAMsC,GAAG,EAAI,IAAKrC,EAAGqC,EAAE,GAAK,EAChDC,GAAQ,SAASN,EAAG,CACpBP,EAAO,EAAErB,EAAI4B,EAAI,GAAI,CACzB,EACIO,EAAQ,SAASP,EAAG,CACpBP,EAAO,EAAErB,EAAI4B,EAAI,GAAI,EACrBP,EAAO,EAAErB,EAAK4B,GAAG,EAAK,GAAI,CAC9B,EAEIQ,GAAS,SAASR,EAAG,CACrBP,EAAO,EAAEtB,EAAI6B,EAAI,GAAI,CACzB,EACIS,GAAS,SAAST,EAAG,CACrBP,EAAO,EAAEtB,EAAI6B,EAAI,GAAI,EACrBP,EAAO,EAAEtB,EAAK6B,GAAG,EAAK,GAAI,CAC9B,EACIU,GAAQ,UAAW,CACnB,OAAOhB,EAAOtB,GAAI,CACtB,EACIuC,GAAQ,UAAW,CACnB,OAAOjB,EAAOtB,GAAI,EAAI,IAAMsB,EAAOtB,GAAI,CAC3C,EAEIwC,EAAS,UAAW,CACpB,OAAOlB,EAAOvB,GAAI,CACtB,EACI0C,GAAS,UAAW,CACpB,OAAOnB,EAAOvB,GAAI,EAAI,IAAMuB,EAAOvB,GAAI,CAC3C,EAEI2C,GAAO,SAASC,EAAS,CACvB,IAAIC,EAAI,EACDD,EAAS,MAAOR,EAAMlC,CAAE,EAAE2C,GAAK,GAC/BD,EAAS,KAAOR,EAAMpC,CAAE,EAAE6C,GAAK,GAC/BD,EAAS,KAAMR,EAAMrC,CAAE,EAAE8C,GAAK,GAC9BD,EAAS,KAAMR,EAAMtC,CAAE,EAAE+C,GAAK,GAC9BD,EAAS,IAAKT,GAAM/B,CAAE,EAAGyC,KACzBD,EAAS,IAAKT,GAAMtC,CAAE,EAAGgD,KACzBD,EAAS,IAAKT,GAAMvC,CAAE,EAAGiD,KACzBD,EAAS,IAAKT,GAAMhC,CAAE,EAAG0C,KAC7BzB,GAAGyB,CACZ,EACIC,GAAO,SAASF,EAAS,CACvB,IAAIC,EAAI,EACDD,EAAS,MAAON,GAAOpC,CAAE,EAAE2C,GAAK,GAChCD,EAAS,KAAON,GAAOrC,CAAE,EAAE4C,GAAK,GAChCD,EAAS,KAAMN,GAAOvC,CAAE,EAAE8C,GAAK,GAC/BD,EAAS,KAAMN,GAAOxC,CAAE,EAAE+C,GAAK,GAC/BD,EAAS,IAAKP,GAAOjC,CAAE,EAAGyC,KAC1BD,EAAS,IAAKP,GAAOxC,CAAE,EAAGgD,KAC1BD,EAAS,IAAKP,GAAOzC,CAAE,EAAGiD,KAC1BD,EAAS,IAAKP,GAAOlC,CAAE,EAAG0C,KAC9BzB,GAAGyB,CACZ,EACIE,GAAO,SAASH,EAAS,CACvB,IAAIC,EAAI,EACJD,EAAS,IAAKzC,EAAKoC,GAAM,EAAGM,KAC5BD,EAAS,IAAKhD,EAAK2C,GAAM,EAAGM,KAC5BD,EAAS,IAAK/C,EAAK0C,GAAM,EAAGM,KAC5BD,EAAS,IAAKxC,EAAKmC,GAAM,EAAGM,KAC5BD,EAAS,KAAM9C,EAAK0C,GAAM,EAAEK,GAAK,GACjCD,EAAS,KAAM7C,EAAKyC,GAAM,EAAEK,GAAK,GACjCD,EAAS,KAAO5C,EAAKwC,GAAM,EAAEK,GAAK,GAClCD,EAAS,MAAO1C,EAAKsC,GAAM,EAAEK,GAAK,GACtCzB,GAAGyB,CACT,EACIG,GAAO,SAASJ,EAAS,CACvB,IAAIC,EAAI,EACJD,EAAS,IAAKzC,EAAKsC,EAAO,EAAGI,KAC7BD,EAAS,IAAKhD,EAAK6C,EAAO,EAAGI,KAC7BD,EAAS,IAAK/C,EAAK4C,EAAO,EAAGI,KAC7BD,EAAS,IAAKxC,EAAKqC,EAAO,EAAGI,KAC7BD,EAAS,KAAM9C,EAAK4C,GAAO,EAAEG,GAAK,GAClCD,EAAS,KAAM7C,EAAK2C,GAAO,EAAEG,GAAK,GAClCD,EAAS,KAAO3C,EAAKyC,GAAO,EAAEG,GAAK,GACnCD,EAAS,MAAO1C,EAAKwC,GAAO,EAAEG,GAAK,GACvCzB,GAAGyB,CACT,EAGII,GAAS,SAASC,EAAY,CAC9B,OAAOA,EAAa,GAAK,CACtB,IAAK,GACA,OAAOlB,EAAK,EACjB,IAAK,GACF,OAAOlC,EACV,IAAK,GACF,OAAOC,EACV,IAAK,GACF,OAAOC,EACV,IAAK,GACF,OAAOC,EACV,IAAK,GACF,OAAOC,EACV,IAAK,GACF,OAAON,EACV,IAAK,GACF,OAAOC,EACV,IAAK,IACF,OAAOM,EACV,IAAK,IACF,OAAOC,EACV,QACG,OAAO,IACV,CACP,EACI+C,GAAS,SAASD,EAAYhB,EAAG,CACjC,OAAOgB,EAAa,GACjB,CACA,IAAK,GACAjB,GAAKC,CAAC,EAAE,OACb,IAAK,GACFpC,EAAKoC,EAAG,OACX,IAAK,GACFnC,EAAKmC,EAAG,OACX,IAAK,GACFlC,EAAKkC,EAAG,OACX,IAAK,GACFjC,EAAKiC,EAAG,OACX,IAAK,GACFhC,EAAKgC,EAAG,OACX,IAAK,GACFtC,EAAKsC,EAAG,OACX,IAAK,GACFrC,EAAKqC,EAAG,OACX,IAAK,IACF/B,EAAK+B,EAAG,OACX,IAAK,IACF9B,EAAK8B,EAAG,OACX,QACG,MACH,CACP,EAEIkB,GAAS,SAASF,EAAYG,EAClC,CAEG,IAAIT,EAASM,EAAa,KACtBN,GAAU,KAAQA,GAAU,KAC7BA,EAAS,GAEPS,GAEET,EAASK,GAAOC,GAAY,CAAC,EAC7BC,GAAOD,GAAY,EAAGD,GAAOC,CAAU,CAAC,EACxCC,GAAOD,EAAYN,CAAM,GAGzBO,GAAOD,EAAYD,GAAOC,GAAY,CAAC,CAAC,CAElD,EAEII,GAAS,SAASC,EAAG,CACrB,OAAQA,EAAE,IAAMA,EAAE,IAAKA,CAC3B,EACIC,GAAW,SAASD,EAAG,CACvB,OAAQA,EAAE,MAAQA,EAAE,MAAOA,CAC/B,EAEIE,EAAQ,UAAW,CACnB,IAAIvB,EAAIX,EAAOrB,GAAI,EACnB,OAAAA,GAAM,MACCgC,CACX,EACIwB,EAAU,UAAW,CACrB,IAAIC,EAAKpC,EAAOrB,GAAI,EACpBA,GAAM,MACN,IAAI0D,EAAKrC,EAAOrB,GAAI,EACpB,OAAAA,GAAM,MACCyD,EAAG,IAAIC,CAClB,EAEIC,EAAW,SAASC,EAAM,CAC1B,IAAIH,EAAKpC,EAAOuC,GAAM,EACtBA,GAAQ,MACR,IAAIF,EAAKrC,EAAOuC,GAAM,EACtB,OAAAA,GAAQ,MACDH,EAAG,IAAIC,CAClB,EACIG,GAAY,SAASD,EAAK5B,EAAG,CAC7BZ,EAAOwC,IAAQ5B,GAAG,EAAG,GAAI,EACzB4B,GAAQ,MACRxC,EAAOwC,EAAK5B,EAAE,GAAI,CACtB,EAEI8B,EAAW,UAAW,CACtB,IAAIC,EAAKR,EAAM,EACXS,EACJ,OAAQD,EAAK,GAAM,CACf,IAAK,GACDC,EAAOpE,EAAI,MACf,IAAK,IACDoE,EAAOnE,EAAI,MACf,IAAK,IACDmE,EAAOlE,EAAI,MACf,IAAK,IACDkE,EAAOjE,EAAI,KACnB,CAEA,IAAIkE,EAAO,KACPL,EAAO,KACPM,EAEJ,GAAIH,EAAK,IACN,CACA,OAAQA,EAAK,GACV,CACA,IAAK,GACFH,EAAOI,EACPC,EAAOD,EAAO,EACd9C,GAAK,EACL,MACH,IAAK,GACF0C,EAAOI,EACPC,EAAOD,EAAO,EACd9C,GAAK,EACL,MACH,IAAK,GACF+C,EAAOD,EAAO,EACdJ,EAAOK,EACP/C,GAAK,EACL,MACH,IAAK,GACF+C,EAAOD,EAAO,EACdJ,EAAOK,EACP/C,GAAK,EACL,MACH,IAAK,GACF0C,EAAOI,EACP,MACH,IAAK,GAEFJ,EAAOI,EAAOZ,GAAOzD,CAAE,EACvBuB,GAAK,EACL,MACH,IAAK,GACD0C,EAAOI,EAAOZ,GAAO1D,CAAE,EACvBwB,GAAK,EACN,MACH,IAAK,GACF0C,EAAO,EACP,MACH,IAAK,GACFA,EAAOI,EAAOZ,GAAOG,EAAM,CAAC,EAC5BrC,GAAK,EACL,MACH,IAAK,GACF0C,EAAOI,EAAOV,GAASE,EAAQ,CAAC,EAChCtC,GAAK,EACL,MACH,IAAK,IACF0C,EAAO,EACP,MACH,IAAK,IACF1C,GAAK,EACL0C,EAAOI,EAAOlC,EAAK,EACnB,MACH,IAAK,IACFoC,EAAQd,GAAOG,EAAM,CAAC,EACtBK,EAAO5D,EAAKkE,EACZhD,GAAK,EACL,MACH,IAAK,IACFgD,EAASZ,GAASE,EAAQ,CAAC,EAC3BI,EAAO5D,EAAKkE,EACZhD,GAAK,EACL,MACH,IAAK,IACF0C,EAAO,EACP,MACH,IAAK,IACF1C,GAAK,EACL0C,EAAOJ,EAAQ,EACf,KACH,CAEHI,GAAQ,MAEJG,EAAK,KAENH,EAAOvC,EAAOuC,CAAI,EAAE,IAAIvC,EAAQuC,EAAK,EAAK,KAAM,EAChD1C,GAAK,EAER,KAEA,CACA,IAAIiD,EAAQJ,EAAK,GACbI,EAAQ,KACTA,GAAS,IACZP,EAAOI,EAAOG,EACdjD,GAAK,CACL,CAEH,GAAI+C,IAAO,KACP,OAAQF,EAAK,GAAM,CACf,IAAK,GACDnE,EAAKqE,EAAM,MACf,IAAK,IACDpE,EAAKoE,EAAM,MACf,IAAK,IACDnE,EAAKmE,EAAM,MACf,IAAK,IACDlE,EAAKkE,EAAM,KACnB,CAIJ,OAAOL,EAAO,KAClB,EAEIQ,GAAY,SAASC,EAAM,CAC3BpE,GAAM,EAAEI,EAASC,GACb+D,IAAO,IAAGpE,GAAMI,GAChBgE,EAAO,QAAQpE,GAAMK,EAC7B,EAIIgE,EAAO,SAAS3C,EAAG,CACpB,OAAAA,IACAA,GAAK,IACL1B,GAAM,EAAEI,EAASD,EAAaE,GAC9BL,GAAMuB,EAAQG,CAAC,GACXA,IAAM,GAAKA,GAAK,OAAM1B,GAAMG,GACzBuB,CACV,EACI4C,EAAO,SAAS5C,EAAG,CACpB,OAAAA,IACAA,GAAK,IACL1B,GAAM,EAAEI,EAASD,EAAaE,GAC9BL,GAAMuB,EAAQG,CAAC,GACXA,IAAM,KAAQA,GAAK,OAAM1B,GAAMG,GAC5BuB,CACV,EACI6C,GAAO,SAAS7C,EAAEK,EAAG,CACtB,IAAIyC,EAAO9C,EAAEK,EAEb,OAAA/B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,GACxCL,GAAMuB,EAAQiD,EAAO,GAAI,EACrBA,EAAK,MAAOxE,GAAIE,GACpBsB,GAAME,EAAEK,EAAEyC,CAAI,EACPA,EAAK,GACf,EACIC,EAAS,SAAS/C,EAAEK,EAAG,CACxB,IAAIyC,EAAO9C,EAAEK,EAEb,OAAA/B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,IACnCmE,EAAK,SAAU,IAAGxE,GAAII,GACvBoE,EAAK,QAAQxE,GAAIK,GACjBmE,EAAK,QAASxE,GAAIE,GACtB0B,EAAOF,EAAEK,EAAEyC,CAAI,EACRA,EAAK,KACf,EACIE,GAAO,SAAShD,EAAEK,EAAG,CACtB,IAAIyC,EAAO9C,EAAEK,EAEb,OAAA/B,GAAM,EAAEO,GAAcL,EAAUE,EAASD,EAAaE,GACtDL,GAAMuB,EAAQiD,EAAO,GAAI,EACrBA,EAAK,MAAOxE,GAAIE,GACpBsB,GAAME,EAAEK,EAAEyC,CAAI,GACTA,EAAO9C,EAAIK,GAAG,KAAM/B,GAAMO,IACxBiE,EAAK,GACf,EACIG,GAAS,SAASjD,EAAEK,EAAG,CACxB,IAAIyC,EAAO9C,EAAEK,EAEb,OAAA/B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,IACnCmE,EAAK,SAAU,IAAGxE,GAAII,GACvBoE,EAAK,QAAQxE,GAAIK,GACjBmE,EAAK,QAASxE,GAAIE,GACtB0B,EAAOF,EAAEK,EAAEyC,CAAI,EACRA,EAAK,KACf,EACII,EAAO,SAASlD,EAAEK,EAAG,CACtB,IAAIyC,EAAO9C,EAAEK,GAAG/B,EAAKE,GAErB,OAAAF,GAAM,EAAEO,GAAcL,EAAUE,EAASD,EAAaE,GACtDL,GAAMuB,EAAQiD,EAAO,GAAI,EACrBA,EAAK,MAAOxE,GAAIE,GACpBsB,GAAME,EAAEK,EAAEyC,CAAI,GACTA,EAAO9C,EAAIK,GAAG,KAAM/B,GAAMO,IACxBiE,EAAK,GACf,EACIK,GAAO,SAASnD,EAAEK,EAAG,CACtB,IAAIyC,EAAO9C,EAAEK,GAAG/B,EAAKE,GAErB,OAAAF,GAAM,EAAEE,EAAUE,EAASD,EAAaE,GACxCL,GAAMuB,EAAQiD,EAAO,GAAI,EACrBA,EAAK,MAAOxE,GAAIE,GACpBsB,GAAME,EAAEK,EAAEyC,CAAI,EACPA,EAAK,GACf,EACIM,GAAO,SAASpD,EAAEK,EAAG,CACtB,IAAIyC,EAAO9C,EAAEK,EAEb/B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,GACxCL,GAAMuB,EAAQiD,EAAO,GAAI,EACrBA,EAAK,MAAOxE,GAAIE,GACpBsB,GAAME,EAAEK,EAAEyC,CAAI,CAEjB,EACIO,EAAS,SAASrD,EAAEK,EAAG,CACxB,IAAIyC,EAAO9C,EAAEK,EAEb/B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,IACnCmE,EAAK,SAAU,IAAGxE,GAAII,GACvBoE,EAAK,QAAQxE,GAAIK,GACjBmE,EAAK,QAASxE,GAAIE,GACtB0B,EAAOF,EAAEK,EAAEyC,CAAI,CAElB,EAEIQ,EAAO,SAAStD,EAAG,CACnB,OAAA1B,GAAM,EAAEE,EAAUE,EAASD,EAAaE,GACrCqB,GAAK,MACN1B,GAAMG,GACTuB,GAAM,CAACA,EAAG,KAAQ,EACdA,IAAM,IAAG1B,GAAMI,GACfsB,EAAI,MAAM1B,GAAMK,EAAaH,GAC1BwB,CACV,EAEIuD,GAAO,SAASvD,EAAG,CACnB,OAAA1B,GAAM,EAAEI,EAASF,EAAUG,GACvBqB,EAAI,IAAM1B,GAAME,GACpBwB,IAAM,EACFA,IAAM,IAAG1B,GAAMI,GACZsB,EAAI,GACf,EACIwD,GAAO,SAASxD,EAAG,CACnB,OAAA1B,GAAM,EAAEI,EAASF,EAAUG,GACvBqB,EAAI,IAAM1B,GAAME,GACpBwB,EAAKA,EAAI,IAASA,GAAG,EACrB1B,GAAMuB,EAAQG,CAAC,EACRA,CACX,EACIyD,GAAO,SAASzD,EAAG,CACnB,IAAI8C,EAAO9C,EACX,OAAA1B,GAAM,EAAEI,EAASF,EAAUG,EAAaF,GACpCuB,EAAI,MAAM1B,GAAME,GACpBwB,IAAM,EACN1B,GAAMuB,EAAQG,CAAC,GACVA,EAAI8C,GAAQ,MAAMxE,GAAIG,GACpBuB,CACX,EACI0D,GAAO,SAAS1D,EAAG,CACnB,IAAI8C,EAAO9C,EACP2D,EAAOrF,EAAGE,EACd,OAAAF,GAAM,EAAEI,EAASF,EAAUG,EAAaF,GACpCuB,EAAI,MAAM1B,GAAME,GACpBwB,EAAIA,GAAG,EAAI2D,EACXrF,GAAMuB,EAAQG,CAAC,GACVA,EAAI8C,GAAQ,MAAMxE,GAAIG,GACpBuB,CACX,EACI4D,GAAO,SAAS5D,EAAG,CACnB,IAAI2D,EAAOrF,EAAGE,EACd,OAAAF,GAAM,EAAEI,EAASF,EAAUG,GACvBqB,EAAI,IAAM1B,GAAME,GACpBwB,EAAIA,GAAG,EAAI2D,GAAM,EACjBrF,GAAMuB,EAAQG,CAAC,EAERA,CACX,EAEI6D,GAAO,SAAS7D,EAAEK,EAAG,CACrB,OAAA/B,GAAM,EAAEI,EAASC,EAAaF,GAC9BuB,GAAKK,EACL/B,GAAMuB,EAAQG,CAAC,EACRA,CACX,EACI8D,GAAM,SAAS9D,EAAEK,EAAG,CACpB,OAAA/B,GAAM,EAAEI,EAASC,EAAaF,GAC9BuB,GAAKK,EACL/B,GAAMuB,EAAQG,CAAC,EACRA,CACX,EACI+D,GAAO,SAAS/D,EAAEK,EAAG,CACrB,OAAA/B,GAAM,EAAEI,EAASC,EAAaF,GAC9BuB,GAAKK,EACL/B,GAAMuB,EAAQG,CAAC,EACRA,CACX,EACIgE,GAAO,SAAShE,EAAG,CACnB,OAAA1B,GAAM,EAAEI,EAASC,EAAaF,GAC9BuB,GAAK,IACL1B,GAAMuB,EAAQG,CAAC,EACf1B,GAAME,EACCwB,CACX,EAGIiE,EAAQ,UAAW,CAEnB,OAAO1F,EAAG,IAAMqD,EAAM,CAC1B,EAEIsC,GAAO,UAAW,CAClB,IAAIC,EAAO5E,EAEP0C,EAAO,KACPG,EAAK,KAELgC,EAAQ/F,EACRgG,EAASzC,EAAM,EAEnB,OADArC,GAAGI,GAAO0E,CAAM,EACRA,EAAQ,CACZ,IAAK,GACDpC,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMqB,EAAK5D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAM+B,GAAKtE,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMsB,GAAK7D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAM2B,GAAKlE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMuB,GAAK9D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMwB,GAAK/D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,GACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMyB,GAAKhE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,IACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMW,EAAKlD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,IACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAMU,EAAKjD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,IACDA,EAAOgC,EAAM,EACb7B,EAAK1C,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQuC,CAAE,EACpB,MAEA,IAAK,IACDH,EAAOgC,EAAM,EACb5F,EAAK4D,EACT,MACA,IAAK,IACDA,EAAOgC,EAAM,EACbxE,EAAOwC,EAAK,CAAC,EACb3D,GAAI,EAAEE,EAAQG,EAAWF,GACzBH,GAAMI,EACV,MAEA,IAAK,IACD,MACJ,IAAK,IACD,MACJ,IAAK,IACDuD,EAAON,GAASE,EAAQ,CAAC,EACzBxD,GAAM4D,EACN,MACJ,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACzBtB,EAAMlC,CAAE,EACRA,GAAM4D,EACN,MACJ,IAAK,IACD,IAAIqC,EAAK,EACLC,EAAMxG,EAAK,IAAMyG,GAAMzG,EAAK,IAC5ByG,GAAI,GAAQlG,EAAK,MAAOgG,GAAM,GAC9BC,EAAI,KAAQC,GAAI,IAAOF,GAAM,KAC7BC,EAAI,KAAQjG,EAAK,KAAOgG,GAAM,IAClCrC,EAAOqC,EAAKvG,EACZO,GAAO,EAAEE,EAAUG,EAAaD,EAASD,GACrCwD,EAAO,MACR3D,GAAOE,GACVT,EAAKkE,EAAO,IACZ3D,GAAOuB,EAAQ9B,CAAE,EACjB,MACJ,IAAK,IACDO,GAAMsD,EAAM,EACZ,MACJ,IAAK,IACDtD,GAAMsD,EAAM,EACZ,MACJ,IAAK,IACD7D,EAAMC,EAAK,IAAM,IAAK,EACtByE,GAAUtC,EAAK,CAAC,EAChB7B,GAAM,CAACG,EACP,MACJ,IAAK,IACD2D,EAAKR,EAAM,EACXL,GAAOa,EAAG,EAAI,EACd,MACJ,IAAK,IACDA,EAAKR,EAAM,EACXL,GAAOa,EAAG,EAAK,EACf,MAEJ,IAAK,IACDH,EAAOR,GAAOG,EAAM,CAAC,EACrBvD,GAAM4D,EACN,MACJ,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACrB,MACJ,IAAK,IACDK,EAAOR,GAAOG,EAAM,CAAC,EACftD,GAAIE,EAAUE,KAAUL,GAAM4D,GACxC,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACjBtD,GAAIE,EAAUE,KAASL,GAAM4D,GACrC,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACftD,EAAGE,IAAUH,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACjBtD,EAAGE,IAASH,GAAM4D,GAC1B,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACftD,EAAGI,IAASL,GAAM4D,GAC5B,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACjBtD,EAAGI,IAAQL,GAAM4D,GACzB,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACftD,EAAGG,IAAaJ,GAAM4D,GAChC,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACjBtD,EAAGG,IAAYJ,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACftD,EAAGK,IAAaN,GAAM4D,GAChC,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACjBtD,EAAGK,IAAYN,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACdtD,EAAGK,GAAgBL,EAAGG,IAAa,IAAKJ,GAAM4D,GACzD,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EAChBtD,EAAGK,GAAgBL,EAAGG,IAAa,IAAIJ,GAAM4D,GACtD,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,EACdtD,EAAGK,GAAgBL,EAAGG,IAAa,GAAOH,EAAGI,IAAUL,GAAM4D,GACxE,MACA,IAAK,IACDA,EAAOR,GAAOG,EAAM,CAAC,GAChBtD,EAAGK,GAAgBL,EAAGG,IAAa,GAAOH,EAAGI,KAASL,GAAM4D,GACrE,MAEA,IAAK,IACDhE,EAAKkE,EAAS,EACVlE,IAAK,EAAGK,GAAII,EAAaJ,GAAI,CAACI,EACtC,MACA,IAAK,IACDR,EAAKiE,EAAS,EACVjE,IAAK,EAAGI,GAAII,EAAaJ,GAAI,CAACI,EACtC,MACA,IAAK,IACDN,EAAK+D,EAAS,EAClB,MACA,IAAK,IACDhE,EAAKgE,EAAS,EAClB,MAEA,IAAK,IACDrB,GAAKc,EAAM,CAAC,EAChB,MACA,IAAK,IACDV,GAAKU,EAAM,CAAC,EAChB,MACA,IAAK,IACDX,GAAKW,EAAM,CAAC,EAChB,MACA,IAAK,IACDT,GAAKS,EAAM,CAAC,EAChB,MACA,IAAK,IACDvD,EAAKsC,GAAM,EACf,MACA,IAAK,IACD1C,GAAMD,EACV,MACA,IAAK,IACDM,EAAKoC,GAAM,EACPpC,EAAKS,IACLQ,GAAG,EACHxB,EAAK2C,GAAM,EACX1C,EAAK0C,GAAM,EACXnC,EAAKmC,GAAM,EACXzC,EAAK0C,GAAM,EACXzC,EAAKyC,GAAM,EACXxC,EAAKwC,GAAM,GAEftC,EAAKsC,GAAM,EACf,MACA,IAAK,IACDrC,GAAMsD,EAAM,EAChB,MACA,IAAK,IACDK,EAAOlE,EAAKC,EACRiE,IAAO,EAAG3D,GAAII,EAAaJ,GAAI,CAACI,EAChCuD,EAAK,IAAM3D,GAAIE,EAAcF,GAAI,CAACE,EACtC4B,GAAK6B,CAAI,EACb,MACA,IAAK,IACD3D,GAAMS,EACNwB,EAAMlC,CAAE,EACRkC,EAAMpC,CAAE,EACRoC,EAAMrC,CAAE,EACRqC,EAAMtC,CAAE,EACRqC,GAAM/B,CAAE,EACR+B,GAAMtC,CAAE,EACRsC,GAAMvC,CAAE,EACRuC,GAAMhC,CAAE,EACRA,GAAMM,EAAYE,EAClBT,EAAK2D,EAAS9C,CAAM,EACxB,MAEA,IAAK,IACDnB,EAAKuF,EAAKvF,CAAE,EAChB,MACA,IAAK,IACDA,EAAKiG,GAAKjG,CAAE,EAChB,MACA,IAAK,IACDA,EAAKwF,GAAKxF,CAAE,EAChB,MACA,IAAK,IACDA,EAAK6F,GAAK7F,CAAE,EAChB,MACA,IAAK,IACDA,EAAKyF,GAAKzF,CAAE,EAChB,MACA,IAAK,IACDA,EAAK0F,GAAK1F,CAAE,EAChB,MACA,IAAK,IACDA,EAAK2F,GAAK3F,CAAE,EAChB,MACA,IAAK,IACDA,EAAK6E,EAAK7E,CAAE,EAChB,MACA,IAAK,IACDA,EAAK4E,EAAK5E,CAAE,EAChB,MACA,IAAK,IACDO,GAAM,EAAEI,EAAOC,EAAWF,GAC1BH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,IACDA,EAAK,EACLO,GAAM,EAAEK,EAAWF,EAAWD,GAC9BF,GAAMI,EACV,MAEA,IAAK,IACDV,EAAKsF,EAAKtF,CAAE,EAChB,MACA,IAAK,IACDA,EAAKgG,GAAKhG,CAAE,EAChB,MACA,IAAK,IACDA,EAAKuF,GAAKvF,CAAE,EAChB,MACA,IAAK,IACDA,EAAK4F,GAAK5F,CAAE,EAChB,MACA,IAAK,IACDA,EAAKwF,GAAKxF,CAAE,EAChB,MACA,IAAK,IACDA,EAAKyF,GAAKzF,CAAE,EAChB,MACA,IAAK,IACDA,EAAK0F,GAAK1F,CAAE,EAChB,MACA,IAAK,IACDA,EAAK4E,EAAK5E,CAAE,EAChB,MACA,IAAK,IACDA,EAAK2E,EAAK3E,CAAE,EAChB,MACA,IAAK,IACDM,GAAM,EAAEI,EAAOC,EAAWF,GAC1BH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,IACDA,EAAK,EACLM,GAAM,EAAEK,EAAWF,EAAWD,GAC9BF,GAAMI,EACV,MAEA,IAAK,IACDuD,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMqB,EAAK5D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,IACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAM+B,GAAKtE,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMsB,GAAK7D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAM2B,GAAKlE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMuB,GAAK9D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMwB,GAAK/D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMyB,GAAKhE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMW,EAAKlD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAMU,EAAKjD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,KACDA,EAAOE,EAAS,EAChBC,EAAK1C,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQuC,CAAE,EACpB,MAEA,IAAK,KACDH,EAAOE,EAAS,EAChB9D,EAAK4D,EACT,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB1C,EAAOwC,EAAK,CAAC,EACb3D,GAAI,EAAEE,EAAQG,EAAWF,GACzBH,GAAMI,EACV,MAGA,IAAK,KACDuD,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMqB,EAAK5D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAM+B,GAAKtE,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMsB,GAAK7D,EAAOuC,CAAI,CAAC,CAAC,EAC/B,MACJ,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAM2B,GAAKlE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMuB,GAAK9D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMwB,GAAK/D,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMyB,GAAKhE,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMW,EAAKlD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAMU,EAAKjD,EAAOuC,CAAI,CAAC,CAAC,EACnC,MAEA,IAAK,KACDA,EAAOJ,EAAQ,EACfO,EAAK1C,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQuC,CAAE,EACpB,MAEA,IAAK,KACDH,EAAOJ,EAAQ,EACfxD,EAAK4D,EACT,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAK,CAAC,EACb3D,GAAI,EAAEE,EAAQG,EAAWF,GACzBH,GAAMI,EACV,MAIA,IAAK,KACDX,EAAK8E,GAAK9E,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACDwB,GAAKrF,EAAI6D,EAAM,CAAC,EACpB,MACA,IAAK,KACD7D,EAAKoF,GAAKpF,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACDxB,GAAK2C,EAAO5C,EAAK,EAAE0B,EAAQ,CAAC,CAAC,EACjC,MACA,IAAK,KACD9D,EAAKgG,GAAKhG,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACDmC,GAAKhG,EAAI6D,EAAM,CAAC,EACpB,MACA,IAAK,KACD7D,EAAK6D,EAAM,EACXtD,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDA,EAAK8F,GAAK9F,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACD7D,EAAKmF,EAAKnF,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACD7D,EAAK+F,GAAI/F,EAAI6D,EAAM,CAAC,EACxB,MACA,IAAK,KACD7D,EAAKiF,GAAKjF,EAAI6D,EAAM,CAAC,EACzB,MACA,IAAK,KACDyB,EAAOpF,EAAI4D,EAAQ,CAAC,EACxB,MAEA,IAAK,KACDI,EAAOR,GAAOG,EAAM,CAAC,EACrBrB,EAAMlC,CAAE,EACRA,GAAI4D,EACR,MACA,IAAK,KACDhE,EAAK4D,EAAQ,EACbY,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MAGA,IAAK,KACDwD,EAAOgC,EAAM,EACblG,EAAK8E,GAAK9E,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbb,GAAKrF,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAKoF,GAAKpF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACb7D,GAAK2C,EAAO5C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAKgG,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbF,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAK2B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOgC,EAAM,EACbxE,EAAOwC,EAAKlE,CAAE,EACdO,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOgC,EAAM,EACblG,EAAK8F,GAAK9F,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAKmF,EAAKnF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAK+F,GAAI/F,EAAI2B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACblG,EAAKiF,GAAKjF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbZ,EAAOpF,EAAI+D,EAASC,CAAI,CAAC,EAC7B,MAEA,IAAK,KACDA,EAAOgC,EAAM,EACb1D,EAAMlC,CAAE,EACRA,EAAG4D,EACP,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbhG,EAAK+D,EAASC,CAAI,EAClBQ,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb/B,GAAUD,EAAKhE,CAAE,EACjBwE,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBpE,EAAK8E,GAAK9E,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBiB,GAAKrF,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAKoF,GAAKpF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB/B,GAAK2C,EAAO5C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAKgG,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB4B,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAK2B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOE,EAAS,EAChB1C,EAAOwC,EAAKlE,CAAE,EACdO,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOE,EAAS,EAChBpE,EAAK8F,GAAK9F,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAKmF,EAAKnF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAK+F,GAAI/F,EAAI2B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBpE,EAAKiF,GAAKjF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBkB,EAAOpF,EAAI+D,EAASC,CAAI,CAAC,EAC7B,MAEA,IAAK,KACDA,EAAOE,EAAS,EAChB5B,EAAMlC,CAAE,EACRA,EAAG4D,EACP,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBlE,EAAK+D,EAASC,CAAI,EAClBQ,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBD,GAAUD,EAAKhE,CAAE,EACjBwE,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MAGA,IAAK,KACDwD,EAAOJ,EAAQ,EACf9D,EAAK8E,GAAK9E,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfuB,GAAKrF,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAKoF,GAAKpF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfzB,GAAK2C,EAAO5C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAKgG,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfkC,GAAKhG,EAAI2B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAK2B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAKlE,CAAE,EACdO,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ9B,CAAE,EACpB,MACA,IAAK,KACDkE,EAAOJ,EAAQ,EACf9D,EAAK8F,GAAK9F,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAKmF,EAAKnF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAK+F,GAAI/F,EAAI2B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf9D,EAAKiF,GAAKjF,EAAI2B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfwB,EAAOpF,EAAI+D,EAASC,CAAI,CAAC,EAC7B,MAEA,IAAK,KACDA,EAAOJ,EAAQ,EACftB,EAAMlC,CAAE,EACRA,EAAG4D,EACP,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf5D,EAAK+D,EAASC,CAAI,EAClBQ,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfK,GAAUD,EAAKhE,CAAE,EACjBwE,GAAUxE,CAAE,EACZK,GAAI,CAACG,EACT,MAIA,IAAK,KACDT,EAAK6E,GAAK7E,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACDwB,GAAKpF,EAAI4D,EAAM,CAAC,EACpB,MACA,IAAK,KACD5D,EAAKmF,GAAKnF,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACDxB,GAAK6C,GAAO9C,EAAK,EAAE0B,EAAQ,CAAC,CAAC,EACjC,MACA,IAAK,KACD7D,EAAK+F,GAAK/F,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACDmC,GAAK/F,EAAI4D,EAAM,CAAC,EACpB,MACA,IAAK,KACD5D,EAAK4D,EAAM,EACXtD,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDA,EAAK6F,GAAK7F,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACD5D,EAAKkF,EAAKlF,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACD5D,EAAK8F,GAAI9F,EAAI4D,EAAM,CAAC,EACxB,MACA,IAAK,KACD5D,EAAKgF,GAAKhF,EAAI4D,EAAM,CAAC,EACzB,MACA,IAAK,KACDK,EAAOJ,EAAQ,EACfzB,GAAK6B,CAAI,EACTQ,GAAUR,CAAI,EACd3D,GAAI,CAACG,EACT,MAEA,IAAK,KACDN,EAAK0D,EAAQ,EACbY,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MAGA,IAAK,KACDwD,EAAOgC,EAAM,EACbjG,EAAK6E,GAAK7E,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbb,GAAKpF,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAKmF,GAAKnF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACb7D,GAAK6C,GAAO9C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAK+F,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbF,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAK0B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOgC,EAAM,EACbxE,EAAOwC,EAAKjE,CAAE,EACdM,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOgC,EAAM,EACbjG,EAAK6F,GAAK7F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAKkF,EAAKlF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAK8F,GAAI9F,EAAI0B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbjG,EAAKgF,GAAKhF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACb7B,EAAKJ,EAASC,CAAI,EAClB7B,GAAKgC,CAAE,EACPK,GAAUL,CAAE,EACZ9D,GAAI,CAACG,EACT,MAEA,IAAK,KACDwD,EAAOgC,EAAM,EACb/B,GAAUD,EAAM9B,EAAK,CAAC,EACtB7B,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb9F,EAAK6D,EAASC,CAAI,EAClBQ,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb/B,GAAUD,EAAK9D,CAAE,EACjBsE,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBnE,EAAK6E,GAAK7E,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBiB,GAAKpF,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAKmF,GAAKnF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB/B,GAAK6C,GAAO9C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAK+F,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChB4B,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAK0B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOE,EAAS,EAChB1C,EAAOwC,EAAKjE,CAAE,EACdM,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOE,EAAS,EAChBnE,EAAK6F,GAAK7F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAKkF,EAAKlF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAK8F,GAAI9F,EAAI0B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBnE,EAAKgF,GAAKhF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBC,EAAKJ,EAASC,CAAI,EAClB7B,GAAKgC,CAAE,EACPK,GAAUL,CAAE,EACZ9D,GAAI,CAACG,EACT,MAEA,IAAK,KACDwD,EAAOE,EAAS,EAChBD,GAAUD,EAAM9B,EAAK,CAAC,EACtB7B,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBhE,EAAK6D,EAASC,CAAI,EAClBQ,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBD,GAAUD,EAAK9D,CAAE,EACjBsE,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MAGA,IAAK,KACDwD,EAAOJ,EAAQ,EACf7D,EAAK6E,GAAK7E,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfuB,GAAKpF,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAKmF,GAAKnF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfzB,GAAK6C,GAAO9C,EAAK,EAAE6B,EAASC,CAAI,CAAC,CAAC,EACtC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAK+F,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfkC,GAAK/F,EAAI0B,EAAOuC,CAAI,CAAC,EACzB,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAK0B,EAAOuC,CAAI,EAChB3D,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOJ,EAAQ,EACfpC,EAAOwC,EAAKjE,CAAE,EACdM,GAAI,EAAEI,EAAOC,EAAWF,GACxBH,GAAMuB,EAAQ7B,CAAE,EACpB,MACA,IAAK,KACDiE,EAAOJ,EAAQ,EACf7D,EAAK6F,GAAK7F,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAKkF,EAAKlF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAK8F,GAAI9F,EAAI0B,EAAOuC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf7D,EAAKgF,GAAKhF,EAAI0B,EAAOuC,CAAI,CAAC,EAC9B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfO,EAAKJ,EAASC,CAAI,EAClB7B,GAAKgC,CAAE,EACPK,GAAUL,CAAE,EACZ9D,GAAI,CAACG,EACT,MAEA,IAAK,KACDwD,EAAOJ,EAAQ,EACfK,GAAUD,EAAM9B,EAAK,CAAC,EACtB7B,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACf1D,EAAK6D,EAASC,CAAI,EAClBQ,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfK,GAAUD,EAAK9D,CAAE,EACjBsE,GAAUtE,CAAE,EACZG,GAAI,CAACG,EACT,MAGA,IAAK,IAIG,OAFA4F,EAASzC,EAAM,EACfrC,GAAGK,GAAQyE,CAAM,EACVA,EAAQ,CACX,IAAK,IACDpC,EAAON,GAASE,EAAQ,CAAC,EACzB,MACJ,IAAK,IACDI,EAAON,GAASE,EAAQ,CAAC,EACnBvD,GAAIE,EAAUE,KAAUL,GAAM4D,GACxC,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACrBvD,GAAIE,EAAUE,KAASL,GAAM4D,GACrC,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACnBvD,EAAGE,IAAUH,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACrBvD,EAAGE,IAASH,GAAM4D,GAC1B,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACnBvD,EAAGI,IAASL,GAAM4D,GAC5B,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACrBvD,EAAGI,IAAQL,GAAM4D,GACzB,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACnBvD,EAAGG,IAAaJ,GAAM4D,GAChC,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACrBvD,EAAGG,IAAYJ,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACnBvD,EAAGK,IAAaN,GAAM4D,GAChC,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACrBvD,EAAGK,IAAYN,GAAM4D,GAC7B,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EAClBvD,EAAGK,GAAgBL,EAAGG,IAAa,IAAKJ,GAAM4D,GACzD,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EACpBvD,EAAGK,GAAgBL,EAAGG,IAAa,IAAIJ,GAAM4D,GACtD,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,EAClBvD,EAAGK,GAAgBL,EAAGG,IAAa,GAAOH,EAAGI,IAAUL,GAAM4D,GACxE,MACA,IAAK,IACDA,EAAON,GAASE,EAAQ,CAAC,GACpBvD,EAAGK,GAAgBL,EAAGG,IAAa,GAAOH,EAAGI,KAASL,GAAM4D,GACrE,MACA,IAAK,IACD3D,GAAMS,EACNwB,EAAMlC,CAAE,EACRkC,EAAMpC,CAAE,EACRoC,EAAMrC,CAAE,EACRqC,EAAMtC,CAAE,EACRqC,GAAM/B,CAAE,EACR+B,GAAMtC,CAAE,EACRsC,GAAMvC,CAAE,EACRuC,GAAMhC,CAAE,EACRA,GAAMM,EAAYE,EAClBT,EAAK2D,EAAS3C,EAAO,EACzB,MACA,IAAK,KACDgE,EAAOlD,EAAK,EAAE0B,EAAQ,CAAC,EAC3B,MACA,IAAK,KACDwB,EAAOnF,EAAG2D,EAAQ,CAAC,EACvB,MACA,IAAK,KACD3D,EAAK2D,EAAQ,EACbY,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACbZ,EAAOlD,EAAK,EAAE6B,EAASC,CAAI,CAAC,EAChC,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbZ,EAAOnF,EAAG8D,EAASC,CAAI,CAAC,EAC5B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACb/F,EAAK8D,EAASC,CAAI,EAClBQ,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb/B,GAAUD,EAAK/D,CAAE,EACjBuE,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBkB,EAAOlD,EAAK,EAAE6B,EAASC,CAAI,CAAC,EAChC,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBkB,EAAOnF,EAAG8D,EAASC,CAAI,CAAC,EAC5B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBjE,EAAK8D,EAASC,CAAI,EAClBQ,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBD,GAAUD,EAAK/D,CAAE,EACjBuE,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfwB,EAAOlD,EAAK,EAAE6B,EAASC,CAAI,CAAC,EAChC,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfwB,EAAOnF,EAAG8D,EAASC,CAAI,CAAC,EAC5B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACf3D,EAAK8D,EAASC,CAAI,EAClBQ,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfK,GAAUD,EAAK/D,CAAE,EACjBuE,GAAUvE,CAAE,EACZI,GAAI,CAACG,EACT,MACA,IAAK,KACDL,EAAKyD,EAAQ,EACbY,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb7F,EAAK4D,EAASC,CAAI,EAClBQ,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOgC,EAAM,EACb/B,GAAUD,EAAK7D,CAAE,EACjBqE,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChB/D,EAAK4D,EAASC,CAAI,EAClBQ,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOE,EAAS,EAChBD,GAAUD,EAAK7D,CAAE,EACjBqE,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfzD,EAAK4D,EAASC,CAAI,EAClBQ,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,MACA,IAAK,KACDwD,EAAOJ,EAAQ,EACfK,GAAUD,EAAK7D,CAAE,EACjBqE,GAAUrE,CAAE,EACZE,GAAI,CAACG,EACT,KACJ,CAER,MAEA,IAAK,IAIG,OAFA4F,EAASzC,EAAM,EACfrC,GAAGK,GAAQyE,CAAM,EACVA,EAAQ,CACX,IAAK,IACD/F,GAAMS,EACNwB,EAAMlC,CAAE,EACRkC,EAAMpC,CAAE,EACRoC,EAAMrC,CAAE,EACRqC,EAAMtC,CAAE,EACRqC,GAAM/B,CAAE,EACR+B,GAAMtC,CAAE,EACRsC,GAAMvC,CAAE,EACRuC,GAAMhC,CAAE,EACRA,GAAMM,EAAYE,EAClBT,EAAK2D,EAAS1C,EAAO,EACzB,MACA,IAAK,KACD+D,EAAOlF,EAAI0D,EAAQ,CAAC,EACxB,MACA,IAAK,KACDwB,EAAOjF,EAAIyD,EAAQ,CAAC,EACxB,MACA,IAAK,KACDI,EAAOgC,EAAM,EACbZ,EAAOlF,EAAI6D,EAASC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOgC,EAAM,EACbZ,EAAOjF,EAAI4D,EAASC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBkB,EAAOlF,EAAI6D,EAASC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOE,EAAS,EAChBkB,EAAOjF,EAAI4D,EAASC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfwB,EAAOlF,EAAI6D,EAASC,CAAI,CAAC,EAC7B,MACA,IAAK,KACDA,EAAOJ,EAAQ,EACfwB,EAAOjF,EAAI4D,EAASC,CAAI,CAAC,EAC7B,KAEJ,CAER,KAGJ,CAEA,OAAAlE,GAAM,IACNC,GAAM,IACNM,GAAM,IACNC,GAAM,IACNN,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,MACNC,GAAM,MACCkB,EAAE4E,CAEb,EAEIM,GAAQ,UAAU,CAClBpG,EAAK2D,EAAShD,EAAQ,EACtBT,EAAK,EACLD,GAAMQ,EAAaF,EACnBW,EAAE,EACFxB,EAAGC,EAAGO,EAAGN,EAAGC,EAAGC,EAAGC,EAAG,CACzB,EAoBIsG,GAAK,CACT,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,QAAQ,EACf,CAAC,EAAI,EAAE,QAAQ,EACf,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,OAAO,EACd,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,GAAG,KAAK,EACb,CAAC,EAAI,GAAG,KAAK,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,GAAG,MAAM,EACd,CAAC,EAAI,GAAG,MAAM,EACd,CAAC,EAAI,GAAG,MAAM,EACd,CAAC,EAAI,GAAG,MAAM,EACd,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,OAAO,EACd,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACbb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,KAAK,EACZ,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,MAAM,EACb,CAAC,EAAI,EAAE,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",
  "names": ["OPS_6502", "disassemble6502", "pc", "b0", "b1", "b2", "op", "s", "am", "isaddr", "offset", "hex", "FastZ80", "coreParameter", "core", "a", "b", "c", "d", "e", "h", "l", "a_prime", "b_prime", "c_prime", "d_prime", "e_prime", "h_prime", "l_prime", "ix", "iy", "i", "r", "sp", "pc", "flags", "flags_prime", "imode", "iff1", "iff2", "halted", "do_delayed_di", "do_delayed_ei", "cycle_counter", "getState", "get_flags_register", "get_flags_prime", "setState", "state", "set_flags_register", "set_flags_prime", "reset", "run_instruction", "doing_delayed_di", "doing_delayed_ei", "opcode", "decode_instruction", "retval", "interrupt", "non_maskable", "data", "push_word", "vector_address", "get_operand", "operand", "op_array", "do_add", "do_adc", "do_sub", "do_sbc", "do_and", "do_xor", "do_or", "do_cp", "func", "instructions", "cycle_counts", "get_signed_offset_byte", "value", "update_xy_flags", "result", "get_parity", "parity_bits", "pop_word", "do_conditional_absolute_jump", "condition", "do_conditional_relative_jump", "offset", "do_conditional_call", "do_conditional_return", "do_reset", "address", "temp", "do_inc", "do_dec", "do_hl_add", "hl", "do_hl_adc", "do_hl_sbc", "do_in", "port", "do_neg", "do_ldi", "read_value", "do_cpi", "temp_carry", "do_ini", "do_outi", "do_ldd", "do_cpd", "do_ind", "do_outd", "do_rlc", "do_rrc", "do_rl", "do_rr", "do_sla", "do_sra", "do_sll", "do_srl", "do_ix_add", "temp_s", "temp_z", "temp_p", "bit_number", "reg_code", "cycle_counts_cb", "dd_instructions", "cycle_counts_dd", "ed_instructions", "cycle_counts_ed", "hl_value", "temp1", "temp2", "ddcb_functions", "Z80", "bus", "s", "MasterAudio", "AY38910_Audio", "master", "i", "val", "SN76489_Audio", "newPOKEYAudio", "count", "audio", "pokey", "POKEYDeviceChannel", "combinePolys", "a", "b", "arr", "n", "divideBy", "NOTPOLY5", "POLY4", "PURE", "VOL_ONLY", "VOLUME_MASK", "POLY9", "CH1_179", "CH3_179", "CH1_CH2", "CH3_CH4", "CH1_FILTER", "CH2_FILTER", "CLOCK_15", "DIV_64", "DIV_15", "POLY4_SIZE", "POLY5_SIZE", "POLY9_SIZE", "POLY17_SIZE", "CHAN1", "CHAN2", "CHAN3", "CHAN4", "CHIP1", "CHIP2", "CHIP3", "CHIP4", "SAMPLE", "FREQ_17_EXACT", "FREQ_17_APPROX", "bit1", "bit2", "bit4", "bit5", "bit9", "bit15", "bit31", "bit17", "bit17_5", "bit5_4", "wavetones", "div2", "div6", "div31", "div93", "bit15_4", "bit5_2", "bit5_6", "tiawavetones", "regs", "counters", "deltas", "volume", "audc", "waveforms", "buffer", "sampleRate", "clock", "baseDelta", "dirty", "length", "rate", "updateValues", "addr", "ctrl", "base", "div", "j", "k", "value", "s", "sample", "d", "v", "wav", "cnt", "on", "WorkerSoundChannel", "worker", "output", "pending", "pendingLength", "e", "buf", "l", "SampleAudio", "clockfreq", "self", "sfrac", "sinc", "accum", "bufpos", "bufferlist", "idrain", "ifill", "nbuffers", "mix", "ape", "buflen", "lbuf", "m", "clearBuffers", "createContext", "AudioContext", "ctx", "arrbuf", "inext", "SampledAudio", "TssChannelAdapter", "chans", "oversample", "c", "sink", "bufs", "ch", "total", "ProbeRecorder", "m", "buflen", "newbuflen", "a", "src", "clocks", "address", "SP", "type", "value", "op", "count", "i", "NullProbe", "src", "BasicHeadlessMachine", "key", "code", "flags", "probe", "data", "title", "state", "c", "membus", "a", "val", "v", "iobus", "BasicMachine", "audio", "pixels", "BasicScanlineMachine", "trap", "endLineClock", "steps", "sl", "Z80_OPS", "Z80_OPS_ED", "Z80_OPS_CB", "disassembleZ80", "pc", "b0", "b1", "b2", "b3", "op", "n", "am", "bytes", "isaddr", "ireg", "hex", "offset", "BaseWASMMachine", "prefix", "self", "wmod", "wasmResponse", "wasmBinary", "wasmCompiled", "wasmResult", "biosBinary", "biosResponse", "statesize", "ctrlstatesize", "cpustatesize", "sampbufsize", "rom", "EmuHalt", "srcArray", "address", "value", "pixels", "pixbuf", "state", "audio", "n", "i", "trap", "cpf", "NullProbe", "datalen", "dataaddr", "databuf", "probe", "CPU6809", "ticks", "rA", "rB", "rX", "rY", "rU", "rS", "PC", "CC", "DP", "F_CARRY", "F_OVERFLOW", "F_ZERO", "F_NEGATIVE", "F_IRQMASK", "F_HALFCARRY", "F_FIRQMASK", "F_ENTIRE", "vecRESET", "vecNMI", "vecSWI", "vecIRQ", "vecFIRQ", "vecSWI2", "vecSWI3", "T", "IRQs", "byteTo", "byteAt", "cycles", "cycles2", "flagsNZ", "setV8", "a", "b", "r", "setV16", "getD", "setD", "v", "PUSHB", "PUSHW", "PUSHBU", "PUSHWU", "PULLB", "PULLW", "PULLBU", "PULLWU", "PSHS", "ucTemp", "i", "PSHU", "PULS", "PULU", "getPBR", "ucPostByte", "setPBR", "TFREXG", "bExchange", "signed", "x", "signed16", "fetch", "fetch16", "v1", "v2", "ReadWord", "addr", "WriteWord", "PostByte", "pb", "preg", "xchg", "sTemp", "sByte", "flagsNZ16", "word", "oINC", "oDEC", "oSUB", "temp", "oSUB16", "oADD", "oADD16", "oADC", "oSBC", "oCMP", "oCMP16", "oNEG", "oLSR", "oASR", "oASL", "oROL", "oldc", "oROR", "oEOR", "oOR", "oAND", "oCOM", "dpadd", "step", "oldT", "oldPC", "opcode", "cf", "nhi", "nlo", "reset", "ds", "ds11", "ds10", "disasm", "c", "d", "pc", "toHexN", "n", "s", "toHex2", "toHex4", "rx", "ro", "j", "sx", "bytes", "mode", "mnemo", "ixr", "disp", "ind", "mod", "ofs8", "ofs16", "Ts", "Tt", "t", "bt", "ba", "tck", "reg", "value", "f", "fx", "_MOS6502", "self", "RDY", "T", "instruction", "aBus", "bus", "boo", "I", "fetchOpcodeAndDecodeInstruction", "PC", "RESET_VECTOR", "SP", "A", "X", "Y", "N", "V", "D", "Z", "C", "opcode", "data", "AD", "BA", "BALCrossed", "IA", "branchOffset", "branchOffsetCrossAdjust", "NMI_VECTOR", "IRQ_VECTOR", "rX", "rY", "bN", "bV", "bZ", "bC", "instructions", "fetchNextOpcode", "fetchOpcodeAndDiscard", "fetchBranchOffset", "fetchADL", "fetchADH", "fetchADLFromBA", "fetchADHFromBA", "fetchBAL", "fetchBAH", "fetchBALFromIA", "fetchBAHFromIA", "addXtoBAL", "low", "addYtoBAL", "add1toBAL", "add1toBAHifBALCrossed", "fetchIAL", "fetchIAH", "add1toIAL", "fetchDataFromImmediate", "fetchDataFromAD", "fetchDataFromBA", "writeDataToAD", "writeDataToBA", "addBranchOffsetToPCL", "oldLow", "newLow", "adjustPCHForBranchOffsetCross", "setZ", "val", "setN", "setV", "setC", "popFromStack", "peekFromStack", "pushToStack", "getStatusBits", "setStatusBits", "illegalOpcode", "op", "implied", "operation", "immediateRead", "zeroPageRead", "absoluteRead", "indirectXRead", "absoluteIndexedRead", "index", "addIndex", "zeroPageIndexedRead", "indirectYRead", "zeroPageWrite", "absoluteWrite", "indirectXWrite", "absoluteIndexedWrite", "zeroPageIndexedWrite", "indirectYWrite", "zeroPageReadModifyWrite", "absoluteReadModifyWrite", "zeroPageIndexedReadModifyWrite", "absoluteIndexedReadModifyWrite", "indirectXReadModifyWrite", "indirectYReadModifyWrite", "opcodes", "BRK", "ORA", "uKIL", "uSLO", "uNOP", "ASL", "PHP", "ASL_ACC", "uANC", "Bxx", "CLC", "JSR", "AND", "uRLA", "BIT", "ROL", "PLP", "ROL_ACC", "SEC", "RTI", "EOR", "uSRE", "LSR", "PHA", "LSR_ACC", "uASR", "JMP_ABS", "CLI", "RTS", "ADC", "uRRA", "ROR", "PLA", "ROR_ACC", "uARR", "JMP_IND", "SEI", "STA", "uSAX", "STY", "STX", "DEY", "TXA", "uANE", "uSHA", "TYA", "TXS", "uSHS", "uSHY", "uSHX", "LDY", "LDA", "LDX", "uLAX", "TAY", "TAX", "uLXA", "CLV", "TSX", "uLAS", "CPY", "CMP", "uDCP", "DEC", "INY", "DEX", "uSBX", "CLD", "CPX", "SBC", "uISB", "INC", "INX", "NOP", "SED", "newC", "addressing", "operand", "AL", "AH", "add", "par", "sub", "oldC", "comp", "newX", "IRQ", "NMI", "reg", "cond", "branchTaken", "state", "mes", "text", "cycletime", "extracycles", "insnlengths", "validinsns", "address", "MOS6502", "_MOS6502", "bus", "itype", "s", "op", "DebugSymbols", "symbolmap", "debuginfo", "invertMap", "isDebuggable", "arg", "BreakpointList", "result", "id", "BasePlatform", "recorder", "sym", "inspectSymbol", "_a", "o", "path", "data", "BaseDebugPlatform", "cond", "callback", "debugCond", "novideo", "steps", "targetClock", "reason", "evalfunc", "cpuState", "pc", "c", "SP0", "clock", "prevState", "prevClock", "clock0", "frame0", "platform", "symmap", "addr2sym", "addr", "b", "hex", "b2", "w", "getToolForFilename_6502", "fn", "Base6502Platform", "membus", "cpu", "_MOS6502", "opcode", "offset", "getOpcodeMetadata_6502", "read", "disassemble6502", "category", "state", "cpuStateToLongString_6502", "dumpRAM", "dumpStackToString", "decodeFlags", "s", "OPMETA_6502", "address", "cpuStateToLongString_Z80", "flags", "printFlags", "BaseZ80Platform", "getToolForFilename_z80", "iobus", "Z80", "cycles", "n", "cyc", "sp", "start", "end", "disassembleZ80", "cpuStateToLongString_6809", "getToolForFilename_6809", "Base6809Platform", "CPU6809", "mem", "jsrop", "bigendian", "nraw", "jsrofs", "lookupSymbol", "extra", "addr2symbol", "hasVideo", "hasAudio", "hasKeyInput", "hasPaddleInput", "arg", "isRaster", "hasProbe", "hasBIOS", "hasSerialIO", "BaseMachinePlatform", "BaseDebugPlatform", "mainElement", "s", "m", "BaseWASMMachine", "videoFrequency", "hasVideo", "vp", "RasterVideo", "hasKeyInput", "ControllerPoller", "AnimationTimer", "hasAudio", "ap", "SampledAudio", "ProbeRecorder", "title", "data", "SerialIOVisualizer", "novideo", "trap", "steps", "_a", "x", "y", "ctx", "drawCrosshair", "step", "flag", "addr", "isDebuggable", "category", "state", "Base6502MachinePlatform", "getOpcodeMetadata_6502", "fn", "getToolForFilename_6502", "pc", "read", "disassemble6502", "cpuStateToLongString_6502", "dumpRAM", "dumpStackToString", "BaseZ80MachinePlatform", "getToolForFilename_z80", "cpuStateToLongString_Z80", "sp", "start", "end", "disassembleZ80", "Base6809MachinePlatform", "getToolForFilename_6809", "cpuStateToLongString_6809", "CPU6809", "parentElement", "device", "lastop", "ev", "byteToASCII"]
}
