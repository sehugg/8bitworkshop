{
  "version": 3,
  "sources": ["../src/common/analysis.ts"],
  "sourcesContent": ["\nimport { hex, byte2signed } from \"./util\";\nimport { OpcodeMetadata, Platform } from \"./baseplatform\";\n\nconst debug = false;\n\nexport interface CodeAnalyzer {\n  showLoopTimingForPC(pc: number);\n  pc2clockrange: { [key: number]: ClockRange };\n  MAX_CLOCKS: number;\n}\n\n/// VCS TIMING ANALYSIS\n\n// [taken, not taken]\nconst BRANCH_CONSTRAINTS = [\n  [{ N: 0 }, { N: 1 }],\n  [{ N: 1 }, { N: 0 }],\n  [{ V: 0 }, { V: 1 }],\n  [{ V: 1 }, { V: 0 }],\n  [{ C: 0 }, { C: 1 }],\n  [{ C: 1 }, { C: 0 }],\n  [{ Z: 0 }, { Z: 1 }],\n  [{ Z: 1 }, { Z: 0 }]\n];\n\nfunction constraintEquals(a, b) {\n  if (a == null || b == null)\n    return null;\n  for (var n in a) {\n    if (b[n] !== 'undefined')\n      return a[n] == b[n];\n  }\n  for (var n in b) {\n    if (a[n] !== 'undefined')\n      return a[n] == b[n];\n  }\n  return null;\n}\n\ninterface ClockRange {\n  minclocks: number;\n  maxclocks: number;\n}\n\nabstract class CodeAnalyzer6502 implements CodeAnalyzer {\n  pc2clockrange: { [key: number]: ClockRange } = {};\n  jsrresult: { [key: number]: ClockRange } = {};\n  START_CLOCKS: number;\n  MAX_CLOCKS: number;\n  WRAP_CLOCKS: boolean;\n  platform: Platform;\n  MAX_CYCLES: number = 2000;\n\n  constructor(platform: Platform) {\n    this.platform = platform;\n  }\n\n  getClockCountsAtPC(pc) {\n    var opcode = this.platform.readAddress(pc);\n    var meta = this.platform.getOpcodeMetadata(opcode, pc);\n    return meta; // minCycles, maxCycles\n  }\n\n  traceInstructions(pc: number, minclocks: number, maxclocks: number, subaddr: number, constraints) {\n    if (debug) console.log(\"trace\", hex(pc), minclocks, maxclocks);\n    if (!constraints) constraints = {};\n    var modified = true;\n    var abort = false;\n    for (let i = 0; modified && !abort; i++) {\n      if (i >= this.MAX_CYCLES) {\n        console.log(\"too many cycles @\", hex(pc), \"routine\", hex(subaddr));\n        break;\n      }\n      modified = false;\n      if (this.WRAP_CLOCKS) {\n        // wrap clocks\n        minclocks = minclocks % this.MAX_CLOCKS;\n        maxclocks = maxclocks % this.MAX_CLOCKS;\n        if (maxclocks == minclocks - 1) {\n          if (debug) console.log(\"0-75\", hex(pc), minclocks, maxclocks);\n          minclocks = 0;\n          maxclocks = this.MAX_CLOCKS - 1;\n        }\n      } else {\n        // truncate clocks\n        minclocks = Math.min(this.MAX_CLOCKS, minclocks);\n        maxclocks = Math.min(this.MAX_CLOCKS, maxclocks);\n      }\n      let meta = this.getClockCountsAtPC(pc);\n      let lob = this.platform.readAddress(pc + 1);\n      let hib = this.platform.readAddress(pc + 2);\n      let addr = lob + (hib << 8);\n      let pc0 = pc;\n      let pcrange = this.pc2clockrange[pc0];\n      if (pcrange == null) {\n        this.pc2clockrange[pc0] = pcrange = { minclocks: minclocks, maxclocks: maxclocks };\n        if (debug) console.log(\"new\", hex(pc), hex(pc0), hex(subaddr), minclocks, maxclocks);\n        modified = true;\n      }\n      //console.log(hex(pc),minclocks,maxclocks, pcrange);\n      if (pcrange.minclocks != minclocks || pcrange.maxclocks != maxclocks) {\n        if (this.WRAP_CLOCKS && (minclocks <= maxclocks) != (pcrange.minclocks <= pcrange.maxclocks)) {\n          if (debug) console.log(\"wrap\", hex(pc), hex(pc0), hex(subaddr), minclocks, maxclocks, pcrange);\n          pcrange.minclocks = minclocks = 0;\n          pcrange.maxclocks = maxclocks = this.MAX_CLOCKS - 1;\n          modified = true;\n        }\n        if (minclocks < pcrange.minclocks) {\n          if (debug) console.log(\"min\", hex(pc), hex(pc0), hex(subaddr), minclocks, maxclocks, pcrange);\n          pcrange.minclocks = minclocks;\n          modified = true;\n        }\n        if (maxclocks > pcrange.maxclocks) {\n          if (debug) console.log(\"max\", hex(pc), hex(pc0), hex(subaddr), minclocks, maxclocks, pcrange);\n          pcrange.maxclocks = maxclocks;\n          modified = true;\n        }\n      }\n      if (!meta.insnlength) {\n        console.log(\"Illegal instruction!\", hex(pc), hex(meta.opcode), meta);\n        break;\n      }\n      pc += meta.insnlength;\n      var oldconstraints = constraints;\n      constraints = null;\n      let syncMaxCycles = this.getMaxCyclesForSync(meta, lob, hib);\n      if (typeof syncMaxCycles === 'number') {\n        minclocks = 0;\n        maxclocks = syncMaxCycles;\n        meta.minCycles = meta.maxCycles = 0;\n      } else {\n        // TODO: if jump to zero-page, maybe assume RTS?\n        switch (meta.opcode) {\n          case 0x19: case 0x1d:\n          case 0x39: case 0x3d:\n          case 0x59: case 0x5d:\n          case 0x79: case 0x7d:\n          case 0xb9: case 0xbb:\n          case 0xbc: case 0xbd: case 0xbe: case 0xbf:\n          case 0xd9: case 0xdd:\n          case 0xf9: case 0xfd:\n            if (lob == 0) meta.maxCycles -= 1; // no page boundary crossed\n            break;\n          case 0x20: // JSR\n            // TODO: handle bare RTS case\n            minclocks += meta.minCycles;\n            maxclocks += meta.maxCycles;\n            this.traceInstructions(addr, minclocks, maxclocks, addr, constraints);\n            var result = this.jsrresult[addr];\n            if (result) {\n              minclocks = result.minclocks;\n              maxclocks = result.maxclocks;\n            } else {\n              console.log(\"No JSR result!\", hex(pc), hex(addr));\n              minclocks = maxclocks;\n              //return;\n            }\n            break;\n          case 0x4c: // JMP\n            pc = addr; // TODO: make sure in ROM space\n            break;\n          case 0x40: // RTI\n            abort = true;\n            break;\n          case 0x60: // RTS\n            if (subaddr) { // TODO: 0 doesn't work\n              // TODO: combine with previous result\n              var result = this.jsrresult[subaddr];\n              if (!result) {\n                result = { minclocks: minclocks, maxclocks: maxclocks };\n              } else {\n                result = {\n                  minclocks: Math.min(minclocks, result.minclocks),\n                  maxclocks: Math.max(maxclocks, result.maxclocks)\n                }\n              }\n              this.jsrresult[subaddr] = result;\n              console.log(\"RTS\", hex(pc), hex(subaddr), this.jsrresult[subaddr]);\n            }\n            return;\n          case 0x10: case 0x30: // branch\n          case 0x50: case 0x70:\n          case 0x90: case 0xB0:\n          case 0xD0: case 0xF0:\n            var newpc = pc + byte2signed(lob);\n            var crosspage = (pc >> 8) != (newpc >> 8);\n            if (!crosspage) meta.maxCycles--;\n            // TODO: other instructions might modify flags too\n            var cons = BRANCH_CONSTRAINTS[Math.floor((meta.opcode - 0x10) / 0x20)];\n            var cons0 = constraintEquals(oldconstraints, cons[0]);\n            var cons1 = constraintEquals(oldconstraints, cons[1]);\n            // recursively trace the taken branch\n            if (true || cons0 !== false) { // TODO?\n              this.traceInstructions(newpc, minclocks + meta.maxCycles, maxclocks + meta.maxCycles, subaddr, cons[0]);\n            }\n            // abort if we will always take the branch\n            if (cons1 === false) {\n              console.log(\"branch always taken\", hex(pc), oldconstraints, cons[1]);\n              abort = true;\n            }\n            constraints = cons[1]; // not taken\n            meta.maxCycles = meta.minCycles; // branch not taken, no extra clock(s)\n            break;\n          case 0x6c:\n            console.log(\"Instruction not supported!\", hex(pc), hex(meta.opcode), meta); // TODO\n            return;\n        }\n      }\n      // add min/max instruction time to min/max clocks bound\n      if (debug) console.log(\"add\", hex(pc), meta.minCycles, meta.maxCycles);\n      minclocks += meta.minCycles;\n      maxclocks += meta.maxCycles;\n    }\n  }\n\n  showLoopTimingForPC(pc: number) {\n    this.pc2clockrange = {};\n    this.jsrresult = {};\n    // recurse through all traces\n    this.traceInstructions(pc | this.platform.getOriginPC(), this.START_CLOCKS, this.MAX_CLOCKS, 0, {});\n  }\n\n  getMaxCyclesForSync(meta: OpcodeMetadata, lob: number, hib: number) {\n  }\n}\n\n// 76 cycles\nexport class CodeAnalyzer_vcs extends CodeAnalyzer6502 {\n  constructor(platform: Platform) {\n    super(platform);\n    this.MAX_CLOCKS = 76; // 1 scanline\n    this.START_CLOCKS = 0; // TODO?\n    this.WRAP_CLOCKS = true;\n  }\n  getMaxCyclesForSync(meta: OpcodeMetadata, lob: number, hib: number) {\n    if (meta.opcode == 0x85) {\n      if (lob == 0x2) { // STA WSYNC\n        return 0;\n      }\n    }\n  }\n}\n\n// https://wiki.nesdev.com/w/index.php/PPU_rendering#Line-by-line_timing\n// TODO: sprite 0 hit, CPU stalls\nexport class CodeAnalyzer_nes extends CodeAnalyzer6502 {\n  constructor(platform: Platform) {\n    super(platform);\n    this.MAX_CLOCKS = 114; // 341 clocks for 3 scanlines\n    this.START_CLOCKS = 0;\n    this.WRAP_CLOCKS = true;\n  }\n  getMaxCyclesForSync(meta: OpcodeMetadata, lob: number, hib: number) {\n    if (meta.opcode == 0x2c) {\n      if (lob == 0x02 && hib == 0x20) { // BIT $2002\n        return 4; // uncertainty b/c of assumed branch poll\n      }\n    }\n  }\n}\n\nexport class CodeAnalyzer_apple2 extends CodeAnalyzer6502 {\n  constructor(platform: Platform) {\n    super(platform);\n    this.MAX_CLOCKS = 65;\n    this.START_CLOCKS = 0;\n    this.WRAP_CLOCKS = true;\n  }\n  getMaxCyclesForSync(meta: OpcodeMetadata, lob: number, hib: number) {\n    if (meta.opcode == 0xad) {\n      if (lob == 0x61 && hib == 0xc0) { // LDA $C061\n        return 4; // uncertainty b/c of assumed branch poll\n      }\n    }\n  }\n}\n\n"],
  "mappings": "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",
  "names": ["debug", "BRANCH_CONSTRAINTS", "constraintEquals", "a", "b", "n", "CodeAnalyzer6502", "platform", "pc", "opcode", "meta", "minclocks", "maxclocks", "subaddr", "constraints", "hex", "modified", "abort", "i", "lob", "hib", "addr", "pc0", "pcrange", "oldconstraints", "syncMaxCycles", "result", "newpc", "byte2signed", "crosspage", "cons", "cons0", "cons1", "CodeAnalyzer_vcs", "CodeAnalyzer_nes"]
}
