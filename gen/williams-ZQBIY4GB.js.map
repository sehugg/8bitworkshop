{
  "version": 3,
  "sources": ["../src/machine/williams.ts", "../src/platform/williams.ts"],
  "sourcesContent": ["import { MasterAudio, WorkerSoundChannel } from \"../common/audio\";\nimport { MemoryBus } from \"../common/baseplatform\";\nimport { CPU6809 } from \"../common/cpu/6809\";\nimport { BasicScanlineMachine } from \"../common/devices\";\nimport { Keys, makeKeycodeMap, newAddressDecoder, newKeyboardHandler, padBytes } from \"../common/emu\";\n\nconst INITIAL_WATCHDOG = 8;\nconst SCREEN_HEIGHT = 304;\n\nexport class WilliamsMachine extends BasicScanlineMachine {\n\n    xtal = 12000000;\n    cpuFrequency = this.xtal / 3 / 4;\n    //cpuCyclesPerLine = 64;\n    cpuCyclesPerLine = 54; // TODO: becuse we swapped width and height\n    canvasWidth = 256;\n    numTotalScanlines = 304;\n    numVisibleScanlines = 304;\n    defaultROMSize = 0xc000;\n    rotate = -90;\n    sampleRate = 1;\n\n    cpu;\n    membus: MemoryBus;\n    ram = new Uint8Array(0xc000);\n    nvram = new Uint8Array(0x400);\n    rom = new Uint8Array(0xc000);\n    portsel = 0;\n    banksel = 0;\n    watchdog_counter = 0;\n    watchdog_enabled = false;\n    pia6821 = new Uint8Array(8);\n    blitregs = new Uint8Array(8);\n\n    worker: Worker;\n    master;\n    audioadapter;\n\n    palette = new Uint32Array(16);\n    screenNeedsRefresh = false;\n    displayPCs;\n    cpuScale = 1;\n    waitCycles = 0;\n\n    constructor(public isDefender: boolean) {\n        super();\n        this.palette.fill(0xff000000);\n        this.initBus(isDefender);\n        this.initInputs(isDefender);\n        this.initAudio();\n        this.initCPU();\n    }\n\n    initInputs(isDefender: boolean) {\n        var DEFENDER_KEYCODE_MAP = makeKeycodeMap([\n            [Keys.A, 4, 0x1],\n            [Keys.RIGHT, 4, 0x2],\n            [Keys.B, 4, 0x4],\n            [Keys.VK_X, 4, 0x8],\n            [Keys.P2_START, 4, 0x10],\n            [Keys.START, 4, 0x20],\n            [Keys.LEFT, 4, 0x40],\n            [Keys.DOWN, 4, 0x80],\n            [Keys.UP, 6, 0x1],\n            [Keys.SELECT, 0, 0x4],\n            [Keys.VK_7, 0, 0x1],\n            [Keys.VK_8, 0, 0x2],\n            [Keys.VK_9, 0, 0x8],\n        ]);\n\n        var ROBOTRON_KEYCODE_MAP = makeKeycodeMap([\n            [Keys.P2_UP, 0, 0x1],\n            [Keys.P2_DOWN, 0, 0x2],\n            [Keys.P2_LEFT, 0, 0x4],\n            [Keys.P2_RIGHT, 0, 0x8],\n            [Keys.START, 0, 0x10],\n            [Keys.P2_START, 0, 0x20],\n            [Keys.UP, 0, 0x40],\n            [Keys.DOWN, 0, 0x80],\n            [Keys.LEFT, 2, 0x1],\n            [Keys.RIGHT, 2, 0x2],\n            [Keys.VK_7, 4, 0x1],\n            [Keys.VK_8, 4, 0x2],\n            [Keys.VK_6, 4, 0x4],\n            [Keys.VK_9, 4, 0x8],\n            [Keys.SELECT, 4, 0x10],\n        ]);\n\n        var KEYCODE_MAP = isDefender ? DEFENDER_KEYCODE_MAP : ROBOTRON_KEYCODE_MAP;\n        //this.inputs.set(this.pia6821);\n        this.handler = newKeyboardHandler(this.pia6821, KEYCODE_MAP);\n    }\n\n    initBus(isDefender: boolean) {\n        var ioread_defender = newAddressDecoder([\n            [0x400, 0x5ff, 0x1ff, (a) => { return this.nvram[a]; }],\n            [0x800, 0x800, 0, (a) => { return this.scanline; }],\n            [0xc00, 0xc07, 0x7, (a) => { return this.pia6821[a]; }],\n            [0x0, 0xfff, 0, (a) => { /*console.log('ioread',hex(a));*/ }],\n        ]);\n\n        var iowrite_defender = newAddressDecoder([\n            [0x0, 0xf, 0xf, this.setPalette.bind(this)],\n            [0x3fc, 0x3ff, 0, (a, v) => { if (v == 0x38) this.watchdog_counter = INITIAL_WATCHDOG; this.watchdog_enabled = true; }],\n            [0x400, 0x5ff, 0x1ff, (a, v) => { this.nvram[a] = v; }],\n            [0xc02, 0xc02, 0x1, (a, v) => { if (this.worker) this.worker.postMessage({ command: v & 0x3f }); }],\n            [0xc00, 0xc07, 0x7, (a, v) => { this.pia6821[a] = v; }],\n            [0x0, 0xfff, 0, (a, v) => { /* console.log('iowrite', hex(a), hex(v)); */ }],\n        ]);\n\n        var memread_defender = newAddressDecoder([\n            [0x0000, 0xbfff, 0xffff, (a) => { return this.ram[a]; }],\n            [0xc000, 0xcfff, 0x0fff, (a) => {\n                switch (this.banksel) {\n                    case 0: return ioread_defender(a);\n                    case 1: return this.rom[a + 0x3000];\n                    case 2: return this.rom[a + 0x4000];\n                    case 3: return this.rom[a + 0x5000];\n                    case 7: return this.rom[a + 0x6000];\n                    default: return 0; // TODO: error light\n                }\n            }],\n            [0xd000, 0xffff, 0xffff, (a) => { return this.rom ? this.rom[a - 0xd000] : 0; }],\n        ]);\n\n        var memwrite_defender = newAddressDecoder([\n            [0x0000, 0x97ff, 0, this.write_display_byte.bind(this)],\n            [0x9800, 0xbfff, 0, (a, v) => { this.ram[a] = v; }],\n            [0xc000, 0xcfff, 0x0fff, iowrite_defender.bind(this)],\n            [0xd000, 0xdfff, 0, (a, v) => { this.banksel = v & 0x7; }],\n            [0, 0xffff, 0, (a, v) => { /* console.log(hex(a), hex(v)); */ }],\n        ]);\n\n        // Robotron, Joust, Bubbles, Stargate\n\n        var ioread_robotron = newAddressDecoder([\n            [0x804, 0x807, 0x3, (a) => { return this.pia6821[a]; }],\n            [0x80c, 0x80f, 0x3, (a) => { return this.pia6821[a + 4]; }],\n            [0xb00, 0xbff, 0, (a) => { return this.scanline; }],\n            [0xc00, 0xfff, 0x3ff, (a) => { return this.nvram[a]; }],\n            [0x0, 0xfff, 0, (a) => { /* console.log('ioread',hex(a)); */ }],\n        ]);\n\n        var iowrite_robotron = newAddressDecoder([\n            [0x0, 0xf, 0xf, this.setPalette.bind(this)],\n            [0x80c, 0x80c, 0xf, (a, v) => { if (this.worker) this.worker.postMessage({ command: v }); }],\n            //[0x804, 0x807, 0x3,   function(a,v) { console.log('iowrite',a); }], // TODO: sound\n            //[0x80c, 0x80f, 0x3,   function(a,v) { console.log('iowrite',a+4); }], // TODO: sound\n            [0x900, 0x9ff, 0, (a, v) => { this.banksel = v & 0x1; }],\n            [0xa00, 0xa07, 0x7, this.setBlitter.bind(this)],\n            [0xbff, 0xbff, 0, (a, v) => { if (v == 0x39) { this.watchdog_counter = INITIAL_WATCHDOG; this.watchdog_enabled = true; } }],\n            [0xc00, 0xfff, 0x3ff, (a, v) => { this.nvram[a] = v; }],\n            //[0x0,   0xfff, 0,     function(a,v) { console.log('iowrite',hex(a),hex(v)); }],\n        ]);\n\n        var memread_robotron = newAddressDecoder([\n            [0x0000, 0x8fff, 0xffff, (a) => { return this.banksel ? this.rom[a] : this.ram[a]; }],\n            [0x9000, 0xbfff, 0xffff, (a) => { return this.ram[a]; }],\n            [0xc000, 0xcfff, 0x0fff, ioread_robotron],\n            [0xd000, 0xffff, 0xffff, (a) => { return this.rom ? this.rom[a - 0x4000] : 0; }],\n        ]);\n\n        var memwrite_robotron = newAddressDecoder([\n            [0x0000, 0x97ff, 0, this.write_display_byte.bind(this)],\n            [0x9800, 0xbfff, 0, (a, v) => { this.ram[a] = v; }],\n            [0xc000, 0xcfff, 0x0fff, iowrite_robotron.bind(this)],\n            //[0x0000, 0xffff, 0,      function(a,v) { console.log(hex(a), hex(v)); }],\n        ]);\n\n        var memread_williams = isDefender ? memread_defender : memread_robotron;\n        var memwrite_williams = isDefender ? memwrite_defender : memwrite_robotron;\n        this.membus = {\n            read: memread_williams,\n            write: memwrite_williams,\n        };\n        this.membus = this.probeMemoryBus(this.membus);\n        this.readAddress = this.membus.read;\n    }\n\n    initAudio() {\n        this.master = new MasterAudio();\n        this.worker = new Worker(\"./src/common/audio/z80worker.js\");\n        let workerchannel = new WorkerSoundChannel(this.worker);\n        this.master.master.addChannel(workerchannel);\n    }\n\n    initCPU() {\n        this.rom = new Uint8Array(this.defaultROMSize);\n        this.cpu = this.newCPU(this.membus);\n        //this.connectCPUMemoryBus(this);\n    }\n\n    newCPU(membus: MemoryBus) {\n        var cpu = Object.create(CPU6809());\n        cpu.init(membus.write, membus.read, 0);\n        return cpu;\n    }\n\n    readAddress;\n\n    // d1d6 ldu $11 / beq $d1ed\n\n    setPalette(a, v) {\n        // RRRGGGBB\n        var color = 0xff000000 | ((v & 7) << 5) | (((v >> 3) & 7) << 13) | (((v >> 6) << 22));\n        if (color != this.palette[a]) {\n            this.palette[a] = color;\n            this.screenNeedsRefresh = true;\n        }\n    }\n\n    write_display_byte(a: number, v: number) {\n        this.ram[a] = v;\n        this.drawDisplayByte(a, v);\n        if (this.displayPCs) this.displayPCs[a] = this.cpu.getPC(); // save program counter\n    }\n\n    drawDisplayByte(a, v) {\n        var ofs = ((a & 0xff00) << 1) | ((a & 0xff) ^ 0xff);\n        this.pixels[ofs] = this.palette[v >> 4];\n        this.pixels[ofs + 256] = this.palette[v & 0xf];\n    }\n\n    setBlitter(a, v) {\n        if (a) {\n            this.blitregs[a] = v;\n        } else {\n            var cycles = this.doBlit(v);\n            this.waitCycles -= cycles * this.cpuScale; // wait CPU cycles\n        }\n    }\n\n    doBlit(flags) {\n        //console.log(hex(flags), blitregs);\n        flags &= 0xff;\n        var offs = SCREEN_HEIGHT - this.blitregs[7];\n        var sstart = (this.blitregs[2] << 8) + this.blitregs[3];\n        var dstart = (this.blitregs[4] << 8) + this.blitregs[5];\n        var w = this.blitregs[6] ^ 4; // blitter bug fix\n        var h = this.blitregs[7] ^ 4;\n        if (w == 0) w++;\n        if (h == 0) h++;\n        if (h == 255) h++;\n        var sxinc = (flags & 0x1) ? 256 : 1;\n        var syinc = (flags & 0x1) ? 1 : w;\n        var dxinc = (flags & 0x2) ? 256 : 1;\n        var dyinc = (flags & 0x2) ? 1 : w;\n        var pixdata = 0;\n        for (var y = 0; y < h; y++) {\n            var source = sstart & 0xffff;\n            var dest = dstart & 0xffff;\n            for (var x = 0; x < w; x++) {\n                var data = this.membus.read(source);\n                if (flags & 0x20) {\n                    pixdata = (pixdata << 8) | data;\n                    this.blit_pixel(dest, (pixdata >> 4) & 0xff, flags);\n                } else {\n                    this.blit_pixel(dest, data, flags);\n                }\n                source += sxinc;\n                source &= 0xffff;\n                dest += dxinc;\n                dest &= 0xffff;\n            }\n            if (flags & 0x2)\n                dstart = (dstart & 0xff00) | ((dstart + dyinc) & 0xff);\n            else\n                dstart += dyinc;\n            if (flags & 0x1)\n                sstart = (sstart & 0xff00) | ((sstart + syinc) & 0xff);\n            else\n                sstart += syinc;\n        }\n        return w * h * (2 + ((flags & 0x4) >> 2)); // # of memory accesses\n    }\n\n    blit_pixel(dstaddr, srcdata, flags) {\n        var curpix = dstaddr < 0xc000 ? this.ram[dstaddr] : this.membus.read(dstaddr);\n        var solid = this.blitregs[1];\n        var keepmask = 0xff;          //what part of original dst byte should be kept, based on NO_EVEN and NO_ODD flags\n        //even pixel (D7-D4)\n        if ((flags & 0x8) && !(srcdata & 0xf0)) {   //FG only and src even pixel=0\n            if (flags & 0x80) keepmask &= 0x0f; // no even\n        } else {\n            if (!(flags & 0x80)) keepmask &= 0x0f; // not no even\n        }\n        //odd pixel (D3-D0)\n        if ((flags & 0x8) && !(srcdata & 0x0f)) {   //FG only and src odd pixel=0\n            if (flags & 0x40) keepmask &= 0xf0; // no odd\n        } else {\n            if (!(flags & 0x40)) keepmask &= 0xf0; // not no odd\n        }\n        curpix &= keepmask;\n        if (flags & 0x10) // solid bit\n            curpix |= (solid & ~keepmask);\n        else\n            curpix |= (srcdata & ~keepmask);\n        if (dstaddr < 0x9800) // can cause recursion otherwise\n            this.membus.write(dstaddr, curpix);\n    }\n\n    startScanline(): void {\n        this.audio && this.audioadapter && this.audioadapter.generate(this.audio);\n        // TODO: line-by-line\n        if (this.screenNeedsRefresh && this.scanline == 0) {\n            for (var i = 0; i < 0x9800; i++)\n                this.drawDisplayByte(i, this.ram[i]);\n            this.screenNeedsRefresh = false;\n        }\n        if (this.scanline == 0 && this.watchdog_enabled && this.watchdog_counter-- <= 0) {\n            console.log(\"WATCHDOG FIRED, PC =\", this.cpu.getPC().toString(16)); // TODO: alert on video\n            // TODO: this.breakpointHit(cpu.T());\n            this.reset();\n        }\n    }\n    drawScanline(): void {\n        // interrupts happen every 1/4 of the screen\n        let sl = this.scanline;\n        if (sl == 0 || sl == 0x3c || sl == 0xbc || sl == 0xfc) {\n            if (!this.isDefender || this.pia6821[7] == 0x3c) { // TODO?\n                if (this.cpu.interrupt)\n                    this.cpu.interrupt();\n                if (this.cpu.requestInterrupt)\n                    this.cpu.requestInterrupt();\n            }\n        }\n    }\n    read(a: number): number {\n        return this.membus.read(a);\n    }\n    write(a: number, v: number): void {\n        this.membus.write(a, v);\n    }\n    readConst(a: number): number {\n        if (a >= 0xc000 && a <= 0xcbff) return 0xff;\n        else return this.membus.read(a); // TODO\n    }\n    reset() {\n        super.reset();\n        this.watchdog_counter = INITIAL_WATCHDOG;\n        this.watchdog_enabled = false;\n        this.banksel = 1;\n    }\n\n    loadSoundROM(data) {\n        console.log(\"loading sound ROM \" + data.length + \" bytes\");\n        var soundrom = padBytes(data, 0x4000);\n        this.worker.postMessage({ rom: soundrom });\n    }\n\n    loadROM(data) {\n        if (data.length > 2) {\n            if (this.isDefender) {\n                this.loadSoundROM(data.slice(0x6800));\n                data = this.rom.slice(0, 0x6800);\n            } else if (data.length > 0xc000) {\n                this.loadSoundROM(data.slice(0xc000));\n                data = this.rom.slice(0, 0xc000);\n            } else if (data.length > 0x9000 && data[0x9000]) {\n                this.loadSoundROM(data.slice(0x9000));\n            }\n            data = padBytes(data, 0xc000);\n        }\n        super.loadROM(data);\n    }\n\n    loadState(state) {\n        this.cpu.loadState(state.c);\n        this.ram.set(state.ram);\n        this.nvram.set(state.nvram);\n        this.pia6821.set(state.inputs);\n        this.blitregs.set(state.blt);\n        this.watchdog_counter = state.wdc;\n        this.banksel = state.bs;\n        this.portsel = state.ps;\n    }\n    saveState() {\n        return {\n            c: this.cpu.saveState(),\n            ram: this.ram.slice(0),\n            nvram: this.nvram.slice(0),\n            inputs: this.pia6821.slice(0),\n            blt: this.blitregs.slice(0),\n            wdc: this.watchdog_counter,\n            bs: this.banksel,\n            ps: this.portsel,\n        };\n    }\n    loadControlsState(state) {\n        this.pia6821.set(state.inputs);\n    }\n    saveControlsState() {\n        return {\n            inputs: this.pia6821.slice(0),\n        };\n    }\n}\n", "\nimport { Platform, BaseZ80Platform, Base6809Platform, Base6809MachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS, RAM, newAddressDecoder, padBytes, noise, setKeyboardFromMap, AnimationTimer, RasterVideo, Keys, makeKeycodeMap } from \"../common/emu\";\nimport { hex } from \"../common/util\";\nimport { MasterAudio, WorkerSoundChannel } from \"../common/audio\";\nimport { WilliamsMachine } from \"../machine/williams\";\n\n// https://www.arcade-museum.com/manuals-videogames/D/Defender.pdf\n\nvar WILLIAMS_PRESETS = [\n  { id: 'gfxtest.c', name: 'Graphics Test' },\n  { id: 'sprites.c', name: 'Sprite Test' },\n  { id: 'game1.c', name: 'Raster Paranoia Game' },\n  { id: 'bitmap_rle.c', name: 'RLE Bitmap' },\n];\n\nvar WilliamsPlatform = function(mainElement, proto, options) {\n  var self = this;\n  this.__proto__ = new (proto ? proto : Base6809Platform)();\n\n  options = options || {};\n  var isDefender = options?.isDefender;\n  var SCREEN_HEIGHT = 304;\n  var SCREEN_WIDTH = 256;\n\n  var cpu, ram, rom, nvram;\n  var portsel = 0;\n  var banksel = 0;\n  var watchdog_counter;\n  var watchdog_enabled = false;\n  var pia6821 = new RAM(8).mem;\n  var blitregs = new RAM(8).mem;\n\n  var video, timer, pixels, displayPCs;\n  var screenNeedsRefresh = false;\n  var membus;\n  var video_counter;\n\n  var audio, worker, workerchannel;\n\n  var xtal = 12000000;\n  var cpuFrequency = xtal / 3 / 4;\n  var cpuCyclesPerFrame = cpuFrequency / 60; // TODO\n  var cpuScale = 1;\n  var INITIAL_WATCHDOG = 8;\n  var PIXEL_ON = 0xffeeeeee;\n  var PIXEL_OFF = 0xff000000;\n\n  var DEFENDER_KEYCODE_MAP = makeKeycodeMap([\n    [Keys.A, 4, 0x1],\n    [Keys.RIGHT, 4, 0x2],\n    [Keys.B, 4, 0x4],\n    [Keys.VK_X, 4, 0x8],\n    [Keys.P2_START, 4, 0x10],\n    [Keys.START, 4, 0x20],\n    [Keys.LEFT, 4, 0x40],\n    [Keys.DOWN, 4, 0x80],\n    [Keys.UP, 6, 0x1],\n    [Keys.SELECT, 0, 0x4],\n    [Keys.VK_7, 0, 0x1],\n    [Keys.VK_8, 0, 0x2],\n    [Keys.VK_9, 0, 0x8],\n  ]);\n\n  var ROBOTRON_KEYCODE_MAP = makeKeycodeMap([\n    [Keys.P2_UP, 0, 0x1],\n    [Keys.P2_DOWN, 0, 0x2],\n    [Keys.P2_LEFT, 0, 0x4],\n    [Keys.P2_RIGHT, 0, 0x8],\n    [Keys.START, 0, 0x10],\n    [Keys.P2_START, 0, 0x20],\n    [Keys.UP, 0, 0x40],\n    [Keys.DOWN, 0, 0x80],\n    [Keys.LEFT, 2, 0x1],\n    [Keys.RIGHT, 2, 0x2],\n    [Keys.VK_7, 4, 0x1],\n    [Keys.VK_8, 4, 0x2],\n    [Keys.VK_6, 4, 0x4],\n    [Keys.VK_9, 4, 0x8],\n    [Keys.SELECT, 4, 0x10],\n  ]);\n\n  var KEYCODE_MAP = isDefender ? DEFENDER_KEYCODE_MAP : ROBOTRON_KEYCODE_MAP;\n\n  // TODO: sound board handshake\n\n  var palette = [];\n  for (var ii = 0; ii < 16; ii++)\n    palette[ii] = 0xff000000;\n\n  this.getPresets = function() {\n    return WILLIAMS_PRESETS;\n  }\n\n  // Defender\n\n  var ioread_defender = newAddressDecoder([\n    [0x400, 0x5ff, 0x1ff, function(a) { return nvram.mem[a]; }],\n    [0x800, 0x800, 0, function(a) { return video_counter; }],\n    [0xc00, 0xc07, 0x7, function(a) { return pia6821[a]; }],\n    [0x0, 0xfff, 0, function(a) { /*console.log('ioread',hex(a));*/ }],\n  ]);\n\n  var iowrite_defender = newAddressDecoder([\n    [0x0, 0xf, 0xf, setPalette],\n    [0x3fc, 0x3ff, 0, function(a, v) { if (v == 0x38) watchdog_counter = INITIAL_WATCHDOG; watchdog_enabled=true; }],\n    [0x400, 0x5ff, 0x1ff, function(a, v) { nvram.mem[a] = v; }],\n    [0xc02, 0xc02, 0x1, function(a, v) { if (worker) worker.postMessage({ command: v & 0x3f }); }],\n    [0xc00, 0xc07, 0x7, function(a, v) { pia6821[a] = v; }],\n    [0x0, 0xfff, 0, function(a, v) { console.log('iowrite', hex(a), hex(v)); }],\n  ]);\n\n  var memread_defender = newAddressDecoder([\n    [0x0000, 0xbfff, 0xffff, function(a) { return ram.mem[a]; }],\n    [0xc000, 0xcfff, 0x0fff, function(a) {\n      switch (banksel) {\n        case 0: return ioread_defender(a);\n        case 1: return rom[a + 0x3000];\n        case 2: return rom[a + 0x4000];\n        case 3: return rom[a + 0x5000];\n        case 7: return rom[a + 0x6000];\n        default: return 0; // TODO: error light\n      }\n    }],\n    [0xd000, 0xffff, 0xffff, function(a) { return rom ? rom[a - 0xd000] : 0; }],\n  ]);\n\n  var memwrite_defender = newAddressDecoder([\n    [0x0000, 0x97ff, 0, write_display_byte],\n    [0x9800, 0xbfff, 0, function(a, v) { ram.mem[a] = v; }],\n    [0xc000, 0xcfff, 0x0fff, iowrite_defender],\n    [0xd000, 0xdfff, 0, function(a, v) { banksel = v & 0x7; }],\n    [0, 0xffff, 0, function(a, v) { console.log(hex(a), hex(v)); }],\n  ]);\n\n  // Robotron, Joust, Bubbles, Stargate\n\n  var ioread_robotron = newAddressDecoder([\n    [0x804, 0x807, 0x3, function(a) { return pia6821[a]; }],\n    [0x80c, 0x80f, 0x3, function(a) { return pia6821[a + 4]; }],\n    [0xb00, 0xbff, 0, function(a) { return video_counter; }],\n    [0xc00, 0xfff, 0x3ff, function(a) { return nvram.mem[a]; }],\n    [0x0, 0xfff, 0, function(a) { /* console.log('ioread',hex(a)); */ }],\n  ]);\n\n  var iowrite_robotron = newAddressDecoder([\n    [0x0, 0xf, 0xf, setPalette],\n    [0x80c, 0x80c, 0xf, function(a, v) { if (worker) worker.postMessage({ command: v }); }],\n    //[0x804, 0x807, 0x3,   function(a,v) { console.log('iowrite',a); }], // TODO: sound\n    //[0x80c, 0x80f, 0x3,   function(a,v) { console.log('iowrite',a+4); }], // TODO: sound\n    [0x900, 0x9ff, 0, function(a, v) { banksel = v & 0x1; }],\n    [0xa00, 0xa07, 0x7, setBlitter],\n    [0xbff, 0xbff, 0, function(a, v) { if (v == 0x39) { watchdog_counter = INITIAL_WATCHDOG; watchdog_enabled=true; } }],\n    [0xc00, 0xfff, 0x3ff, function(a, v) { nvram.mem[a] = v; }],\n    //[0x0,   0xfff, 0,     function(a,v) { console.log('iowrite',hex(a),hex(v)); }],\n  ]);\n\n  var memread_robotron = newAddressDecoder([\n    [0x0000, 0x8fff, 0xffff, function(a) { return banksel ? rom[a] : ram.mem[a]; }],\n    [0x9000, 0xbfff, 0xffff, function(a) { return ram.mem[a]; }],\n    [0xc000, 0xcfff, 0x0fff, ioread_robotron],\n    [0xd000, 0xffff, 0xffff, function(a) { return rom ? rom[a - 0x4000] : 0; }],\n  ]);\n\n  var memwrite_robotron = newAddressDecoder([\n    [0x0000, 0x97ff, 0, write_display_byte],\n    [0x9800, 0xbfff, 0, function(a, v) { ram.mem[a] = v; }],\n    [0xc000, 0xcfff, 0x0fff, iowrite_robotron],\n    //[0x0000, 0xffff, 0,      function(a,v) { console.log(hex(a), hex(v)); }],\n  ]);\n\n  var memread_williams = isDefender ? memread_defender : memread_robotron;\n  var memwrite_williams = isDefender ? memwrite_defender : memwrite_robotron;\n\n  // d1d6 ldu $11 / beq $d1ed\n\n  function setPalette(a, v) {\n    // RRRGGGBB\n    var color = 0xff000000 | ((v & 7) << 5) | (((v >> 3) & 7) << 13) | (((v >> 6) << 22));\n    if (color != palette[a]) {\n      palette[a] = color;\n      screenNeedsRefresh = true;\n    }\n  }\n\n  function write_display_byte(a: number, v: number) {\n    ram.mem[a] = v;\n    drawDisplayByte(a, v);\n    if (displayPCs) displayPCs[a] = cpu.getPC(); // save program counter\n  }\n\n  function drawDisplayByte(a, v) {\n    var ofs = ((a & 0xff00) << 1) | ((a & 0xff) ^ 0xff);\n    pixels[ofs] = palette[v >> 4];\n    pixels[ofs + 256] = palette[v & 0xf];\n  }\n\n  function setBlitter(a, v) {\n    if (a) {\n      blitregs[a] = v;\n    } else {\n      var cycles = doBlit(v);\n      this.waitCycles -= cycles * cpuScale; // wait CPU cycles\n    }\n  }\n\n  function doBlit(flags) {\n    //console.log(hex(flags), blitregs);\n    flags &= 0xff;\n    var offs = SCREEN_HEIGHT - blitregs[7];\n    var sstart = (blitregs[2] << 8) + blitregs[3];\n    var dstart = (blitregs[4] << 8) + blitregs[5];\n    var w = blitregs[6] ^ 4; // blitter bug fix\n    var h = blitregs[7] ^ 4;\n    if (w == 0) w++;\n    if (h == 0) h++;\n    if (h == 255) h++;\n    var sxinc = (flags & 0x1) ? 256 : 1;\n    var syinc = (flags & 0x1) ? 1 : w;\n    var dxinc = (flags & 0x2) ? 256 : 1;\n    var dyinc = (flags & 0x2) ? 1 : w;\n    var pixdata = 0;\n    for (var y = 0; y < h; y++) {\n      var source = sstart & 0xffff;\n      var dest = dstart & 0xffff;\n      for (var x = 0; x < w; x++) {\n        var data = memread_williams(source);\n        if (flags & 0x20) {\n          pixdata = (pixdata << 8) | data;\n          blit_pixel(dest, (pixdata >> 4) & 0xff, flags);\n        } else {\n          blit_pixel(dest, data, flags);\n        }\n        source += sxinc;\n        source &= 0xffff;\n        dest += dxinc;\n        dest &= 0xffff;\n      }\n      if (flags & 0x2)\n        dstart = (dstart & 0xff00) | ((dstart + dyinc) & 0xff);\n      else\n        dstart += dyinc;\n      if (flags & 0x1)\n        sstart = (sstart & 0xff00) | ((sstart + syinc) & 0xff);\n      else\n        sstart += syinc;\n    }\n    return w * h * (2 + ((flags & 0x4) >> 2)); // # of memory accesses\n  }\n\n  function blit_pixel(dstaddr, srcdata, flags) {\n    var curpix = dstaddr < 0xc000 ? ram.mem[dstaddr] : memread_williams(dstaddr);\n    var solid = blitregs[1];\n    var keepmask = 0xff;          //what part of original dst byte should be kept, based on NO_EVEN and NO_ODD flags\n    //even pixel (D7-D4)\n    if ((flags & 0x8) && !(srcdata & 0xf0)) {   //FG only and src even pixel=0\n      if (flags & 0x80) keepmask &= 0x0f; // no even\n    } else {\n      if (!(flags & 0x80)) keepmask &= 0x0f; // not no even\n    }\n    //odd pixel (D3-D0)\n    if ((flags & 0x8) && !(srcdata & 0x0f)) {   //FG only and src odd pixel=0\n      if (flags & 0x40) keepmask &= 0xf0; // no odd\n    } else {\n      if (!(flags & 0x40)) keepmask &= 0xf0; // not no odd\n    }\n    curpix &= keepmask;\n    if (flags & 0x10) // solid bit\n      curpix |= (solid & ~keepmask);\n    else\n      curpix |= (srcdata & ~keepmask);\n    if (dstaddr < 0x9800) // can cause recursion otherwise\n      memwrite_williams(dstaddr, curpix);\n  }\n\n  // TODO\n  /*\n    var trace = false;\n    var _traceinsns = {};\n    function _trace() {\n      var pc = cpu.getPC();\n      if (!_traceinsns[pc]) {\n        _traceinsns[pc] = 1;\n        console.log(hex(pc), cpu.getTstates());\n      }\n    }\n  */\n  this.start = function() {\n    ram = new RAM(0xc000);\n    nvram = new RAM(0x400);\n    rom = new Uint8Array(0xc000);\n    // TODO: save in browser storage?\n    //displayPCs = new Uint16Array(new ArrayBuffer(0x9800*2));\n    membus = {\n      read: memread_williams,\n      write: memwrite_williams,\n    };\n    this.readAddress = membus.read;\n    var iobus = {\n      read: function(a) { return 0; },\n      write: function(a, v) { console.log(hex(a), hex(v)); }\n    }\n    cpu = self.newCPU(membus, iobus);\n\n    audio = new MasterAudio();\n    worker = new Worker(\"./src/common/audio/z80worker.js\");\n    workerchannel = new WorkerSoundChannel(worker);\n    audio.master.addChannel(workerchannel);\n\n    let rotate = options?.rotate == null ? -90 : parseFloat(options.rotate);\n    video = new RasterVideo(mainElement, SCREEN_WIDTH, SCREEN_HEIGHT, { rotate });\n    video.create();\n    $(video.canvas).click(function(e) {\n      var x = Math.floor(e.offsetX * video.canvas.width / $(video.canvas).width());\n      var y = Math.floor(e.offsetY * video.canvas.height / $(video.canvas).height());\n      var addr = (x >> 3) + (y * 32) + 0x400;\n      if (displayPCs) console.log(x, y, hex(addr, 4), \"PC\", hex(displayPCs[addr], 4));\n    });\n    var idata = video.getFrameData();\n    setKeyboardFromMap(video, pia6821, KEYCODE_MAP);\n    pixels = video.getFrameData();\n    timer = new AnimationTimer(60, this.nextFrame.bind(this));\n  }\n\n  this.getRasterScanline = function() { return video_counter; }\n\n  this.advance = function(novideo: boolean) {\n    var cpuCyclesPerSection = Math.round(cpuCyclesPerFrame / 65);\n    for (var sl = 0; sl < 256; sl += 4) {\n      video_counter = sl;\n      // interrupts happen every 1/4 of the screen\n      if (sl == 0 || sl == 0x3c || sl == 0xbc || sl == 0xfc) {\n        if (membus.read != memread_defender || pia6821[7] == 0x3c) { // TODO?\n          if (cpu.interrupt)\n            cpu.interrupt();\n          if (cpu.requestInterrupt)\n            cpu.requestInterrupt();\n        }\n      }\n      this.runCPU(cpu, cpuCyclesPerSection);\n      if (sl < 256) video.updateFrame(0, 0, 256 - 4 - sl, 0, 4, 304);\n    }\n    // last 6 lines\n    this.runCPU(cpu, cpuCyclesPerSection * 2);\n    if (screenNeedsRefresh && !novideo) {\n      for (var i = 0; i < 0x9800; i++)\n        drawDisplayByte(i, ram.mem[i]);\n      screenNeedsRefresh = false;\n    }\n    if (watchdog_enabled && watchdog_counter-- <= 0) {\n      console.log(\"WATCHDOG FIRED, PC =\", cpu.getPC().toString(16)); // TODO: alert on video\n      // TODO: this.breakpointHit(cpu.T());\n      this.reset();\n    }\n  }\n\n  this.loadSoundROM = function(data) {\n    console.log(\"loading sound ROM \" + data.length + \" bytes\");\n    var soundrom = padBytes(data, 0x4000);\n    worker.postMessage({ rom: soundrom });\n  }\n\n  this.loadROM = function(title, data) {\n    if (data.length > 2) {\n      if (isDefender) {\n        self.loadSoundROM(data.slice(0x6800));\n        rom = rom.slice(0, 0x6800);\n      } else if (data.length > 0xc000) {\n        self.loadSoundROM(data.slice(0xc000));\n        rom = rom.slice(0, 0xc000);\n      } else if (data.length > 0x9000 && data[0x9000]) {\n        self.loadSoundROM(data.slice(0x9000));\n      }\n      rom = padBytes(data, 0xc000);\n    }\n    self.reset();\n  }\n\n  this.loadState = function(state) {\n    cpu.loadState(state.c);\n    ram.mem.set(state.b);\n    nvram.mem.set(state.nvram);\n    pia6821.set(state.pia);\n    blitregs.set(state.blt);\n    watchdog_counter = state.wdc;\n    banksel = state.bs;\n    portsel = state.ps;\n  }\n  this.saveState = function() {\n    return {\n      c: self.getCPUState(),\n      b: ram.mem.slice(0),\n      nvram: nvram.mem.slice(0),\n      pia: pia6821.slice(0),\n      blt: blitregs.slice(0),\n      wdc: watchdog_counter,\n      bs: banksel,\n      ps: portsel,\n    };\n  }\n  this.loadControlsState = function(state) {\n    pia6821.set(state.pia);\n  }\n  this.saveControlsState = function() {\n    return {\n      pia: pia6821.slice(0),\n    };\n  }\n  this.getCPUState = function() {\n    return cpu.saveState();\n  }\n\n  this.isRunning = function() {\n    return timer && timer.isRunning();\n  }\n  this.pause = function() {\n    timer.stop();\n    audio.stop();\n  }\n  this.resume = function() {\n    timer.start();\n    audio.start();\n  }\n  this.reset = function() {\n    cpu.reset();\n    watchdog_counter = INITIAL_WATCHDOG;\n    watchdog_enabled = false;\n    banksel = 1;\n  }\n  this.scaleCPUFrequency = function(scale) {\n    cpuScale = scale;\n    cpuFrequency *= scale;\n    cpuCyclesPerFrame *= scale;\n  }\n  this.getMemoryMap = function() { return { main:[\n      {name:'Video RAM',start:0x0000,size:0xc000,type:'ram'},\n      {name:'I/O Registers',start:0xc000,size:0x1000,type:'io'},\n  ] } };\n  this.showHelp = function() {\n    return \"https://8bitworkshop.com/docs/platforms/arcade/#williams-hardware\"\n  }\n}\n\nvar Williams6809Platform = function(mainElement, options) {\n  this.__proto__ = new WilliamsPlatform(mainElement, null, options);\n}\n\nvar WilliamsZ80Platform = function(mainElement, options) {\n  this.__proto__ = new WilliamsPlatform(mainElement, BaseZ80Platform, options);\n\n  // Z80 @ 4 MHz\n  // also scale bitblt clocks\n  this.scaleCPUFrequency(4);\n\n  this.ramStateToLongString = function(state) {\n    var blt = state.blt;\n    var sstart = (blt[2] << 8) + blt[3];\n    var dstart = (blt[4] << 8) + blt[5];\n    var w = blt[6] ^ 4; // blitter bug fix\n    var h = blt[7] ^ 4;\n    return \"\\nBLIT\"\n      + \" \" + hex(sstart, 4) + \" \" + hex(dstart, 4)\n      + \" w:\" + hex(w) + \" h:\" + hex(h)\n      + \" f:\" + hex(blt[0]) + \" s:\" + hex(blt[1]);\n  }\n}\n\nvar WilliamsDefenderPlatform = function(mainElement, options) {\n  this.__proto__ = new WilliamsPlatform(mainElement, null, {isDefender:true});\n  this.getMemoryMap = function() { return { main:[\n    {name:'NVRAM',start:0x400,size:0x200,type:'ram'},\n    {name:'Video RAM',start:0x0000,size:0xc000,type:'ram'},\n    {name:'I/O Registers',start:0xc000,size:0x1000,type:'io'},\n    {name:'ROM',start:0xd000,size:0x3000,type:'rom'},\n] } };\n}\n\nclass NewWilliamsPlatform extends Base6809MachinePlatform<WilliamsMachine> implements Platform {\n\n  newMachine()          { return new WilliamsMachine(false); }\n  getPresets()          { return WILLIAMS_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.readConst(a); }\n  getMemoryMap() { \n    return { main:[\n      {name:'Video RAM',start:0x0000,size:0xc000,type:'ram'},\n      {name:'I/O Registers',start:0xc000,size:0xc00,type:'io'},\n      {name:'NVRAM',start:0xcc00,size:0x400,type:'ram'},\n      {name:'ROM',start:0xd000,size:0x3000,type:'rom'},\n    ] } };\n}\n\nPLATFORMS['williams'] = NewWilliamsPlatform;\nPLATFORMS['williams.old'] = Williams6809Platform;\nPLATFORMS['williams-defender'] = WilliamsDefenderPlatform;\nPLATFORMS['williams-z80'] = WilliamsZ80Platform;\n\n// http://seanriddle.com/willhard.html\n"],
  "mappings": "qOAMA,IAAMA,EAAmB,EACnBC,GAAgB,IAETC,EAAN,cAA8BC,EAAqB,CAmCtD,YAAmBC,EAAqB,CACpC,MAAM,EADS,gBAAAA,EAjCnB,UAAO,KACP,kBAAe,KAAK,KAAO,EAAI,EAE/B,sBAAmB,GACnB,iBAAc,IACd,uBAAoB,IACpB,yBAAsB,IACtB,oBAAiB,MACjB,YAAS,IACT,gBAAa,EAIb,SAAM,IAAI,WAAW,KAAM,EAC3B,WAAQ,IAAI,WAAW,IAAK,EAC5B,SAAM,IAAI,WAAW,KAAM,EAC3B,aAAU,EACV,aAAU,EACV,sBAAmB,EACnB,sBAAmB,GACnB,aAAU,IAAI,WAAW,CAAC,EAC1B,cAAW,IAAI,WAAW,CAAC,EAM3B,aAAU,IAAI,YAAY,EAAE,EAC5B,wBAAqB,GAErB,cAAW,EACX,gBAAa,EAIT,KAAK,QAAQ,KAAK,UAAU,EAC5B,KAAK,QAAQA,CAAU,EACvB,KAAK,WAAWA,CAAU,EAC1B,KAAK,UAAU,EACf,KAAK,QAAQ,CACjB,CAEA,WAAWA,EAAqB,CAC5B,IAAIC,EAAuBC,EAAe,CACtC,CAACC,EAAK,EAAG,EAAG,CAAG,EACf,CAACA,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,EAAG,EAAG,CAAG,EACf,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,SAAU,EAAG,EAAI,EACvB,CAACA,EAAK,MAAO,EAAG,EAAI,EACpB,CAACA,EAAK,KAAM,EAAG,EAAI,EACnB,CAACA,EAAK,KAAM,EAAG,GAAI,EACnB,CAACA,EAAK,GAAI,EAAG,CAAG,EAChB,CAACA,EAAK,OAAQ,EAAG,CAAG,EACpB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,CACtB,CAAC,EAEGC,EAAuBF,EAAe,CACtC,CAACC,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,QAAS,EAAG,CAAG,EACrB,CAACA,EAAK,QAAS,EAAG,CAAG,EACrB,CAACA,EAAK,SAAU,EAAG,CAAG,EACtB,CAACA,EAAK,MAAO,EAAG,EAAI,EACpB,CAACA,EAAK,SAAU,EAAG,EAAI,EACvB,CAACA,EAAK,GAAI,EAAG,EAAI,EACjB,CAACA,EAAK,KAAM,EAAG,GAAI,EACnB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,OAAQ,EAAG,EAAI,CACzB,CAAC,EAEGE,EAAcL,EAAaC,EAAuBG,EAEtD,KAAK,QAAUE,GAAmB,KAAK,QAASD,CAAW,CAC/D,CAEA,QAAQL,EAAqB,CACzB,IAAIO,EAAkBC,EAAkB,CACpC,CAAC,KAAO,KAAO,IAAQC,GAAe,KAAK,MAAMA,CAAC,CAAI,EACtD,CAAC,KAAO,KAAO,EAAIA,GAAe,KAAK,QAAW,EAClD,CAAC,KAAO,KAAO,EAAMA,GAAe,KAAK,QAAQA,CAAC,CAAI,EACtD,CAAC,EAAK,KAAO,EAAIA,GAAM,CAAoC,CAAC,CAChE,CAAC,EAEGC,EAAmBF,EAAkB,CACrC,CAAC,EAAK,GAAK,GAAK,KAAK,WAAW,KAAK,IAAI,CAAC,EAC1C,CAAC,KAAO,KAAO,EAAG,CAACC,EAAGE,IAAM,CAAMA,GAAK,KAAM,KAAK,iBAAmBf,GAAkB,KAAK,iBAAmB,EAAM,CAAC,EACtH,CAAC,KAAO,KAAO,IAAO,CAACa,EAAGE,IAAM,CAAE,KAAK,MAAMF,CAAC,EAAIE,CAAG,CAAC,EACtD,CAAC,KAAO,KAAO,EAAK,CAACF,EAAGE,IAAM,CAAM,KAAK,QAAQ,KAAK,OAAO,YAAY,CAAE,QAASA,EAAI,EAAK,CAAC,CAAG,CAAC,EAClG,CAAC,KAAO,KAAO,EAAK,CAACF,EAAGE,IAAM,CAAE,KAAK,QAAQF,CAAC,EAAIE,CAAG,CAAC,EACtD,CAAC,EAAK,KAAO,EAAG,CAACF,EAAGE,IAAM,CAAgD,CAAC,CAC/E,CAAC,EAEGC,EAAmBJ,EAAkB,CACrC,CAAC,EAAQ,MAAQ,MAASC,GAAe,KAAK,IAAIA,CAAC,CAAI,EACvD,CAAC,MAAQ,MAAQ,KAASA,GAAM,CAC5B,OAAQ,KAAK,QAAS,CAClB,IAAK,GAAG,OAAOF,EAAgBE,CAAC,EAChC,IAAK,GAAG,OAAO,KAAK,IAAIA,EAAI,KAAM,EAClC,IAAK,GAAG,OAAO,KAAK,IAAIA,EAAI,KAAM,EAClC,IAAK,GAAG,OAAO,KAAK,IAAIA,EAAI,KAAM,EAClC,IAAK,GAAG,OAAO,KAAK,IAAIA,EAAI,KAAM,EAClC,QAAS,MAAO,EACpB,CACJ,CAAC,EACD,CAAC,MAAQ,MAAQ,MAASA,GAAe,KAAK,IAAM,KAAK,IAAIA,EAAI,KAAM,EAAI,CAAI,CACnF,CAAC,EAEGI,EAAoBL,EAAkB,CACtC,CAAC,EAAQ,MAAQ,EAAG,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtD,CAAC,MAAQ,MAAQ,EAAG,CAACC,EAAGE,IAAM,CAAE,KAAK,IAAIF,CAAC,EAAIE,CAAG,CAAC,EAClD,CAAC,MAAQ,MAAQ,KAAQD,EAAiB,KAAK,IAAI,CAAC,EACpD,CAAC,MAAQ,MAAQ,EAAG,CAACD,EAAGE,IAAM,CAAE,KAAK,QAAUA,EAAI,CAAK,CAAC,EACzD,CAAC,EAAG,MAAQ,EAAG,CAACF,EAAGE,IAAM,CAAqC,CAAC,CACnE,CAAC,EAIGG,EAAkBN,EAAkB,CACpC,CAAC,KAAO,KAAO,EAAMC,GAAe,KAAK,QAAQA,CAAC,CAAI,EACtD,CAAC,KAAO,KAAO,EAAMA,GAAe,KAAK,QAAQA,EAAI,CAAC,CAAI,EAC1D,CAAC,KAAO,KAAO,EAAIA,GAAe,KAAK,QAAW,EAClD,CAAC,KAAO,KAAO,KAAQA,GAAe,KAAK,MAAMA,CAAC,CAAI,EACtD,CAAC,EAAK,KAAO,EAAIA,GAAM,CAAsC,CAAC,CAClE,CAAC,EAEGM,EAAmBP,EAAkB,CACrC,CAAC,EAAK,GAAK,GAAK,KAAK,WAAW,KAAK,IAAI,CAAC,EAC1C,CAAC,KAAO,KAAO,GAAK,CAACC,EAAGE,IAAM,CAAM,KAAK,QAAQ,KAAK,OAAO,YAAY,CAAE,QAASA,CAAE,CAAC,CAAG,CAAC,EAG3F,CAAC,KAAO,KAAO,EAAG,CAACF,EAAGE,IAAM,CAAE,KAAK,QAAUA,EAAI,CAAK,CAAC,EACvD,CAAC,KAAO,KAAO,EAAK,KAAK,WAAW,KAAK,IAAI,CAAC,EAC9C,CAAC,KAAO,KAAO,EAAG,CAACF,EAAGE,IAAM,CAAMA,GAAK,KAAQ,KAAK,iBAAmBf,EAAkB,KAAK,iBAAmB,GAAQ,CAAC,EAC1H,CAAC,KAAO,KAAO,KAAO,CAACa,EAAGE,IAAM,CAAE,KAAK,MAAMF,CAAC,EAAIE,CAAG,CAAC,CAE1D,CAAC,EAEGK,EAAmBR,EAAkB,CACrC,CAAC,EAAQ,MAAQ,MAASC,GAAe,KAAK,QAAU,KAAK,IAAIA,CAAC,EAAI,KAAK,IAAIA,CAAC,CAAI,EACpF,CAAC,MAAQ,MAAQ,MAASA,GAAe,KAAK,IAAIA,CAAC,CAAI,EACvD,CAAC,MAAQ,MAAQ,KAAQK,CAAe,EACxC,CAAC,MAAQ,MAAQ,MAASL,GAAe,KAAK,IAAM,KAAK,IAAIA,EAAI,KAAM,EAAI,CAAI,CACnF,CAAC,EAEGQ,EAAoBT,EAAkB,CACtC,CAAC,EAAQ,MAAQ,EAAG,KAAK,mBAAmB,KAAK,IAAI,CAAC,EACtD,CAAC,MAAQ,MAAQ,EAAG,CAACC,EAAGE,IAAM,CAAE,KAAK,IAAIF,CAAC,EAAIE,CAAG,CAAC,EAClD,CAAC,MAAQ,MAAQ,KAAQI,EAAiB,KAAK,IAAI,CAAC,CAExD,CAAC,EAEGG,EAAmBlB,EAAaY,EAAmBI,EACnDG,EAAoBnB,EAAaa,EAAoBI,EACzD,KAAK,OAAS,CACV,KAAMC,EACN,MAAOC,CACX,EACA,KAAK,OAAS,KAAK,eAAe,KAAK,MAAM,EAC7C,KAAK,YAAc,KAAK,OAAO,IACnC,CAEA,WAAY,CACR,KAAK,OAAS,IAAIC,EAClB,KAAK,OAAS,IAAI,OAAO,iCAAiC,EAC1D,IAAIC,EAAgB,IAAIC,EAAmB,KAAK,MAAM,EACtD,KAAK,OAAO,OAAO,WAAWD,CAAa,CAC/C,CAEA,SAAU,CACN,KAAK,IAAM,IAAI,WAAW,KAAK,cAAc,EAC7C,KAAK,IAAM,KAAK,OAAO,KAAK,MAAM,CAEtC,CAEA,OAAOE,EAAmB,CACtB,IAAIC,EAAM,OAAO,OAAOC,GAAQ,CAAC,EACjC,OAAAD,EAAI,KAAKD,EAAO,MAAOA,EAAO,KAAM,CAAC,EAC9BC,CACX,CAMA,WAAWf,EAAGE,EAAG,CAEb,IAAIe,EAAQ,YAAef,EAAI,IAAM,GAAQA,GAAK,EAAK,IAAM,GAASA,GAAK,GAAM,GAC7Ee,GAAS,KAAK,QAAQjB,CAAC,IACvB,KAAK,QAAQA,CAAC,EAAIiB,EAClB,KAAK,mBAAqB,GAElC,CAEA,mBAAmBjB,EAAWE,EAAW,CACrC,KAAK,IAAIF,CAAC,EAAIE,EACd,KAAK,gBAAgBF,EAAGE,CAAC,EACrB,KAAK,aAAY,KAAK,WAAWF,CAAC,EAAI,KAAK,IAAI,MAAM,EAC7D,CAEA,gBAAgBA,EAAGE,EAAG,CAClB,IAAIgB,GAAQlB,EAAI,QAAW,EAAOA,EAAI,IAAQ,IAC9C,KAAK,OAAOkB,CAAG,EAAI,KAAK,QAAQhB,GAAK,CAAC,EACtC,KAAK,OAAOgB,EAAM,GAAG,EAAI,KAAK,QAAQhB,EAAI,EAAG,CACjD,CAEA,WAAWF,EAAGE,EAAG,CACb,GAAIF,EACA,KAAK,SAASA,CAAC,EAAIE,MAChB,CACH,IAAIiB,EAAS,KAAK,OAAOjB,CAAC,EAC1B,KAAK,YAAciB,EAAS,KAAK,QACrC,CACJ,CAEA,OAAOC,EAAO,CAEVA,GAAS,IACT,IAAIC,EAAOjC,GAAgB,KAAK,SAAS,CAAC,EACtCkC,GAAU,KAAK,SAAS,CAAC,GAAK,GAAK,KAAK,SAAS,CAAC,EAClDC,GAAU,KAAK,SAAS,CAAC,GAAK,GAAK,KAAK,SAAS,CAAC,EAClDC,EAAI,KAAK,SAAS,CAAC,EAAI,EACvBC,EAAI,KAAK,SAAS,CAAC,EAAI,EACvBD,GAAK,GAAGA,IACRC,GAAK,GAAGA,IACRA,GAAK,KAAKA,IAMd,QALIC,EAASN,EAAQ,EAAO,IAAM,EAC9BO,EAASP,EAAQ,EAAO,EAAII,EAC5BI,EAASR,EAAQ,EAAO,IAAM,EAC9BS,EAAST,EAAQ,EAAO,EAAII,EAC5BM,EAAU,EACLC,EAAI,EAAGA,EAAIN,EAAGM,IAAK,CAGxB,QAFIC,EAASV,EAAS,MAClBW,EAAOV,EAAS,MACXW,EAAI,EAAGA,EAAIV,EAAGU,IAAK,CACxB,IAAIC,EAAO,KAAK,OAAO,KAAKH,CAAM,EAC9BZ,EAAQ,IACRU,EAAWA,GAAW,EAAKK,EAC3B,KAAK,WAAWF,EAAOH,GAAW,EAAK,IAAMV,CAAK,GAElD,KAAK,WAAWa,EAAME,EAAMf,CAAK,EAErCY,GAAUN,EACVM,GAAU,MACVC,GAAQL,EACRK,GAAQ,KACZ,CACIb,EAAQ,EACRG,EAAUA,EAAS,MAAYA,EAASM,EAAS,IAEjDN,GAAUM,EACVT,EAAQ,EACRE,EAAUA,EAAS,MAAYA,EAASK,EAAS,IAEjDL,GAAUK,CAClB,CACA,OAAOH,EAAIC,GAAK,IAAML,EAAQ,IAAQ,GAC1C,CAEA,WAAWgB,EAASC,EAASjB,EAAO,CAChC,IAAIkB,EAASF,EAAU,MAAS,KAAK,IAAIA,CAAO,EAAI,KAAK,OAAO,KAAKA,CAAO,EACxEG,EAAQ,KAAK,SAAS,CAAC,EACvBC,EAAW,IAEVpB,EAAQ,GAAQ,EAAEiB,EAAU,KACzBjB,EAAQ,MAAMoB,GAAY,IAExBpB,EAAQ,MAAOoB,GAAY,IAGhCpB,EAAQ,GAAQ,EAAEiB,EAAU,IACzBjB,EAAQ,KAAMoB,GAAY,KAExBpB,EAAQ,KAAOoB,GAAY,KAErCF,GAAUE,EACNpB,EAAQ,GACRkB,GAAWC,EAAQ,CAACC,EAEpBF,GAAWD,EAAU,CAACG,EACtBJ,EAAU,OACV,KAAK,OAAO,MAAMA,EAASE,CAAM,CACzC,CAEA,eAAsB,CAGlB,GAFA,KAAK,OAAS,KAAK,cAAgB,KAAK,aAAa,SAAS,KAAK,KAAK,EAEpE,KAAK,oBAAsB,KAAK,UAAY,EAAG,CAC/C,QAASG,EAAI,EAAGA,EAAI,MAAQA,IACxB,KAAK,gBAAgBA,EAAG,KAAK,IAAIA,CAAC,CAAC,EACvC,KAAK,mBAAqB,EAC9B,CACI,KAAK,UAAY,GAAK,KAAK,kBAAoB,KAAK,oBAAsB,IAC1E,QAAQ,IAAI,uBAAwB,KAAK,IAAI,MAAM,EAAE,SAAS,EAAE,CAAC,EAEjE,KAAK,MAAM,EAEnB,CACA,cAAqB,CAEjB,IAAIC,EAAK,KAAK,UACVA,GAAM,GAAKA,GAAM,IAAQA,GAAM,KAAQA,GAAM,OACzC,CAAC,KAAK,YAAc,KAAK,QAAQ,CAAC,GAAK,MACnC,KAAK,IAAI,WACT,KAAK,IAAI,UAAU,EACnB,KAAK,IAAI,kBACT,KAAK,IAAI,iBAAiB,EAG1C,CACA,KAAK1C,EAAmB,CACpB,OAAO,KAAK,OAAO,KAAKA,CAAC,CAC7B,CACA,MAAMA,EAAWE,EAAiB,CAC9B,KAAK,OAAO,MAAMF,EAAGE,CAAC,CAC1B,CACA,UAAUF,EAAmB,CACzB,OAAIA,GAAK,OAAUA,GAAK,MAAe,IAC3B,KAAK,OAAO,KAAKA,CAAC,CAClC,CACA,OAAQ,CACJ,MAAM,MAAM,EACZ,KAAK,iBAAmBb,EACxB,KAAK,iBAAmB,GACxB,KAAK,QAAU,CACnB,CAEA,aAAagD,EAAM,CACf,QAAQ,IAAI,qBAAuBA,EAAK,OAAS,QAAQ,EACzD,IAAIQ,EAAWC,EAAST,EAAM,KAAM,EACpC,KAAK,OAAO,YAAY,CAAE,IAAKQ,CAAS,CAAC,CAC7C,CAEA,QAAQR,EAAM,CACNA,EAAK,OAAS,IACV,KAAK,YACL,KAAK,aAAaA,EAAK,MAAM,KAAM,CAAC,EACpCA,EAAO,KAAK,IAAI,MAAM,EAAG,KAAM,GACxBA,EAAK,OAAS,OACrB,KAAK,aAAaA,EAAK,MAAM,KAAM,CAAC,EACpCA,EAAO,KAAK,IAAI,MAAM,EAAG,KAAM,GACxBA,EAAK,OAAS,OAAUA,EAAK,KAAM,GAC1C,KAAK,aAAaA,EAAK,MAAM,KAAM,CAAC,EAExCA,EAAOS,EAAST,EAAM,KAAM,GAEhC,MAAM,QAAQA,CAAI,CACtB,CAEA,UAAUU,EAAO,CACb,KAAK,IAAI,UAAUA,EAAM,CAAC,EAC1B,KAAK,IAAI,IAAIA,EAAM,GAAG,EACtB,KAAK,MAAM,IAAIA,EAAM,KAAK,EAC1B,KAAK,QAAQ,IAAIA,EAAM,MAAM,EAC7B,KAAK,SAAS,IAAIA,EAAM,GAAG,EAC3B,KAAK,iBAAmBA,EAAM,IAC9B,KAAK,QAAUA,EAAM,GACrB,KAAK,QAAUA,EAAM,EACzB,CACA,WAAY,CACR,MAAO,CACH,EAAG,KAAK,IAAI,UAAU,EACtB,IAAK,KAAK,IAAI,MAAM,CAAC,EACrB,MAAO,KAAK,MAAM,MAAM,CAAC,EACzB,OAAQ,KAAK,QAAQ,MAAM,CAAC,EAC5B,IAAK,KAAK,SAAS,MAAM,CAAC,EAC1B,IAAK,KAAK,iBACV,GAAI,KAAK,QACT,GAAI,KAAK,OACb,CACJ,CACA,kBAAkBA,EAAO,CACrB,KAAK,QAAQ,IAAIA,EAAM,MAAM,CACjC,CACA,mBAAoB,CAChB,MAAO,CACH,OAAQ,KAAK,QAAQ,MAAM,CAAC,CAChC,CACJ,CACJ,ECnYA,IAAIC,GAAmB,CACrB,CAAE,GAAI,YAAa,KAAM,eAAgB,EACzC,CAAE,GAAI,YAAa,KAAM,aAAc,EACvC,CAAE,GAAI,UAAW,KAAM,sBAAuB,EAC9C,CAAE,GAAI,eAAgB,KAAM,YAAa,CAC3C,EAEIC,EAAmB,SAASC,EAAaC,EAAOC,EAAS,CAC3D,IAAIC,EAAO,KACX,KAAK,UAAY,IAAKF,GAAgBG,IAEtCF,EAAUA,GAAW,CAAC,EAmEtB,QAlEIG,EAAaH,GAAA,YAAAA,EAAS,WACtBI,EAAgB,IAChBC,EAAe,IAEfC,EAAKC,EAAKC,EAAKC,EACfC,EAAU,EACVC,EAAU,EACVC,EACAC,EAAmB,GACnBC,EAAU,IAAIC,EAAI,CAAC,EAAE,IACrBC,EAAW,IAAID,EAAI,CAAC,EAAE,IAEtBE,EAAOC,EAAOC,EAAQC,EACtBC,EAAqB,GACrBC,EACAC,EAEAC,EAAOC,EAAQC,GAEfC,GAAO,KACPC,GAAeD,GAAO,EAAI,EAC1BE,GAAoBD,GAAe,GACnCE,GAAW,EACXC,EAAmB,EACnBC,GAAW,WACXC,GAAY,WAEZC,GAAuBC,EAAe,CACxC,CAACC,EAAK,EAAG,EAAG,CAAG,EACf,CAACA,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,EAAG,EAAG,CAAG,EACf,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,SAAU,EAAG,EAAI,EACvB,CAACA,EAAK,MAAO,EAAG,EAAI,EACpB,CAACA,EAAK,KAAM,EAAG,EAAI,EACnB,CAACA,EAAK,KAAM,EAAG,GAAI,EACnB,CAACA,EAAK,GAAI,EAAG,CAAG,EAChB,CAACA,EAAK,OAAQ,EAAG,CAAG,EACpB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,CACpB,CAAC,EAEGC,GAAuBF,EAAe,CACxC,CAACC,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,QAAS,EAAG,CAAG,EACrB,CAACA,EAAK,QAAS,EAAG,CAAG,EACrB,CAACA,EAAK,SAAU,EAAG,CAAG,EACtB,CAACA,EAAK,MAAO,EAAG,EAAI,EACpB,CAACA,EAAK,SAAU,EAAG,EAAI,EACvB,CAACA,EAAK,GAAI,EAAG,EAAI,EACjB,CAACA,EAAK,KAAM,EAAG,GAAI,EACnB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,MAAO,EAAG,CAAG,EACnB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,KAAM,EAAG,CAAG,EAClB,CAACA,EAAK,OAAQ,EAAG,EAAI,CACvB,CAAC,EAEGE,GAAcnC,EAAa+B,GAAuBG,GAIlDE,EAAU,CAAC,EACNC,EAAK,EAAGA,EAAK,GAAIA,IACxBD,EAAQC,CAAE,EAAI,WAEhB,KAAK,WAAa,UAAW,CAC3B,OAAO5C,EACT,EAIA,IAAI6C,GAAkBC,EAAkB,CACtC,CAAC,KAAO,KAAO,IAAO,SAASC,EAAG,CAAE,OAAOlC,EAAM,IAAIkC,CAAC,CAAG,CAAC,EAC1D,CAAC,KAAO,KAAO,EAAG,SAASA,EAAG,CAAE,OAAOpB,CAAe,CAAC,EACvD,CAAC,KAAO,KAAO,EAAK,SAASoB,EAAG,CAAE,OAAO7B,EAAQ6B,CAAC,CAAG,CAAC,EACtD,CAAC,EAAK,KAAO,EAAG,SAASA,EAAG,CAAoC,CAAC,CACnE,CAAC,EAEGC,GAAmBF,EAAkB,CACvC,CAAC,EAAK,GAAK,GAAKG,EAAU,EAC1B,CAAC,KAAO,KAAO,EAAG,SAASF,EAAGG,EAAG,CAAMA,GAAK,KAAMlC,EAAmBmB,GAAkBlB,EAAiB,EAAM,CAAC,EAC/G,CAAC,KAAO,KAAO,IAAO,SAAS8B,EAAGG,EAAG,CAAErC,EAAM,IAAIkC,CAAC,EAAIG,CAAG,CAAC,EAC1D,CAAC,KAAO,KAAO,EAAK,SAASH,EAAGG,EAAG,CAAMrB,GAAQA,EAAO,YAAY,CAAE,QAASqB,EAAI,EAAK,CAAC,CAAG,CAAC,EAC7F,CAAC,KAAO,KAAO,EAAK,SAASH,EAAGG,EAAG,CAAEhC,EAAQ6B,CAAC,EAAIG,CAAG,CAAC,EACtD,CAAC,EAAK,KAAO,EAAG,SAASH,EAAGG,EAAG,CAAE,QAAQ,IAAI,UAAWC,EAAIJ,CAAC,EAAGI,EAAID,CAAC,CAAC,CAAG,CAAC,CAC5E,CAAC,EAEGE,GAAmBN,EAAkB,CACvC,CAAC,EAAQ,MAAQ,MAAQ,SAASC,EAAG,CAAE,OAAOpC,EAAI,IAAIoC,CAAC,CAAG,CAAC,EAC3D,CAAC,MAAQ,MAAQ,KAAQ,SAASA,EAAG,CACnC,OAAQhC,EAAS,CACf,IAAK,GAAG,OAAO8B,GAAgBE,CAAC,EAChC,IAAK,GAAG,OAAOnC,EAAImC,EAAI,KAAM,EAC7B,IAAK,GAAG,OAAOnC,EAAImC,EAAI,KAAM,EAC7B,IAAK,GAAG,OAAOnC,EAAImC,EAAI,KAAM,EAC7B,IAAK,GAAG,OAAOnC,EAAImC,EAAI,KAAM,EAC7B,QAAS,MAAO,EAClB,CACF,CAAC,EACD,CAAC,MAAQ,MAAQ,MAAQ,SAASA,EAAG,CAAE,OAAOnC,EAAMA,EAAImC,EAAI,KAAM,EAAI,CAAG,CAAC,CAC5E,CAAC,EAEGM,GAAoBP,EAAkB,CACxC,CAAC,EAAQ,MAAQ,EAAGQ,EAAkB,EACtC,CAAC,MAAQ,MAAQ,EAAG,SAASP,EAAGG,EAAG,CAAEvC,EAAI,IAAIoC,CAAC,EAAIG,CAAG,CAAC,EACtD,CAAC,MAAQ,MAAQ,KAAQF,EAAgB,EACzC,CAAC,MAAQ,MAAQ,EAAG,SAASD,EAAGG,EAAG,CAAEnC,EAAUmC,EAAI,CAAK,CAAC,EACzD,CAAC,EAAG,MAAQ,EAAG,SAASH,EAAGG,EAAG,CAAE,QAAQ,IAAIC,EAAIJ,CAAC,EAAGI,EAAID,CAAC,CAAC,CAAG,CAAC,CAChE,CAAC,EAIGK,GAAkBT,EAAkB,CACtC,CAAC,KAAO,KAAO,EAAK,SAASC,EAAG,CAAE,OAAO7B,EAAQ6B,CAAC,CAAG,CAAC,EACtD,CAAC,KAAO,KAAO,EAAK,SAASA,EAAG,CAAE,OAAO7B,EAAQ6B,EAAI,CAAC,CAAG,CAAC,EAC1D,CAAC,KAAO,KAAO,EAAG,SAASA,EAAG,CAAE,OAAOpB,CAAe,CAAC,EACvD,CAAC,KAAO,KAAO,KAAO,SAASoB,EAAG,CAAE,OAAOlC,EAAM,IAAIkC,CAAC,CAAG,CAAC,EAC1D,CAAC,EAAK,KAAO,EAAG,SAASA,EAAG,CAAsC,CAAC,CACrE,CAAC,EAEGS,GAAmBV,EAAkB,CACvC,CAAC,EAAK,GAAK,GAAKG,EAAU,EAC1B,CAAC,KAAO,KAAO,GAAK,SAASF,EAAGG,EAAG,CAAMrB,GAAQA,EAAO,YAAY,CAAE,QAASqB,CAAE,CAAC,CAAG,CAAC,EAGtF,CAAC,KAAO,KAAO,EAAG,SAASH,EAAGG,EAAG,CAAEnC,EAAUmC,EAAI,CAAK,CAAC,EACvD,CAAC,KAAO,KAAO,EAAKO,EAAU,EAC9B,CAAC,KAAO,KAAO,EAAG,SAASV,EAAGG,EAAG,CAAMA,GAAK,KAAQlC,EAAmBmB,EAAkBlB,EAAiB,GAAQ,CAAC,EACnH,CAAC,KAAO,KAAO,KAAO,SAAS8B,EAAGG,EAAG,CAAErC,EAAM,IAAIkC,CAAC,EAAIG,CAAG,CAAC,CAE5D,CAAC,EAEGQ,GAAmBZ,EAAkB,CACvC,CAAC,EAAQ,MAAQ,MAAQ,SAASC,EAAG,CAAE,OAAOhC,EAAUH,EAAImC,CAAC,EAAIpC,EAAI,IAAIoC,CAAC,CAAG,CAAC,EAC9E,CAAC,MAAQ,MAAQ,MAAQ,SAASA,EAAG,CAAE,OAAOpC,EAAI,IAAIoC,CAAC,CAAG,CAAC,EAC3D,CAAC,MAAQ,MAAQ,KAAQQ,EAAe,EACxC,CAAC,MAAQ,MAAQ,MAAQ,SAASR,EAAG,CAAE,OAAOnC,EAAMA,EAAImC,EAAI,KAAM,EAAI,CAAG,CAAC,CAC5E,CAAC,EAEGY,GAAoBb,EAAkB,CACxC,CAAC,EAAQ,MAAQ,EAAGQ,EAAkB,EACtC,CAAC,MAAQ,MAAQ,EAAG,SAASP,EAAGG,EAAG,CAAEvC,EAAI,IAAIoC,CAAC,EAAIG,CAAG,CAAC,EACtD,CAAC,MAAQ,MAAQ,KAAQM,EAAgB,CAE3C,CAAC,EAEGI,EAAmBrD,EAAa6C,GAAmBM,GACnDG,GAAoBtD,EAAa8C,GAAoBM,GAIzD,SAASV,GAAWF,EAAGG,EAAG,CAExB,IAAIY,EAAQ,YAAeZ,EAAI,IAAM,GAAQA,GAAK,EAAK,IAAM,GAASA,GAAK,GAAM,GAC7EY,GAASnB,EAAQI,CAAC,IACpBJ,EAAQI,CAAC,EAAIe,EACbrC,EAAqB,GAEzB,CAEA,SAAS6B,GAAmBP,EAAWG,EAAW,CAChDvC,EAAI,IAAIoC,CAAC,EAAIG,EACba,GAAgBhB,EAAGG,CAAC,EAChB1B,IAAYA,EAAWuB,CAAC,EAAIrC,EAAI,MAAM,EAC5C,CAEA,SAASqD,GAAgBhB,EAAGG,EAAG,CAC7B,IAAIc,GAAQjB,EAAI,QAAW,EAAOA,EAAI,IAAQ,IAC9CxB,EAAOyC,CAAG,EAAIrB,EAAQO,GAAK,CAAC,EAC5B3B,EAAOyC,EAAM,GAAG,EAAIrB,EAAQO,EAAI,EAAG,CACrC,CAEA,SAASO,GAAWV,EAAGG,EAAG,CACxB,GAAIH,EACF3B,EAAS2B,CAAC,EAAIG,MACT,CACL,IAAIe,EAASC,GAAOhB,CAAC,EACrB,KAAK,YAAce,EAAS/B,EAC9B,CACF,CAEA,SAASgC,GAAOC,EAAO,CAErBA,GAAS,IACT,IAAIC,EAAO5D,EAAgBY,EAAS,CAAC,EACjCiD,GAAUjD,EAAS,CAAC,GAAK,GAAKA,EAAS,CAAC,EACxCkD,GAAUlD,EAAS,CAAC,GAAK,GAAKA,EAAS,CAAC,EACxCmD,EAAInD,EAAS,CAAC,EAAI,EAClBoD,EAAIpD,EAAS,CAAC,EAAI,EAClBmD,GAAK,GAAGA,IACRC,GAAK,GAAGA,IACRA,GAAK,KAAKA,IAMd,QALIC,EAASN,EAAQ,EAAO,IAAM,EAC9BO,GAASP,EAAQ,EAAO,EAAII,EAC5BI,GAASR,EAAQ,EAAO,IAAM,EAC9BS,GAAST,EAAQ,EAAO,EAAII,EAC5BM,EAAU,EACLC,GAAI,EAAGA,GAAIN,EAAGM,KAAK,CAG1B,QAFIC,EAASV,EAAS,MAClBW,EAAOV,EAAS,MACXW,GAAI,EAAGA,GAAIV,EAAGU,KAAK,CAC1B,IAAIC,GAAOtB,EAAiBmB,CAAM,EAC9BZ,EAAQ,IACVU,EAAWA,GAAW,EAAKK,GAC3BC,GAAWH,EAAOH,GAAW,EAAK,IAAMV,CAAK,GAE7CgB,GAAWH,EAAME,GAAMf,CAAK,EAE9BY,GAAUN,EACVM,GAAU,MACVC,GAAQL,GACRK,GAAQ,KACV,CACIb,EAAQ,EACVG,EAAUA,EAAS,MAAYA,EAASM,GAAS,IAEjDN,GAAUM,GACRT,EAAQ,EACVE,EAAUA,EAAS,MAAYA,EAASK,GAAS,IAEjDL,GAAUK,EACd,CACA,OAAOH,EAAIC,GAAK,IAAML,EAAQ,IAAQ,GACxC,CAEA,SAASgB,GAAWC,EAASC,EAASlB,EAAO,CAC3C,IAAImB,EAASF,EAAU,MAASzE,EAAI,IAAIyE,CAAO,EAAIxB,EAAiBwB,CAAO,EACvEG,EAAQnE,EAAS,CAAC,EAClBoE,EAAW,IAEVrB,EAAQ,GAAQ,EAAEkB,EAAU,KAC3BlB,EAAQ,MAAMqB,GAAY,IAExBrB,EAAQ,MAAOqB,GAAY,IAG9BrB,EAAQ,GAAQ,EAAEkB,EAAU,IAC3BlB,EAAQ,KAAMqB,GAAY,KAExBrB,EAAQ,KAAOqB,GAAY,KAEnCF,GAAUE,EACNrB,EAAQ,GACVmB,GAAWC,EAAQ,CAACC,EAEpBF,GAAWD,EAAU,CAACG,EACpBJ,EAAU,OACZvB,GAAkBuB,EAASE,CAAM,CACrC,CAcA,KAAK,MAAQ,UAAW,CACtB3E,EAAM,IAAIQ,EAAI,KAAM,EACpBN,EAAQ,IAAIM,EAAI,IAAK,EACrBP,EAAM,IAAI,WAAW,KAAM,EAG3Bc,EAAS,CACP,KAAMkC,EACN,MAAOC,EACT,EACA,KAAK,YAAcnC,EAAO,KAC1B,IAAI+D,EAAQ,CACV,KAAM,SAAS1C,EAAG,CAAE,MAAO,EAAG,EAC9B,MAAO,SAASA,EAAGG,EAAG,CAAE,QAAQ,IAAIC,EAAIJ,CAAC,EAAGI,EAAID,CAAC,CAAC,CAAG,CACvD,EACAxC,EAAML,EAAK,OAAOqB,EAAQ+D,CAAK,EAE/B7D,EAAQ,IAAI8D,EACZ7D,EAAS,IAAI,OAAO,iCAAiC,EACrDC,GAAgB,IAAI6D,EAAmB9D,CAAM,EAC7CD,EAAM,OAAO,WAAWE,EAAa,EAErC,IAAI8D,GAASxF,GAAA,YAAAA,EAAS,SAAU,KAAO,IAAM,WAAWA,EAAQ,MAAM,EACtEiB,EAAQ,IAAIwE,GAAY3F,EAAaO,EAAcD,EAAe,CAAE,OAAAoF,CAAO,CAAC,EAC5EvE,EAAM,OAAO,EACb,EAAEA,EAAM,MAAM,EAAE,MAAM,SAASyE,EAAG,CAChC,IAAIb,EAAI,KAAK,MAAMa,EAAE,QAAUzE,EAAM,OAAO,MAAQ,EAAEA,EAAM,MAAM,EAAE,MAAM,CAAC,EACvEyD,EAAI,KAAK,MAAMgB,EAAE,QAAUzE,EAAM,OAAO,OAAS,EAAEA,EAAM,MAAM,EAAE,OAAO,CAAC,EACzE0E,GAAQd,GAAK,GAAMH,EAAI,GAAM,KAC7BtD,GAAY,QAAQ,IAAIyD,EAAGH,EAAG3B,EAAI4C,EAAM,CAAC,EAAG,KAAM5C,EAAI3B,EAAWuE,CAAI,EAAG,CAAC,CAAC,CAChF,CAAC,EACD,IAAIC,EAAQ3E,EAAM,aAAa,EAC/B4E,GAAmB5E,EAAOH,EAASwB,EAAW,EAC9CnB,EAASF,EAAM,aAAa,EAC5BC,EAAQ,IAAI4E,GAAe,GAAI,KAAK,UAAU,KAAK,IAAI,CAAC,CAC1D,EAEA,KAAK,kBAAoB,UAAW,CAAE,OAAOvE,CAAe,EAE5D,KAAK,QAAU,SAASwE,EAAkB,CAExC,QADIC,EAAsB,KAAK,MAAMnE,GAAoB,EAAE,EAClDoE,EAAK,EAAGA,EAAK,IAAKA,GAAM,EAC/B1E,EAAgB0E,GAEZA,GAAM,GAAKA,GAAM,IAAQA,GAAM,KAAQA,GAAM,OAC3C3E,EAAO,MAAQ0B,IAAoBlC,EAAQ,CAAC,GAAK,MAC/CR,EAAI,WACNA,EAAI,UAAU,EACZA,EAAI,kBACNA,EAAI,iBAAiB,GAG3B,KAAK,OAAOA,EAAK0F,CAAmB,EAChCC,EAAK,KAAKhF,EAAM,YAAY,EAAG,EAAG,IAAUgF,EAAI,EAAG,EAAG,GAAG,EAI/D,GADA,KAAK,OAAO3F,EAAK0F,EAAsB,CAAC,EACpC3E,GAAsB,CAAC0E,EAAS,CAClC,QAASG,EAAI,EAAGA,EAAI,MAAQA,IAC1BvC,GAAgBuC,EAAG3F,EAAI,IAAI2F,CAAC,CAAC,EAC/B7E,EAAqB,EACvB,CACIR,GAAoBD,KAAsB,IAC5C,QAAQ,IAAI,uBAAwBN,EAAI,MAAM,EAAE,SAAS,EAAE,CAAC,EAE5D,KAAK,MAAM,EAEf,EAEA,KAAK,aAAe,SAASwE,EAAM,CACjC,QAAQ,IAAI,qBAAuBA,EAAK,OAAS,QAAQ,EACzD,IAAIqB,EAAWC,EAAStB,EAAM,KAAM,EACpCrD,EAAO,YAAY,CAAE,IAAK0E,CAAS,CAAC,CACtC,EAEA,KAAK,QAAU,SAASE,EAAOvB,EAAM,CAC/BA,EAAK,OAAS,IACZ3E,GACFF,EAAK,aAAa6E,EAAK,MAAM,KAAM,CAAC,EACpCtE,EAAMA,EAAI,MAAM,EAAG,KAAM,GAChBsE,EAAK,OAAS,OACvB7E,EAAK,aAAa6E,EAAK,MAAM,KAAM,CAAC,EACpCtE,EAAMA,EAAI,MAAM,EAAG,KAAM,GAChBsE,EAAK,OAAS,OAAUA,EAAK,KAAM,GAC5C7E,EAAK,aAAa6E,EAAK,MAAM,KAAM,CAAC,EAEtCtE,EAAM4F,EAAStB,EAAM,KAAM,GAE7B7E,EAAK,MAAM,CACb,EAEA,KAAK,UAAY,SAASqG,EAAO,CAC/BhG,EAAI,UAAUgG,EAAM,CAAC,EACrB/F,EAAI,IAAI,IAAI+F,EAAM,CAAC,EACnB7F,EAAM,IAAI,IAAI6F,EAAM,KAAK,EACzBxF,EAAQ,IAAIwF,EAAM,GAAG,EACrBtF,EAAS,IAAIsF,EAAM,GAAG,EACtB1F,EAAmB0F,EAAM,IACzB3F,EAAU2F,EAAM,GAChB5F,EAAU4F,EAAM,EAClB,EACA,KAAK,UAAY,UAAW,CAC1B,MAAO,CACL,EAAGrG,EAAK,YAAY,EACpB,EAAGM,EAAI,IAAI,MAAM,CAAC,EAClB,MAAOE,EAAM,IAAI,MAAM,CAAC,EACxB,IAAKK,EAAQ,MAAM,CAAC,EACpB,IAAKE,EAAS,MAAM,CAAC,EACrB,IAAKJ,EACL,GAAID,EACJ,GAAID,CACN,CACF,EACA,KAAK,kBAAoB,SAAS4F,EAAO,CACvCxF,EAAQ,IAAIwF,EAAM,GAAG,CACvB,EACA,KAAK,kBAAoB,UAAW,CAClC,MAAO,CACL,IAAKxF,EAAQ,MAAM,CAAC,CACtB,CACF,EACA,KAAK,YAAc,UAAW,CAC5B,OAAOR,EAAI,UAAU,CACvB,EAEA,KAAK,UAAY,UAAW,CAC1B,OAAOY,GAASA,EAAM,UAAU,CAClC,EACA,KAAK,MAAQ,UAAW,CACtBA,EAAM,KAAK,EACXM,EAAM,KAAK,CACb,EACA,KAAK,OAAS,UAAW,CACvBN,EAAM,MAAM,EACZM,EAAM,MAAM,CACd,EACA,KAAK,MAAQ,UAAW,CACtBlB,EAAI,MAAM,EACVM,EAAmBmB,EACnBlB,EAAmB,GACnBF,EAAU,CACZ,EACA,KAAK,kBAAoB,SAAS4F,EAAO,CACvCzE,GAAWyE,EACX3E,IAAgB2E,EAChB1E,IAAqB0E,CACvB,EACA,KAAK,aAAe,UAAW,CAAE,MAAO,CAAE,KAAK,CAC3C,CAAC,KAAK,YAAY,MAAM,EAAO,KAAK,MAAO,KAAK,KAAK,EACrD,CAAC,KAAK,gBAAgB,MAAM,MAAO,KAAK,KAAO,KAAK,IAAI,CAC5D,CAAE,CAAE,EACJ,KAAK,SAAW,UAAW,CACzB,MAAO,mEACT,CACF,EAEIC,GAAuB,SAAS1G,EAAaE,EAAS,CACxD,KAAK,UAAY,IAAIH,EAAiBC,EAAa,KAAME,CAAO,CAClE,EAEIyG,GAAsB,SAAS3G,EAAaE,EAAS,CACvD,KAAK,UAAY,IAAIH,EAAiBC,EAAa4G,GAAiB1G,CAAO,EAI3E,KAAK,kBAAkB,CAAC,EAExB,KAAK,qBAAuB,SAASsG,EAAO,CAC1C,IAAIK,EAAML,EAAM,IACZrC,GAAU0C,EAAI,CAAC,GAAK,GAAKA,EAAI,CAAC,EAC9BzC,GAAUyC,EAAI,CAAC,GAAK,GAAKA,EAAI,CAAC,EAC9BxC,EAAIwC,EAAI,CAAC,EAAI,EACbvC,EAAIuC,EAAI,CAAC,EAAI,EACjB,MAAO;AAAA,OACG5D,EAAIkB,EAAQ,CAAC,EAAI,IAAMlB,EAAImB,EAAQ,CAAC,EAC1C,MAAQnB,EAAIoB,CAAC,EAAI,MAAQpB,EAAIqB,CAAC,EAC9B,MAAQrB,EAAI4D,EAAI,CAAC,CAAC,EAAI,MAAQ5D,EAAI4D,EAAI,CAAC,CAAC,CAC9C,CACF,EAEIC,GAA2B,SAAS9G,EAAaE,EAAS,CAC5D,KAAK,UAAY,IAAIH,EAAiBC,EAAa,KAAM,CAAC,WAAW,EAAI,CAAC,EAC1E,KAAK,aAAe,UAAW,CAAE,MAAO,CAAE,KAAK,CAC7C,CAAC,KAAK,QAAQ,MAAM,KAAM,KAAK,IAAM,KAAK,KAAK,EAC/C,CAAC,KAAK,YAAY,MAAM,EAAO,KAAK,MAAO,KAAK,KAAK,EACrD,CAAC,KAAK,gBAAgB,MAAM,MAAO,KAAK,KAAO,KAAK,IAAI,EACxD,CAAC,KAAK,MAAM,MAAM,MAAO,KAAK,MAAO,KAAK,KAAK,CACnD,CAAE,CAAE,CACJ,EAEM+G,EAAN,cAAkCC,EAA6D,CAE7F,YAAsB,CAAE,OAAO,IAAIC,EAAgB,EAAK,CAAG,CAC3D,YAAsB,CAAE,OAAOnH,EAAkB,CACjD,qBAAsB,CAAE,MAAO,IAAM,CACrC,YAAY+C,EAAU,CAAE,OAAO,KAAK,QAAQ,UAAUA,CAAC,CAAG,CAC1D,cAAe,CACb,MAAO,CAAE,KAAK,CACZ,CAAC,KAAK,YAAY,MAAM,EAAO,KAAK,MAAO,KAAK,KAAK,EACrD,CAAC,KAAK,gBAAgB,MAAM,MAAO,KAAK,KAAM,KAAK,IAAI,EACvD,CAAC,KAAK,QAAQ,MAAM,MAAO,KAAK,KAAM,KAAK,KAAK,EAChD,CAAC,KAAK,MAAM,MAAM,MAAO,KAAK,MAAO,KAAK,KAAK,CACjD,CAAE,CAAE,CACR,EAEAqE,EAAU,SAAcH,EACxBG,EAAU,cAAc,EAAIR,GAC5BQ,EAAU,mBAAmB,EAAIJ,GACjCI,EAAU,cAAc,EAAIP",
  "names": ["INITIAL_WATCHDOG", "SCREEN_HEIGHT", "WilliamsMachine", "BasicScanlineMachine", "isDefender", "DEFENDER_KEYCODE_MAP", "makeKeycodeMap", "Keys", "ROBOTRON_KEYCODE_MAP", "KEYCODE_MAP", "newKeyboardHandler", "ioread_defender", "newAddressDecoder", "a", "iowrite_defender", "v", "memread_defender", "memwrite_defender", "ioread_robotron", "iowrite_robotron", "memread_robotron", "memwrite_robotron", "memread_williams", "memwrite_williams", "MasterAudio", "workerchannel", "WorkerSoundChannel", "membus", "cpu", "CPU6809", "color", "ofs", "cycles", "flags", "offs", "sstart", "dstart", "w", "h", "sxinc", "syinc", "dxinc", "dyinc", "pixdata", "y", "source", "dest", "x", "data", "dstaddr", "srcdata", "curpix", "solid", "keepmask", "i", "sl", "soundrom", "padBytes", "state", "WILLIAMS_PRESETS", "WilliamsPlatform", "mainElement", "proto", "options", "self", "Base6809Platform", "isDefender", "SCREEN_HEIGHT", "SCREEN_WIDTH", "cpu", "ram", "rom", "nvram", "portsel", "banksel", "watchdog_counter", "watchdog_enabled", "pia6821", "RAM", "blitregs", "video", "timer", "pixels", "displayPCs", "screenNeedsRefresh", "membus", "video_counter", "audio", "worker", "workerchannel", "xtal", "cpuFrequency", "cpuCyclesPerFrame", "cpuScale", "INITIAL_WATCHDOG", "PIXEL_ON", "PIXEL_OFF", "DEFENDER_KEYCODE_MAP", "makeKeycodeMap", "Keys", "ROBOTRON_KEYCODE_MAP", "KEYCODE_MAP", "palette", "ii", "ioread_defender", "newAddressDecoder", "a", "iowrite_defender", "setPalette", "v", "hex", "memread_defender", "memwrite_defender", "write_display_byte", "ioread_robotron", "iowrite_robotron", "setBlitter", "memread_robotron", "memwrite_robotron", "memread_williams", "memwrite_williams", "color", "drawDisplayByte", "ofs", "cycles", "doBlit", "flags", "offs", "sstart", "dstart", "w", "h", "sxinc", "syinc", "dxinc", "dyinc", "pixdata", "y", "source", "dest", "x", "data", "blit_pixel", "dstaddr", "srcdata", "curpix", "solid", "keepmask", "iobus", "MasterAudio", "WorkerSoundChannel", "rotate", "RasterVideo", "e", "addr", "idata", "setKeyboardFromMap", "AnimationTimer", "novideo", "cpuCyclesPerSection", "sl", "i", "soundrom", "padBytes", "title", "state", "scale", "Williams6809Platform", "WilliamsZ80Platform", "BaseZ80Platform", "blt", "WilliamsDefenderPlatform", "NewWilliamsPlatform", "Base6809MachinePlatform", "WilliamsMachine", "PLATFORMS"]
}
