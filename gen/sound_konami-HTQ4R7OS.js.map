{
  "version": 3,
  "sources": ["../src/platform/sound_konami.ts"],
  "sourcesContent": ["\nimport { Platform, BaseZ80Platform  } from \"../common/baseplatform\";\nimport { PLATFORMS, RAM, newAddressDecoder, padBytes, noise, setKeyboardFromMap, AnimationTimer, RasterVideo, Keys, makeKeycodeMap } from \"../common/emu\";\nimport { hex } from \"../common/util\";\n\n// from TSS\ndeclare var MasterChannel, AudioLooper, PsgDeviceChannel;\n\nvar KONAMISOUND_PRESETS = [\n];\n\nvar KonamiSoundPlatform = function(mainElement) {\n  this.__proto__ = new (BaseZ80Platform as any)();\n\n  var cpu, ram, rom, membus, iobus;\n  var audio, master;\n  var video, timer;\n  var interruptPending = 0;\n  var psgRegister = 0;\n  var psg;\n\n  var cpuFrequency = 14318000/8;\n  var ioTimerFrequency = 1789750 / 1280;\n  var cpuCyclesPerFrame = cpuFrequency/60;\n  var cpuCyclesPerTimer = cpuFrequency/ioTimerFrequency;\n\n  this.getPresets = function() {\n    return KONAMISOUND_PRESETS;\n  }\n\n  this.start = function() {\n    ram = new RAM(0x400);\n    membus = {\n      read: newAddressDecoder([\n\t\t\t\t[0x0000, 0x3fff, 0x3fff, function(a) { return rom ? rom[a] : null; }],\n\t\t\t\t[0x4000, 0x5fff, 0x3ff,  function(a) { return ram.mem[a]; }]\n\t\t\t]),\n\t\t\twrite: newAddressDecoder([\n\t\t\t\t[0x4000, 0x5fff, 0x3ff,  function(a,v) { ram.mem[a] = v; }],\n\t\t\t]),\n      isContended: function() { return false; },\n    };\n    iobus = {\n      read: function(addr) {\n        if (addr & 0x40) {\n          if (psgRegister == 0xf) { // timer\n            var bit = (cpu.getTstates() / cpuCyclesPerTimer) & 1;\n            return bit ? 0xff : 0x00; // 0x00, 0x10, 0x20, 0x30, 0x40, 0x90, 0xa0, 0xb0, 0xa0, 0xd0\n          }\n          return psg.readRegister(psgRegister) & 0xff;\n        }\n        return 0;\n    \t},\n    \twrite: function(addr, val) {\n        if (addr & 0x80) {\n          psgRegister = val & 0xf;\n          //console.log('PSG reg', psgRegister);\n        }\n        if (addr & 0x40) {\n          psg.writeRegisterAY(psgRegister, val & 0xff);\n          //console.log('PSG write', psgRegister, val);\n        }\n    \t}\n    };\n    this.readAddress = membus.read;\n    cpu = this.newCPU(membus, iobus);\n    psg = new PsgDeviceChannel();\n    master = new MasterChannel();\n    psg.setMode(PsgDeviceChannel.MODE_SIGNED);\n    psg.setDevice(PsgDeviceChannel.DEVICE_AY_3_8910);\n    master.addChannel(psg);\n    audio = new AudioLooper(512);\n    audio.setChannel(master);\n    //audio = new SampleAudio(psg.sampleRate);\n    video = new RasterVideo(mainElement,256,256);\n    video.create();\n    video.setKeyboardEvents(function(key,code,flags) {\n      var intr = (key-49);\n      if (intr >= 0 && (flags & 1)) {\n        psg.writeRegister(14, intr);\n        psg.writeRegister(15, 0x80);\n        cpu.setIFF1(1);\n        cpu.requestInterrupt(0x38);\n        /*\n        console.log(cpu.saveState());\n        console.log(hex(intr * 8), cpu.getIFF1(), cpu.getIM());\n        cpu.runFrame(cpu.getTstates() + 1);\n        console.log(cpu.saveState());\n        */\n      }\n    });\n    timer = new AnimationTimer(60, () => {\n\t\t\tif (!this.isRunning())\n\t\t\t\treturn;\n      var debugCond = this.getDebugCallback();\n      var targetTstates = cpu.getTstates() + cpuCyclesPerFrame;\n      if (debugCond) {\n        while (cpu.getTstates() < targetTstates) {\n          if (debugCond && debugCond()) { debugCond = null; }\n          cpu.runFrame(cpu.getTstates() + 1);\n        }\n      } else {\n        cpu.runFrame(targetTstates);\n      }\n    });\n  }\n\n  this.loadROM = function(title, data) {\n    rom = padBytes(data, 0x4000);\n    cpu.reset();\n  }\n\n  this.loadState = function(state) {\n    cpu.loadState(state.c);\n    ram.mem.set(state.b);\n  }\n  this.saveState = function() {\n    return {\n      c:this.getCPUState(),\n      b:ram.mem.slice(0),\n    };\n  }\n  this.getCPUState = function() {\n    return cpu.saveState();\n  }\n\n  this.isRunning = function() {\n    return timer && timer.isRunning();\n  }\n  this.pause = function() {\n    timer.stop();\n    //audio.stop();\n  }\n  this.resume = function() {\n    timer.start();\n    audio.activate();\n  }\n  this.reset = function() {\n    cpu.reset();\n    if (!this.getDebugCallback()) cpu.setTstates(0); // TODO?\n  }\n}\n\nPLATFORMS['sound_konami'] = KonamiSoundPlatform;\n"],
  "mappings": "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",
  "names": ["KONAMISOUND_PRESETS", "KonamiSoundPlatform", "mainElement", "BaseZ80Platform", "cpu", "ram", "rom", "membus", "iobus", "audio", "master", "video", "timer", "interruptPending", "psgRegister", "psg", "cpuFrequency", "ioTimerFrequency", "cpuCyclesPerFrame", "cpuCyclesPerTimer", "RAM", "newAddressDecoder", "a", "v", "addr", "bit", "val", "RasterVideo", "key", "code", "flags", "intr", "AnimationTimer", "debugCond", "targetTstates", "title", "data", "padBytes", "state", "PLATFORMS"]
}
