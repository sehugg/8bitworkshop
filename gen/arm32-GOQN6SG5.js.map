{
  "version": 3,
  "sources": ["../src/common/cpu/ARM.ts", "../src/machine/arm32.ts", "../src/platform/arm32.ts"],
  "sourcesContent": ["/*\nFrom: https://github.com/endrift/gbajs\n\nCopyright \u00A9 2012 \u2013 2013, Jeffrey Pfau\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\nLIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\nCONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\nCONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\nARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n*/\n\nimport { Bus, Bus32, CPU, InstructionBased, SavesState } from \"../devices\";\nimport { EmuHalt } from \"../emu\";\nimport { hex } from \"../util\";\n\ninterface AddressFunction extends Function {\n    writesPC? : boolean;\n    fixedJump? : boolean;\n}\n\ninterface ARMIRQInterface {\n\tclear() : void;\n\tswi(opcode : number) : void;\n\tswi32(opcode : number) : void;\n\tupdateTimers() : void;\n\ttestIRQ() : void;\n}\n\ninterface ARMMemoryRegion {\n\tPAGE_MASK : number;\n\tICACHE_PAGE_BITS : number;\n\ticache : ARMMemoryPage[];\n}\n\ninterface ARMOperation {\n\tnext : ARMOperation;\n\tpage : ARMMemoryPage;\n\taddress : number;\n\topcode : number;\n}\n\ninterface ARMMemoryPage {\n\tarm : ARMOperation[];\n\tthumb : ARMOperation[];\n\tinvalid : boolean;\n}\n\ninterface ARMMMUInterface {\n\tmemory : ARMMemoryRegion[];\n\tBASE_OFFSET : number;\n\tOFFSET_MASK : number;\n\n\tload8(a: number) : number;\n\tloadU8(a: number) : number;\n\tload16(a: number) : number;\n\tloadU16(a: number) : number;\n\tload32(a: number) : number;\n\tstore8(a: number, v: number) : void;\n\tstore16(a: number, v: number) : void;\n\tstore32(a: number, v: number) : void;\n\n\twait(a: number) : void;\n\twait32(a: number) : void;\n\twaitSeq32(a: number) : void;\n\twaitMul(a: number) : void;\n\twaitMulti32(a: number, total: number) : void;\n\twaitPrefetch(a: number) : void;\n\twaitPrefetch32(a: number) : void;\n\n\taddressToPage(region: number, address: number) : number;\n\taccessPage(region: number, pageId: number) : ARMMemoryPage;\n}\n\nexport interface ARMCoreState {\n\tPC: number,\n\tSP: number,\n\tgprs: number[],\n\tmode: number,\n\tcpsrI: boolean,\n\tcpsrF: boolean,\n\tcpsrV: boolean,\n\tcpsrC: boolean,\n\tcpsrZ: boolean,\n\tcpsrN: boolean,\n\tbankedRegisters: number[][],\n\tspsr: number,\n\tbankedSPSRs: number[],\n\tsfprs: number[],\n\tdfprs: number[],\n\tifprs: number[],\n\tcycles: number,\n\tinstructionWidth: 2 | 4\n}\n\ninterface ARMCoreType {\n\tgprs: Int32Array;\n\tsfprs: Float32Array;\n\tdfprs: Float64Array;\n\tifprs: Int32Array;\n\tPC: number;\n\tSP: number;\n\tLR: number;\n\tcycles: number;\n\tmode: number;\n\tshifterOperand: number;\n\tshifterCarryOut: number|boolean;\n\tcpsrN: number|boolean;\n\tcpsrC: number|boolean;\n\tcpsrZ: number|boolean;\n\tcpsrV: number|boolean;\n\tcpsrI: number|boolean;\n\tcpsrF: number|boolean;\n\tspsr: number;\n\tmmu: ARMMMUInterface;\n\tirq : ARMIRQInterface;\n\tinstructionWidth: 2 | 4;\n\n\thasSPSR() : boolean;\n\tunpackCPSR(v : number) : void;\n\tswitchMode(mode : number) : void;\n\tswitchExecMode(mode : number) : void;\n\tpackCPSR() : number;\n\n\tstep() : void;\n\tresetCPU(startOffset : number) : void;\n\tfreeze() : ARMCoreState;\n\tdefrost(state: ARMCoreState) : void;\n\n\traiseIRQ() : void;\n\traiseTrap(irqType? : number) : void;\n}\n\nexport enum ARMMode {\n\tMODE_ARM = 0,\n\tMODE_THUMB = 1,\n\t\n\tMODE_USER = 0x10,\n\tMODE_FIQ = 0x11,\n\tMODE_IRQ = 0x12,\n\tMODE_SUPERVISOR = 0x13,\n\tMODE_ABORT = 0x17,\n\tMODE_UNDEFINED = 0x1B,\n\tMODE_SYSTEM = 0x1F\n}\n\nexport enum ARMRegs {\n\tSP = 13,\n\tLR = 14,\n\tPC = 15,\n}\n\nexport enum ARMConstants {\n\n\tBANK_NONE = 0,\n\tBANK_FIQ = 1,\n\tBANK_IRQ = 2,\n\tBANK_SUPERVISOR = 3,\n\tBANK_ABORT = 4,\n\tBANK_UNDEFINED = 5,\n\n\tWORD_SIZE_ARM = 4,\n\tWORD_SIZE_THUMB = 2,\n\n\tBASE_RESET = 0x00000000,\n\tBASE_UNDEF = 0x00000004,\n\tBASE_SWI = 0x00000008,\n\tBASE_PABT = 0x0000000C,\n\tBASE_DABT = 0x00000010,\n\tBASE_IRQ = 0x00000018,\n\tBASE_FIQ = 0x0000001C,\n}\n\nconst UNALLOC_MASK = 0x0FFFFF00;\nconst USER_MASK = 0xF0000000;\nconst PRIV_MASK = 0x000000DF; // This is out of spec? (SEH)\nconst STATE_MASK = 0x00000020;\n\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction ARMCoreArm(cpu: ARMCoreType) {\n\tthis.cpu = cpu;\n\n\tthis.addressingMode23Immediate = [\n\t\t// 000x0\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] -= offset;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\t// 000xW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// 00Ux0\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] += offset;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\t// 00UxW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// 0P0x0\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\treturn /* addr = */ gprs[rn] - offset;\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// 0P0xW\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn] - offset;\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull,\n\n\t\t// 0PUx0\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\treturn /* addr = */ gprs[rn] + offset;\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// 0PUxW\n\t\tfunction(rn, offset, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn] + offset;\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull,\n\t];\n\n\tthis.addressingMode23Register = [\n\t\t// I00x0\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] -= gprs[rm];\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\t// I00xW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// I0Ux0\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] += gprs[rm];\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\t// I0UxW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// IP0x0\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\treturn gprs[rn] - gprs[rm];\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// IP0xW\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn] - gprs[rm];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull,\n\n\t\t// IPUx0\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn] + gprs[rm];\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// IPUxW\n\t\tfunction(rn, rm, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn] + gprs[rm];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull\n\t];\n\n\tthis.addressingMode2RegisterShifted = [\n\t\t// I00x0\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tshiftOp();\n\t\t\t\t\tgprs[rn] -= cpu.shifterOperand;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\t// I00xW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// I0Ux0\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tvar addr = gprs[rn];\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tshiftOp();\n\t\t\t\t\tgprs[rn] += cpu.shifterOperand;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\t\t// I0UxW\n\t\tnull,\n\n\t\tnull,\n\t\tnull,\n\n\t\t// IP0x0\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tshiftOp();\n\t\t\t\treturn gprs[rn] - cpu.shifterOperand;\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// IP0xW\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tshiftOp();\n\t\t\t\tvar addr = gprs[rn] - cpu.shifterOperand;\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull,\n\n\t\t// IPUx0\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tshiftOp();\n\t\t\t\treturn gprs[rn] + cpu.shifterOperand;\n\t\t\t};\n\t\t\taddress.writesPC = false;\n\t\t\treturn address;\n\t\t},\n\n\t\t// IPUxW\n\t\tfunction(rn, shiftOp, condOp) {\n\t\t\tvar gprs = cpu.gprs;\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tshiftOp();\n\t\t\t\tvar addr = gprs[rn] + cpu.shifterOperand;\n\t\t\t\tif (!condOp || condOp()) {\n\t\t\t\t\tgprs[rn] = addr;\n\t\t\t\t}\n\t\t\t\treturn addr;\n\t\t\t};\n\t\t\taddress.writesPC = rn == ARMRegs.PC;\n\t\t\treturn address;\n\t\t},\n\n\t\tnull,\n\t\tnull,\n\t];\n}\n\nARMCoreArm.prototype.constructAddressingMode1ASR = function(rs, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\t++cpu.cycles;\n\t\tvar shift = gprs[rs];\n\t\tif (rs == ARMRegs.PC) {\n\t\t\tshift += 4;\n\t\t}\n\t\tshift &= 0xFF;\n\t\tvar shiftVal =  gprs[rm];\n\t\tif (rm == ARMRegs.PC) {\n\t\t\tshiftVal += 4;\n\t\t}\n\t\tif (shift == 0) {\n\t\t\tcpu.shifterOperand = shiftVal;\n\t\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t\t} else if (shift < 32) {\n\t\t\tcpu.shifterOperand = shiftVal >> shift;\n\t\t\tcpu.shifterCarryOut = shiftVal & (1 << (shift - 1));\n\t\t} else if (gprs[rm] >> 31) {\n\t\t\tcpu.shifterOperand = 0xFFFFFFFF;\n\t\t\tcpu.shifterCarryOut = 0x80000000;\n\t\t} else {\n\t\t\tcpu.shifterOperand = 0;\n\t\t\tcpu.shifterCarryOut = 0;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructAddressingMode1Immediate = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\treturn function() {\n\t\tcpu.shifterOperand = immediate;\n\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t};\n};\n\nARMCoreArm.prototype.constructAddressingMode1ImmediateRotate = function(immediate, rotate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\treturn function() {\n\t\tcpu.shifterOperand = (immediate >>> rotate) | (immediate << (32 - rotate));\n\t\tcpu.shifterCarryOut = cpu.shifterOperand >> 31;\n\t}\n};\n\nARMCoreArm.prototype.constructAddressingMode1LSL = function(rs, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\t++cpu.cycles;\n\t\tvar shift = gprs[rs];\n\t\tif (rs == ARMRegs.PC) {\n\t\t\tshift += 4;\n\t\t}\n\t\tshift &= 0xFF;\n\t\tvar shiftVal =  gprs[rm];\n\t\tif (rm == ARMRegs.PC) {\n\t\t\tshiftVal += 4;\n\t\t}\n\t\tif (shift == 0) {\n\t\t\tcpu.shifterOperand = shiftVal;\n\t\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t\t} else if (shift < 32) {\n\t\t\tcpu.shifterOperand = shiftVal << shift;\n\t\t\tcpu.shifterCarryOut = shiftVal & (1 << (32 - shift));\n\t\t} else if (shift == 32) {\n\t\t\tcpu.shifterOperand = 0;\n\t\t\tcpu.shifterCarryOut = shiftVal & 1;\n\t\t} else {\n\t\t\tcpu.shifterOperand = 0;\n\t\t\tcpu.shifterCarryOut = 0;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructAddressingMode1LSR = function(rs, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\t++cpu.cycles;\n\t\tvar shift = gprs[rs];\n\t\tif (rs == ARMRegs.PC) {\n\t\t\tshift += 4;\n\t\t}\n\t\tshift &= 0xFF;\n\t\tvar shiftVal =  gprs[rm];\n\t\tif (rm == ARMRegs.PC) {\n\t\t\tshiftVal += 4;\n\t\t}\n\t\tif (shift == 0) {\n\t\t\tcpu.shifterOperand = shiftVal;\n\t\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t\t} else if (shift < 32) {\n\t\t\tcpu.shifterOperand = shiftVal >>> shift;\n\t\t\tcpu.shifterCarryOut = shiftVal & (1 << (shift - 1));\n\t\t} else if (shift == 32) {\n\t\t\tcpu.shifterOperand = 0;\n\t\t\tcpu.shifterCarryOut = shiftVal >> 31;\n\t\t} else {\n\t\t\tcpu.shifterOperand = 0;\n\t\t\tcpu.shifterCarryOut = 0;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructAddressingMode1ROR = function(rs, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\t++cpu.cycles;\n\t\tvar shift = gprs[rs];\n\t\tif (rs == ARMRegs.PC) {\n\t\t\tshift += 4;\n\t\t}\n\t\tshift &= 0xFF;\n\t\tvar shiftVal =  gprs[rm];\n\t\tif (rm == ARMRegs.PC) {\n\t\t\tshiftVal += 4;\n\t\t}\n\t\tvar rotate = shift & 0x1F;\n\t\tif (shift == 0) {\n\t\t\tcpu.shifterOperand = shiftVal;\n\t\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t\t} else if (rotate) {\n\t\t\tcpu.shifterOperand = (gprs[rm] >>> rotate) | (gprs[rm] << (32 - rotate));\n\t\t\tcpu.shifterCarryOut = shiftVal & (1 << (rotate - 1));\n\t\t} else {\n\t\t\tcpu.shifterOperand = shiftVal;\n\t\t\tcpu.shifterCarryOut = shiftVal >> 31;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructAddressingMode23Immediate = function(instruction, immediate, condOp) {\n\tvar rn = (instruction & 0x000F0000) >> 16;\n\treturn this.addressingMode23Immediate[(instruction & 0x01A00000) >> 21](rn, immediate, condOp);\n};\n\nARMCoreArm.prototype.constructAddressingMode23Register = function(instruction, rm, condOp) {\n\tvar rn = (instruction & 0x000F0000) >> 16;\n\treturn this.addressingMode23Register[(instruction & 0x01A00000) >> 21](rn, rm, condOp);\n};\n\nARMCoreArm.prototype.constructAddressingMode2RegisterShifted = function(instruction, shiftOp, condOp) {\n\tvar rn = (instruction & 0x000F0000) >> 16;\n\treturn this.addressingMode2RegisterShifted[(instruction & 0x01A00000) >> 21](rn, shiftOp, condOp);\n};\n\nARMCoreArm.prototype.constructAddressingMode4 = function(immediate, rn) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar addr = gprs[rn] + immediate;\n\t\treturn addr;\n\t}\n};\n\nARMCoreArm.prototype.constructAddressingMode4Writeback = function(immediate, offset, rn, overlap) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function(writeInitial) {\n\t\tvar addr = gprs[rn] + immediate;\n\t\tif (writeInitial && overlap) {\n\t\t\tcpu.mmu.store32(gprs[rn] + immediate - 4, gprs[rn]);\n\t\t}\n\t\tgprs[rn] += offset;\n\t\treturn addr;\n\t}\n};\n\nARMCoreArm.prototype.constructNOP = function() {\n\tthis.writesPC = false;\n\treturn function() { };\n}\n\nARMCoreArm.prototype.constructADC = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar shifterOperand = (cpu.shifterOperand >>> 0) + (cpu.cpsrC ? 1 : 0);\n\t\tgprs[rd] = (gprs[rn] >>> 0) + shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructADCS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar shifterOperand = (cpu.shifterOperand >>> 0) + (cpu.cpsrC ? 1 : 0);\n\t\tvar d = (gprs[rn] >>> 0) + shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\t\tcpu.cpsrV = (gprs[rn] >> 31) == (shifterOperand >> 31) &&\n\t\t\t\t\t\t(gprs[rn] >> 31) != (d >> 31) &&\n\t\t\t\t\t\t(shifterOperand >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructADD = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = (gprs[rn] >>> 0) + (cpu.shifterOperand >>> 0);\n\t};\n};\n\nARMCoreArm.prototype.constructADDS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar d = (gprs[rn] >>> 0) + (cpu.shifterOperand >>> 0);\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\t\tcpu.cpsrV = (gprs[rn] >> 31) == (cpu.shifterOperand >> 31) &&\n\t\t\t\t\t\t(gprs[rn] >> 31) != (d >> 31) &&\n\t\t\t\t\t\t(cpu.shifterOperand >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructAND = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] & cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructANDS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] & cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructB = function(immediate, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tgprs[ARMRegs.PC] += immediate;\n\t};\n};\n\nARMCoreArm.prototype.constructBIC = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] & ~cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructBICS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] & ~cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructBL = function(immediate, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tgprs[ARMRegs.LR] = gprs[ARMRegs.PC] - 4;\n\t\tgprs[ARMRegs.PC] += immediate;\n\t};\n};\n\nARMCoreArm.prototype.constructBX = function(rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tcpu.switchExecMode(gprs[rm] & 0x00000001);\n\t\tgprs[ARMRegs.PC] = gprs[rm] & 0xFFFFFFFE;\n\t};\n};\n\nARMCoreArm.prototype.constructCMN = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar aluOut = (gprs[rn] >>> 0) + (cpu.shifterOperand >>> 0);\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = aluOut > 0xFFFFFFFF;\n\t\tcpu.cpsrV = (gprs[rn] >> 31) == (cpu.shifterOperand >> 31) &&\n\t\t\t\t\t(gprs[rn] >> 31) != (aluOut >> 31) &&\n\t\t\t\t\t(cpu.shifterOperand >> 31) != (aluOut >> 31);\n\t};\n};\n\nARMCoreArm.prototype.constructCMP = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar aluOut = gprs[rn] - cpu.shifterOperand;\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= (cpu.shifterOperand >>> 0);\n\t\tcpu.cpsrV = (gprs[rn] >> 31) != (cpu.shifterOperand >> 31) &&\n\t\t\t\t\t(gprs[rn] >> 31) != (aluOut >> 31);\n\t};\n};\n\nARMCoreArm.prototype.constructEOR = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] ^ cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructEORS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] ^ cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructLDM = function(rs, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\tvar mmu = cpu.mmu;\n\treturn function() {\n\t\tmmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address(false);\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tfor (m = rs, i = 0; m; m >>= 1, ++i) {\n\t\t\tif (m & 1) {\n\t\t\t\tgprs[i] = mmu.load32(addr & 0xFFFFFFFC);\n\t\t\t\taddr += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tmmu.waitMulti32(addr, total);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDMS = function(rs, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\tvar mmu = cpu.mmu;\n\treturn function() {\n\t\tmmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address(false);\n\t\tvar total = 0;\n\t\tvar mode = cpu.mode;\n\t\tcpu.switchMode(ARMMode.MODE_SYSTEM);\n\t\tvar m, i;\n\t\tfor (m = rs, i = 0; m; m >>= 1, ++i) {\n\t\t\tif (m & 1) {\n\t\t\t\tgprs[i] = mmu.load32(addr & 0xFFFFFFFC);\n\t\t\t\taddr += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tcpu.switchMode(mode);\n\t\tmmu.waitMulti32(addr, total);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDR = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tgprs[rd] = cpu.mmu.load32(addr);\n\t\tcpu.mmu.wait32(addr);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDRB = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tgprs[rd] = cpu.mmu.loadU8(addr);\n\t\tcpu.mmu.wait(addr);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDRH = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tgprs[rd] = cpu.mmu.loadU16(addr);\n\t\tcpu.mmu.wait(addr);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDRSB = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tgprs[rd] = cpu.mmu.load8(addr);\n\t\tcpu.mmu.wait(addr);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructLDRSH = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tgprs[rd] = cpu.mmu.load16(addr);\n\t\tcpu.mmu.wait(addr);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreArm.prototype.constructMLA = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(rs);\n\t\tif ((gprs[rm] & 0xFFFF0000) && (gprs[rs] & 0xFFFF0000)) {\n\t\t\t// Our data type is a double--we'll lose bits if we do it all at once!\n\t\t\tvar hi = ((gprs[rm] & 0xFFFF0000) * gprs[rs]) & 0xFFFFFFFF;\n\t\t\tvar lo = ((gprs[rm] & 0x0000FFFF) * gprs[rs]) & 0xFFFFFFFF;\n\t\t\tgprs[rd] = (hi + lo + gprs[rn]) & 0xFFFFFFFF;\n\t\t} else {\n\t\t\tgprs[rd] = gprs[rm] * gprs[rs] + gprs[rn];\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructMLAS = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(rs);\n\t\tif ((gprs[rm] & 0xFFFF0000) && (gprs[rs] & 0xFFFF0000)) {\n\t\t\t// Our data type is a double--we'll lose bits if we do it all at once!\n\t\t\tvar hi = ((gprs[rm] & 0xFFFF0000) * gprs[rs]) & 0xFFFFFFFF;\n\t\t\tvar lo = ((gprs[rm] & 0x0000FFFF) * gprs[rs]) & 0xFFFFFFFF;\n\t\t\tgprs[rd] = (hi + lo + gprs[rn]) & 0xFFFFFFFF;\n\t\t} else {\n\t\t\tgprs[rd] = gprs[rm] * gprs[rs] + gprs[rn];\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreArm.prototype.constructMOV = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructMOVS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructMRS = function(rd, r, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tif (r) {\n\t\t\tgprs[rd] = cpu.spsr;\n\t\t} else {\n\t\t\tgprs[rd] = cpu.packCPSR();\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructMSR = function(rm, r, instruction, immediate, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\tvar c = instruction & 0x00010000;\n\t//var x = instruction & 0x00020000;\n\t//var s = instruction & 0x00040000;\n\tvar f = instruction & 0x00080000;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar operand;\n\t\tif (instruction & 0x02000000) {\n\t\t\toperand = immediate;\n\t\t} else {\n\t\t\toperand = gprs[rm];\n\t\t}\n\t\tvar mask = (c ? 0x000000FF : 0x00000000) |\n\t\t\t\t   //(x ? 0x0000FF00 : 0x00000000) | // Irrelevant on ARMv4T\n\t\t\t\t   //(s ? 0x00FF0000 : 0x00000000) | // Irrelevant on ARMv4T\n\t\t\t\t   (f ? 0xFF000000 : 0x00000000);\n\t\tif (r) {\n\t\t\tmask &= USER_MASK | PRIV_MASK | STATE_MASK;\n\t\t\t//console.log(hex(r), hex(mask & 0x7fffffff), hex(cpu.spsr), hex(operand));\n\t\t\tcpu.spsr = (cpu.spsr & ~mask) | (operand & mask);\n\t\t} else {\n\t\t\tif (mask & USER_MASK) {\n\t\t\t\tcpu.cpsrN = operand >> 31;\n\t\t\t\tcpu.cpsrZ = operand & 0x40000000;\n\t\t\t\tcpu.cpsrC = operand & 0x20000000;\n\t\t\t\tcpu.cpsrV = operand & 0x10000000;\n\t\t\t}\n\t\t\tif (cpu.mode != ARMMode.MODE_USER && (mask & PRIV_MASK)) {\n\t\t\t\tcpu.switchMode((operand & 0x0000000F) | 0x00000010);\n\t\t\t\tcpu.cpsrI = operand & 0x00000080;\n\t\t\t\tcpu.cpsrF = operand & 0x00000040;\n\t\t\t}\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructMUL = function(rd, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tif ((gprs[rm] & 0xFFFF0000) && (gprs[rs] & 0xFFFF0000)) {\n\t\t\t// Our data type is a double--we'll lose bits if we do it all at once!\n\t\t\tvar hi = ((gprs[rm] & 0xFFFF0000) * gprs[rs]) | 0;\n\t\t\tvar lo = ((gprs[rm] & 0x0000FFFF) * gprs[rs]) | 0;\n\t\t\tgprs[rd] = hi + lo;\n\t\t} else {\n\t\t\tgprs[rd] = gprs[rm] * gprs[rs];\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructMULS = function(rd, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tif ((gprs[rm] & 0xFFFF0000) && (gprs[rs] & 0xFFFF0000)) {\n\t\t\t// Our data type is a double--we'll lose bits if we do it all at once!\n\t\t\tvar hi = ((gprs[rm] & 0xFFFF0000) * gprs[rs]) | 0;\n\t\t\tvar lo = ((gprs[rm] & 0x0000FFFF) * gprs[rs]) | 0;\n\t\t\tgprs[rd] = hi + lo;\n\t\t} else {\n\t\t\tgprs[rd] = gprs[rm] * gprs[rs];\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreArm.prototype.constructMVN = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = ~cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructMVNS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = ~cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructORR = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] | cpu.shifterOperand;\n\t}\n};\n\nARMCoreArm.prototype.constructORRS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] | cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t\t}\n\t};\n};\n\nARMCoreArm.prototype.constructRSB = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = cpu.shifterOperand - gprs[rn];\n\t};\n};\n\nARMCoreArm.prototype.constructRSBS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar d = cpu.shifterOperand - gprs[rn];\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = (cpu.shifterOperand >>> 0) >= (gprs[rn] >>> 0);\n\t\t\tcpu.cpsrV = (cpu.shifterOperand >> 31) != (gprs[rn] >> 31) &&\n\t\t\t\t\t\t(cpu.shifterOperand >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructRSC = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar n = (gprs[rn] >>> 0) + (cpu.cpsrC ? 0 : 1);\n\t\tgprs[rd] = (cpu.shifterOperand >>> 0) - n;\n\t};\n};\n\nARMCoreArm.prototype.constructRSCS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar n = (gprs[rn] >>> 0) + (cpu.cpsrC ? 0 : 1);\n\t\tvar d = (cpu.shifterOperand >>> 0) - n;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = (cpu.shifterOperand >>> 0) >= (d >>> 0);\n\t\t\tcpu.cpsrV = (cpu.shifterOperand >> 31) != (n >> 31) &&\n\t\t\t\t\t\t(cpu.shifterOperand >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructSBC = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar shifterOperand = (cpu.shifterOperand >>> 0) + (cpu.cpsrC ? 0 : 1);\n\t\tgprs[rd] = (gprs[rn] >>> 0) - shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructSBCS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar shifterOperand = (cpu.shifterOperand >>> 0) + (cpu.cpsrC ? 0 : 1);\n\t\tvar d = (gprs[rn] >>> 0) - shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= (d >>> 0);\n\t\t\tcpu.cpsrV = (gprs[rn] >> 31) != (shifterOperand >> 31) &&\n\t\t\t\t\t\t(gprs[rn] >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructSMLAL = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.cycles += 2;\n\t\tcpu.mmu.waitMul(rs);\n\t\tvar hi = (gprs[rm] & 0xFFFF0000) * gprs[rs];\n\t\tvar lo = (gprs[rm] & 0x0000FFFF) * gprs[rs];\n\t\tvar carry = (gprs[rn] >>> 0) + hi + lo;\n\t\tgprs[rn] = carry;\n\t\tgprs[rd] += Math.floor(carry * SHIFT_32);\n\t};\n};\n\nARMCoreArm.prototype.constructSMLALS = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.cycles += 2;\n\t\tcpu.mmu.waitMul(rs);\n\t\tvar hi = (gprs[rm] & 0xFFFF0000) * gprs[rs];\n\t\tvar lo = (gprs[rm] & 0x0000FFFF) * gprs[rs];\n\t\tvar carry = (gprs[rn] >>> 0) + hi + lo;\n\t\tgprs[rn] = carry;\n\t\tgprs[rd] += Math.floor(carry * SHIFT_32);\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !((gprs[rd] & 0xFFFFFFFF) || (gprs[rn] & 0xFFFFFFFF));\n\t};\n};\n\nARMCoreArm.prototype.constructSMULL = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >> 0) * (gprs[rs] >> 0);\n\t\tvar lo = ((gprs[rm] & 0x0000FFFF) >> 0) * (gprs[rs] >> 0);\n\t\tgprs[rn] = ((hi & 0xFFFFFFFF) + (lo & 0xFFFFFFFF)) & 0xFFFFFFFF;\n\t\tgprs[rd] = Math.floor(hi * SHIFT_32 + lo * SHIFT_32);\n\t};\n};\n\nARMCoreArm.prototype.constructSMULLS = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >> 0) * (gprs[rs] >> 0);\n\t\tvar lo = ((gprs[rm] & 0x0000FFFF) >> 0) * (gprs[rs] >> 0);\n\t\tgprs[rn] = ((hi & 0xFFFFFFFF) + (lo & 0xFFFFFFFF)) & 0xFFFFFFFF;\n\t\tgprs[rd] = Math.floor(hi * SHIFT_32 + lo * SHIFT_32);\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !((gprs[rd] & 0xFFFFFFFF) || (gprs[rn] & 0xFFFFFFFF));\n\t};\n};\n\nARMCoreArm.prototype.constructSTM = function(rs, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\tvar mmu = cpu.mmu;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tmmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tmmu.wait32(gprs[ARMRegs.PC]);\n\t\tvar addr = address(true);\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tfor (m = rs, i = 0; m; m >>= 1, ++i) {\n\t\t\tif (m & 1) {\n\t\t\t\tmmu.store32(addr, gprs[i]);\n\t\t\t\taddr += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tmmu.waitMulti32(addr, total);\n\t};\n};\n\nARMCoreArm.prototype.constructSTMS = function(rs, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\tvar mmu = cpu.mmu;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tmmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tmmu.wait32(gprs[ARMRegs.PC]);\n\t\tvar mode = cpu.mode;\n\t\tvar addr = address(true);\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tcpu.switchMode(ARMMode.MODE_SYSTEM);\n\t\tfor (m = rs, i = 0; m; m >>= 1, ++i) {\n\t\t\tif (m & 1) {\n\t\t\t\tmmu.store32(addr, gprs[i]);\n\t\t\t\taddr += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tcpu.switchMode(mode);\n\t\tmmu.waitMulti32(addr, total);\n\t};\n};\n\nARMCoreArm.prototype.constructSTR = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tcpu.mmu.store32(addr, gprs[rd]);\n\t\tcpu.mmu.wait32(addr);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.PC]);\n\t};\n};\n\nARMCoreArm.prototype.constructSTRB = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tcpu.mmu.store8(addr, gprs[rd]);\n\t\tcpu.mmu.wait(addr);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.PC]);\n\t};\n};\n\nARMCoreArm.prototype.constructSTRH = function(rd, address, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tvar addr = address();\n\t\tcpu.mmu.store16(addr, gprs[rd]);\n\t\tcpu.mmu.wait(addr);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.PC]);\n\t};\n};\n\nARMCoreArm.prototype.constructSUB = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tgprs[rd] = gprs[rn] - cpu.shifterOperand;\n\t};\n};\n\nARMCoreArm.prototype.constructSUBS = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar d = gprs[rn] - cpu.shifterOperand;\n\t\tif (rd == ARMRegs.PC && cpu.hasSPSR()) {\n\t\t\tcpu.unpackCPSR(cpu.spsr);\n\t\t} else {\n\t\t\tcpu.cpsrN = d >> 31;\n\t\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= (cpu.shifterOperand >>> 0);\n\t\t\tcpu.cpsrV = (gprs[rn] >> 31) != (cpu.shifterOperand >> 31) &&\n\t\t\t\t\t\t(gprs[rn] >> 31) != (d >> 31);\n\t\t}\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreArm.prototype.constructSWI = function(immediate, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tif (condOp && !condOp()) {\n\t\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\t\treturn;\n\t\t}\n\t\tcpu.irq.swi32(immediate);\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t};\n};\n\nARMCoreArm.prototype.constructSWP = function(rd, rn, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.wait32(gprs[rn]);\n\t\tcpu.mmu.wait32(gprs[rn]);\n\t\tvar d = cpu.mmu.load32(gprs[rn]);\n\t\tcpu.mmu.store32(gprs[rn], gprs[rm]);\n\t\tgprs[rd] = d;\n\t\t++cpu.cycles;\n\t}\n};\n\nARMCoreArm.prototype.constructSWPB = function(rd, rn, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.mmu.wait(gprs[rn]);\n\t\tcpu.mmu.wait(gprs[rn]);\n\t\tvar d = cpu.mmu.loadU8(gprs[rn]);\n\t\tcpu.mmu.store8(gprs[rn], gprs[rm]);\n\t\tgprs[rd] = d;\n\t\t++cpu.cycles;\n\t}\n};\n\nARMCoreArm.prototype.constructTEQ = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar aluOut = gprs[rn] ^ cpu.shifterOperand;\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t};\n};\n\nARMCoreArm.prototype.constructTST = function(rd, rn, shiftOp, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tshiftOp();\n\t\tvar aluOut = gprs[rn] & cpu.shifterOperand;\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = cpu.shifterCarryOut;\n\t};\n};\n\nARMCoreArm.prototype.constructUMLAL = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.cycles += 2;\n\t\tcpu.mmu.waitMul(rs);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >>> 0) * (gprs[rs] >>> 0);\n\t\tvar lo = (gprs[rm] & 0x0000FFFF) * (gprs[rs] >>> 0);\n\t\tvar carry = (gprs[rn] >>> 0) + hi + lo;\n\t\tgprs[rn] = carry;\n\t\tgprs[rd] += carry * SHIFT_32;\n\t};\n};\n\nARMCoreArm.prototype.constructUMLALS = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tcpu.cycles += 2;\n\t\tcpu.mmu.waitMul(rs);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >>> 0) * (gprs[rs] >>> 0);\n\t\tvar lo = (gprs[rm] & 0x0000FFFF) * (gprs[rs] >>> 0);\n\t\tvar carry = (gprs[rn] >>> 0) + hi + lo;\n\t\tgprs[rn] = carry;\n\t\tgprs[rd] += carry * SHIFT_32;\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !((gprs[rd] & 0xFFFFFFFF) || (gprs[rn] & 0xFFFFFFFF));\n\t};\n};\n\nARMCoreArm.prototype.constructUMULL = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >>> 0) * (gprs[rs] >>> 0);\n\t\tvar lo = ((gprs[rm] & 0x0000FFFF) >>> 0) * (gprs[rs] >>> 0);\n\t\tgprs[rn] = ((hi & 0xFFFFFFFF) + (lo & 0xFFFFFFFF)) & 0xFFFFFFFF;\n\t\tgprs[rd] = (hi * SHIFT_32 + lo * SHIFT_32) >>> 0;\n\t};\n};\n\nARMCoreArm.prototype.constructUMULLS = function(rd, rn, rs, rm, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar SHIFT_32 = 1/0x100000000;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\t++cpu.cycles;\n\t\tcpu.mmu.waitMul(gprs[rs]);\n\t\tvar hi = ((gprs[rm] & 0xFFFF0000) >>> 0) * (gprs[rs] >>> 0);\n\t\tvar lo = ((gprs[rm] & 0x0000FFFF) >>> 0) * (gprs[rs] >>> 0);\n\t\tgprs[rn] = ((hi & 0xFFFFFFFF) + (lo & 0xFFFFFFFF)) & 0xFFFFFFFF;\n\t\tgprs[rd] = (hi * SHIFT_32 + lo * SHIFT_32) >>> 0;\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !((gprs[rd] & 0xFFFFFFFF) || (gprs[rn] & 0xFFFFFFFF));\n\t};\n};\n\nARMCoreArm.prototype.constructVFP3Register = function(condOp, opcode, nOperandReg, destReg, sz, opcode2, mOperandReg) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar fpregs = sz ? cpu.dfprs : cpu.sfprs;\n\t//console.log(\"VFP3Register: \" + hex(opcode) + \" \" + hex(nOperandReg) + \" \" + hex(destReg) + \" \" + hex(number) + \" \" + hex(opcode2) + \" \" + hex(mOperandReg));\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tswitch (opcode) {\n\t\tcase 2: // VMUL\n\t\t\tswitch (opcode2) {\n\t\t\t\tcase 0:\n\t\t\t\t\tfpregs[destReg] = fpregs[nOperandReg] * fpregs[mOperandReg];\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 3: // VADD/VSUB\n\t\t\tswitch (opcode2) {\n\t\t\t\tcase 0:\n\t\t\t\t\tfpregs[destReg] = fpregs[nOperandReg] + fpregs[mOperandReg];\n\t\t\t\t\treturn;\n\t\t\t\tcase 2:\n\t\t\t\t\tfpregs[destReg] = fpregs[nOperandReg] - fpregs[mOperandReg];\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 8: // VDIV\n\t\t\tswitch (opcode2) {\n\t\t\t\tcase 0:\n\t\t\t\t\tfpregs[destReg] = fpregs[nOperandReg] / fpregs[mOperandReg];\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tconsole.log(\"Unsupported instruction: \" + hex(opcode) + \" \" + hex(opcode2));\n\t};\n};\n\n/*\nif ConditionPassed() then\n    EncodingSpecificOperations();  CheckVFPEnabled(TRUE);\n    if to_integer then\n        if dp_operation then\n            S[d] = FPToFixed(D[m], 32, 0, unsigned, round_zero, TRUE);\n        else\n            S[d] = FPToFixed(S[m], 32, 0, unsigned, round_zero, TRUE);\n    else\n        if dp_operation then\n            D[d] = FixedToFP(S[m], 64, 0, unsigned, round_nearest, TRUE);\n        else\n            S[d] = FixedToFP(S[m], 32, 0, unsigned, round_nearest, TRUE);\n*/\nARMCoreArm.prototype.constructVCVT = function(condOp, d, m, to_integer, dp_operation, unsigned, round_zero, round_nearest) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar sregs = cpu.sfprs;\n\tvar dregs = cpu.dfprs;\n\tvar iregs = cpu.ifprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar src : number;\n\t\tvar dest : number;\n\t\t// get source\n\t\tif (to_integer && dp_operation) {\n\t\t\tsrc = dregs[m];\n\t\t} else if (to_integer) {\n\t\t\tsrc = sregs[m];\n\t\t} else {\n\t\t\tsrc = iregs[m];\n\t\t}\n\t\t// convert\n\t\tif (to_integer) {\n\t\t\tdest = round_zero ? Math.floor(src) : Math.round(src);\n\t\t} else {\n\t\t\tdest = src;\n\t\t}\n\t\t// store result\n\t\tif (to_integer) {\n\t\t\tiregs[d] = dest;\n\t\t} else if (dp_operation) {\n\t\t\tdregs[d] = dest;\n\t\t} else {\n\t\t\tsregs[d] = dest;\n\t\t}\n\t};\n}\n\nARMCoreArm.prototype.constructVCVTF = function(condOp, d, m, double_to_single) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar sregs = cpu.sfprs;\n\tvar dregs = cpu.dfprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tvar n = double_to_single ? dregs[m] : sregs[m];\n\t\t// store result\n\t\tif (double_to_single) {\n\t\t\tsregs[d] = n;\n\t\t} else {\n\t\t\tdregs[d] = n;\n\t\t}\n\t};\n\n}\n\nARMCoreArm.prototype.constructVLDR = function(condOp, destReg, address, single_reg) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar iregs = cpu.ifprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet addr = address();\n\t\tif (single_reg) {\n\t\t\tiregs[destReg] = cpu.mmu.load32(addr);\n\t\t} else {\n\t\t\tiregs[destReg] = cpu.mmu.load32(addr);\n\t\t\tiregs[destReg+1] = cpu.mmu.load32(addr+4);\n\t\t}\n\t\tcpu.mmu.wait32(addr);\n\t\tcpu.mmu.wait32(cpu.gprs[ARMRegs.PC]);\n\t};\n};\n\nARMCoreArm.prototype.constructVSTR = function(condOp, srcReg, address, single_reg) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar iregs = cpu.ifprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet addr = address();\n\t\tif (single_reg) {\n\t\t\tcpu.mmu.store32(addr, iregs[srcReg]);\n\t\t} else {\n\t\t\tcpu.mmu.store32(addr, iregs[srcReg]);\n\t\t\tcpu.mmu.store32(addr+4, iregs[srcReg+1]);\n\t\t}\n\t\tcpu.mmu.wait32(addr);\n\t\tcpu.mmu.wait32(cpu.gprs[ARMRegs.PC]);\n\t};\n}\n\nARMCoreArm.prototype.constructVPUSH = function(condOp, d, regs, single_regs) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar iregs = cpu.ifprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet addr = cpu.gprs[ARMRegs.SP] - regs * 4;\n\t\tcpu.gprs[ARMRegs.SP] = addr;\n\t\tfor (let i = 0; i < regs; ++i) {\n\t\t\tcpu.mmu.store32(addr, iregs[d+i]);\n\t\t\taddr += 4;\n\t\t}\n\t};\n}\n\nARMCoreArm.prototype.constructVPOP = function(condOp, d, regs, single_regs) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar iregs = cpu.ifprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet addr = cpu.gprs[ARMRegs.SP];\n\t\tcpu.gprs[ARMRegs.SP] += regs * 4;\n\t\tfor (let i = 0; i < regs; ++i) {\n\t\t\tiregs[d+i] = cpu.mmu.load32(addr);\n\t\t\taddr += 4;\n\t\t}\n\t};\n}\n\nfunction FPCompare(op1: number, op2: number) {\n\t/* assert N IN {32,64};\n    fpscr_val = if fpscr_controlled then FPSCR else StandardFPSCRValue();\n    (type1,sign1,value1) = FPUnpack(op1, fpscr_val);\n    (type2,sign2,value2) = FPUnpack(op2, fpscr_val); */\n\tif (isNaN(op1) || isNaN(op2)) {\n\t\treturn 0b0011;\n\t}\n\tif (op1 == op2) return 0b0110;\n\tif (op1 < op2) return 0b1000;\n\telse return 0b0010;\n}\n\nARMCoreArm.prototype.constructVCMP = function(condOp, d, Vd, sz, E, m, Vm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar sregs = cpu.sfprs;\n\tvar dregs = cpu.dfprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet op1, op2;\n\t\tif (sz) {\n\t\t\top1 = dregs[d];\n\t\t\top2 = dregs[m];\n\t\t} else {\n\t\t\top1 = sregs[d];\n\t\t\top2 = sregs[m];\n\t\t}\n\t\tlet result = FPCompare(op1, op2);\n\t\tcpu.cpsrN = (result & 8) != 0;\n\t\tcpu.cpsrZ = (result & 4) != 0;\n\t\tcpu.cpsrC = (result & 2) != 0;\n\t\tcpu.cpsrV = (result & 1) != 0;\n\t}\n}\n\nARMCoreArm.prototype.constructVCMP0 = function(condOp, d, Vd, sz, E) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar sregs = cpu.sfprs;\n\tvar dregs = cpu.dfprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tlet op1, op2=0;\n\t\tif (sz) {\n\t\t\top1 = dregs[d];\n\t\t} else {\n\t\t\top1 = sregs[d];\n\t\t}\n\t\tlet result = FPCompare(op1, op2);\n\t\tcpu.cpsrN = (result & 8) != 0;\n\t\tcpu.cpsrZ = (result & 4) != 0;\n\t\tcpu.cpsrC = (result & 2) != 0;\n\t\tcpu.cpsrV = (result & 1) != 0;\n\t}\n}\nARMCoreArm.prototype.constructVMOV = function(condOp, to_arm_reg, n, t) {\n\tvar cpu : ARMCoreType = this.cpu;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch32(cpu.gprs[ARMRegs.PC]);\n\t\tif (condOp && !condOp()) {\n\t\t\treturn;\n\t\t}\n\t\tif (to_arm_reg) {\n\t\t\tcpu.gprs[t] = cpu.ifprs[n];\n\t\t} else {\n\t\t\tcpu.ifprs[n] = cpu.gprs[t];\n\t\t}\n\t}\n}\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction ARMCoreThumb(cpu) {\n\tthis.cpu = cpu;\n};\n\nARMCoreThumb.prototype.constructADC = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar m = (gprs[rm] >>> 0) + (cpu.cpsrC ? 1 : 0);\n\t\tvar oldD = gprs[rd];\n\t\tvar d = (oldD >>> 0) + m;\n\t\tvar oldDn = oldD >> 31;\n\t\tvar dn = d >> 31;\n\t\tvar mn = m >> 31;\n\t\tcpu.cpsrN = dn;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\tcpu.cpsrV = oldDn == mn && oldDn != dn && mn != dn;\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = (gprs[rn] >>> 0) + immediate;\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\tcpu.cpsrV = !(gprs[rn] >> 31) && ((gprs[rn] >> 31 ^ d) >> 31) && (d >> 31);\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD2 = function(rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = (gprs[rn] >>> 0) + immediate;\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\tcpu.cpsrV = !(gprs[rn] >> 31) && ((gprs[rn] ^ d) >> 31) && ((immediate ^ d) >> 31);\n\t\tgprs[rn] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD3 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = (gprs[rn] >>> 0) + (gprs[rm] >>> 0);\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = d > 0xFFFFFFFF;\n\t\tcpu.cpsrV = !((gprs[rn] ^ gprs[rm]) >> 31) && ((gprs[rn] ^ d) >> 31) && ((gprs[rm] ^ d) >> 31);\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD4 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] += gprs[rm];\n\t};\n};\n\nARMCoreThumb.prototype.constructADD5 = function(rd, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = (gprs[ARMRegs.PC] & 0xFFFFFFFC) + immediate;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD6 = function(rd, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[ARMRegs.SP] + immediate;\n\t};\n};\n\nARMCoreThumb.prototype.constructADD7 = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[ARMRegs.SP] += immediate;\n\t};\n};\n\nARMCoreThumb.prototype.constructAND = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[rd] & gprs[rm];\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructASR1 = function(rd, rm, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tif (immediate == 0) {\n\t\t\tcpu.cpsrC = gprs[rm] >> 31;\n\t\t\tif (cpu.cpsrC) {\n\t\t\t\tgprs[rd] = 0xFFFFFFFF;\n\t\t\t} else {\n\t\t\t\tgprs[rd] = 0;\n\t\t\t}\n\t\t} else {\n\t\t\tcpu.cpsrC = gprs[rm] & (1 << (immediate - 1));\n\t\t\tgprs[rd] = gprs[rm] >> immediate;\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructASR2 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar rs = gprs[rm] & 0xFF;\n\t\tif (rs) {\n\t\t\tif (rs < 32) {\n\t\t\t\tcpu.cpsrC = gprs[rd] & (1 << (rs - 1));\n\t\t\t\tgprs[rd] >>= rs;\n\t\t\t} else {\n\t\t\t\tcpu.cpsrC = gprs[rd] >> 31;\n\t\t\t\tif (cpu.cpsrC) {\n\t\t\t\t\tgprs[rd] = 0xFFFFFFFF;\n\t\t\t\t} else {\n\t\t\t\t\tgprs[rd] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructB1 = function(immediate, condOp) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tif (condOp()) {\n\t\t\tgprs[ARMRegs.PC] += immediate;\n\t\t}\n\t};\n};\n\nARMCoreThumb.prototype.constructB2 = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[ARMRegs.PC] += immediate;\n\t};\n};\n\nARMCoreThumb.prototype.constructBIC = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[rd] & ~gprs[rm];\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructBL1 = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[ARMRegs.LR] = gprs[ARMRegs.PC] + immediate;\n\t}\n};\n\nARMCoreThumb.prototype.constructBL2 = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar pc = gprs[ARMRegs.PC];\n\t\tgprs[ARMRegs.PC] = gprs[ARMRegs.LR] + (immediate << 1);\n\t\tgprs[ARMRegs.LR] = pc - 1;\n\t}\n};\n\nARMCoreThumb.prototype.constructBX = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tcpu.switchExecMode(gprs[rm] & 0x00000001);\n\t\tvar misalign = 0;\n\t\tif (rm == 15) {\n\t\t\tmisalign = gprs[rm] & 0x00000002;\n\t\t}\n\t\tgprs[ARMRegs.PC] = gprs[rm] & 0xFFFFFFFE - misalign;\n\t};\n};\n\nARMCoreThumb.prototype.constructCMN = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar aluOut = (gprs[rd] >>> 0) + (gprs[rm] >>> 0);\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = aluOut > 0xFFFFFFFF;\n\t\tcpu.cpsrV = (gprs[rd] >> 31) == (gprs[rm] >> 31) &&\n\t\t\t\t\t(gprs[rd] >> 31) != (aluOut >> 31) &&\n\t\t\t\t\t(gprs[rm] >> 31) != (aluOut >> 31);\n\t};\n};\n\nARMCoreThumb.prototype.constructCMP1 = function(rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar aluOut = gprs[rn] - immediate;\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= immediate;\n\t\tcpu.cpsrV = (gprs[rn] >> 31) && ((gprs[rn] ^ aluOut) >> 31);\n\t};\n}\n\nARMCoreThumb.prototype.constructCMP2 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = gprs[rd];\n\t\tvar m = gprs[rm];\n\t\tvar aluOut = d - m;\n\t\tvar an = aluOut >> 31;\n\t\tvar dn = d >> 31;\n\t\tcpu.cpsrN = an;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (d >>> 0) >= (m >>> 0);\n\t\tcpu.cpsrV = dn != (m >> 31) && dn != an;\n\t};\n};\n\nARMCoreThumb.prototype.constructCMP3 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar aluOut = gprs[rd] - gprs[rm];\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rd] >>> 0) >= (gprs[rm] >>> 0);\n\t\tcpu.cpsrV = ((gprs[rd] ^ gprs[rm]) >> 31) && ((gprs[rd] ^ aluOut) >> 31);\n\t};\n};\n\nARMCoreThumb.prototype.constructEOR = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[rd] ^ gprs[rm];\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructLDMIA = function(rn, rs) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar address = gprs[rn];\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tfor (m = 0x01, i = 0; i < 8; m <<= 1, ++i) {\n\t\t\tif (rs & m) {\n\t\t\t\tgprs[i] = cpu.mmu.load32(address);\n\t\t\t\taddress += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tcpu.mmu.waitMulti32(address, total);\n\t\tif (!((1 << rn) & rs)) {\n\t\t\tgprs[rn] = address;\n\t\t}\n\t};\n};\n\nARMCoreThumb.prototype.constructLDR1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar n = gprs[rn] + immediate;\n\t\tgprs[rd] = cpu.mmu.load32(n);\n\t\tcpu.mmu.wait32(n);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDR2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.load32(gprs[rn] + gprs[rm]);\n\t\tcpu.mmu.wait32(gprs[rn] + gprs[rm]);\n\t\t++cpu.cycles;\n\t}\n};\n\nARMCoreThumb.prototype.constructLDR3 = function(rd, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.load32((gprs[ARMRegs.PC] & 0xFFFFFFFC) + immediate);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.PC]);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDR4 = function(rd, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.load32(gprs[ARMRegs.SP] + immediate);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.SP] + immediate);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRB1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar n = gprs[rn] + immediate;\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.loadU8(n);\n\t\tcpu.mmu.wait(n);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRB2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.loadU8(gprs[rn] + gprs[rm]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRH1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar n = gprs[rn] + immediate;\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.loadU16(n);\n\t\tcpu.mmu.wait(n);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRH2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.loadU16(gprs[rn] + gprs[rm]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRSB = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.load8(gprs[rn] + gprs[rm]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLDRSH = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = cpu.mmu.load16(gprs[rn] + gprs[rm]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t\t++cpu.cycles;\n\t};\n};\n\nARMCoreThumb.prototype.constructLSL1 = function(rd, rm, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tif (immediate == 0) {\n\t\t\tgprs[rd] = gprs[rm];\n\t\t} else {\n\t\t\tcpu.cpsrC = gprs[rm] & (1 << (32 - immediate));\n\t\t\tgprs[rd] = gprs[rm] << immediate;\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructLSL2 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar rs = gprs[rm] & 0xFF;\n\t\tif (rs) {\n\t\t\tif (rs < 32) {\n\t\t\t\tcpu.cpsrC = gprs[rd] & (1 << (32 - rs));\n\t\t\t\tgprs[rd] <<= rs;\n\t\t\t} else {\n\t\t\t\tif (rs > 32) {\n\t\t\t\t\tcpu.cpsrC = 0;\n\t\t\t\t} else {\n\t\t\t\t\tcpu.cpsrC = gprs[rd] & 0x00000001;\n\t\t\t\t}\n\t\t\t\tgprs[rd] = 0;\n\t\t\t}\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructLSR1 = function(rd, rm, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tif (immediate == 0) {\n\t\t\tcpu.cpsrC = gprs[rm] >> 31;\n\t\t\tgprs[rd] = 0;\n\t\t} else {\n\t\t\tcpu.cpsrC = gprs[rm] & (1 << (immediate - 1));\n\t\t\tgprs[rd] = gprs[rm] >>> immediate;\n\t\t}\n\t\tcpu.cpsrN = 0;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n}\n\nARMCoreThumb.prototype.constructLSR2 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar rs = gprs[rm] & 0xFF;\n\t\tif (rs) {\n\t\t\tif (rs < 32) {\n\t\t\t\tcpu.cpsrC = gprs[rd] & (1 << (rs - 1));\n\t\t\t\tgprs[rd] >>>= rs;\n\t\t\t} else {\n\t\t\t\tif (rs > 32) {\n\t\t\t\t\tcpu.cpsrC = 0;\n\t\t\t\t} else {\n\t\t\t\t\tcpu.cpsrC = gprs[rd] >> 31;\n\t\t\t\t}\n\t\t\t\tgprs[rd] = 0;\n\t\t\t}\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructMOV1 = function(rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rn] = immediate;\n\t\tcpu.cpsrN = immediate >> 31;\n\t\tcpu.cpsrZ = !(immediate & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructMOV2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = gprs[rn];\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = 0;\n\t\tcpu.cpsrV = 0;\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructMOV3 = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[rm];\n\t};\n};\n\nARMCoreThumb.prototype.constructMUL = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.waitMul(gprs[rm]);\n\t\tif ((gprs[rm] & 0xFFFF0000) && (gprs[rd] & 0xFFFF0000)) {\n\t\t\t// Our data type is a double--we'll lose bits if we do it all at once!\n\t\t\tvar hi = ((gprs[rd] & 0xFFFF0000) * gprs[rm]) & 0xFFFFFFFF;\n\t\t\tvar lo = ((gprs[rd] & 0x0000FFFF) * gprs[rm]) & 0xFFFFFFFF;\n\t\t\tgprs[rd] = (hi + lo) & 0xFFFFFFFF;\n\t\t} else {\n\t\t\tgprs[rd] *= gprs[rm];\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructMVN = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = ~gprs[rm];\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructNEG = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = -gprs[rm];\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = 0 >= (d >>> 0);\n\t\tcpu.cpsrV = (gprs[rm] >> 31) && (d >> 31);\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructORR = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tgprs[rd] = gprs[rd] | gprs[rm];\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructPOP = function(rs, r) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\t++cpu.cycles;\n\t\tvar address = gprs[ARMRegs.SP];\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tfor (m = 0x01, i = 0; i < 8; m <<= 1, ++i) {\n\t\t\tif (rs & m) {\n\t\t\t\tcpu.mmu.waitSeq32(address);\n\t\t\t\tgprs[i] = cpu.mmu.load32(address);\n\t\t\t\taddress += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tif (r) {\n\t\t\tgprs[ARMRegs.PC] = cpu.mmu.load32(address) & 0xFFFFFFFE;\n\t\t\taddress += 4;\n\t\t\t++total;\n\t\t}\n\t\tcpu.mmu.waitMulti32(address, total);\n\t\tgprs[ARMRegs.SP] = address;\n\t};\n};\n\nARMCoreThumb.prototype.constructPUSH = function(rs, r) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar address = gprs[ARMRegs.SP] - 4;\n\t\tvar total = 0;\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tif (r) {\n\t\t\tcpu.mmu.store32(address, gprs[ARMRegs.LR]);\n\t\t\taddress -= 4;\n\t\t\t++total;\n\t\t}\n\t\tvar m, i;\n\t\tfor (m = 0x80, i = 7; m; m >>= 1, --i) {\n\t\t\tif (rs & m) {\n\t\t\t\tcpu.mmu.store32(address, gprs[i]);\n\t\t\t\taddress -= 4;\n\t\t\t\t++total;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (m >>= 1, --i; m; m >>= 1, --i) {\n\t\t\tif (rs & m) {\n\t\t\t\tcpu.mmu.store32(address, gprs[i]);\n\t\t\t\taddress -= 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tcpu.mmu.waitMulti32(address, total);\n\t\tgprs[ARMRegs.SP] = address + 4;\n\t};\n};\n\nARMCoreThumb.prototype.constructROR = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar rs = gprs[rm] & 0xFF;\n\t\tif (rs) {\n\t\t\tvar r4 = rs & 0x1F;\n\t\t\tif (r4 > 0) {\n\t\t\t\tcpu.cpsrC = gprs[rd] & (1 << (r4 - 1));\n\t\t\t\tgprs[rd] = (gprs[rd] >>> r4) | (gprs[rd] << (32 - r4));\n\t\t\t} else {\n\t\t\t\tcpu.cpsrC = gprs[rd] >> 31;\n\t\t\t}\n\t\t}\n\t\tcpu.cpsrN = gprs[rd] >> 31;\n\t\tcpu.cpsrZ = !(gprs[rd] & 0xFFFFFFFF);\n\t};\n};\n\nARMCoreThumb.prototype.constructSBC = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar m = (gprs[rm] >>> 0) + (cpu.cpsrC ? 0 : 1);\n\t\tvar d = (gprs[rd] >>> 0) - m;\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rd] >>> 0) >= (d >>> 0);\n\t\tcpu.cpsrV = ((gprs[rd] ^ m) >> 31) && ((gprs[rd] ^ d) >> 31);\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructSTMIA = function(rn, rs) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tvar address = gprs[rn];\n\t\tvar total = 0;\n\t\tvar m, i;\n\t\tfor (m = 0x01, i = 0; i < 8; m <<= 1, ++i) {\n\t\t\tif (rs & m) {\n\t\t\t\tcpu.mmu.store32(address, gprs[i]);\n\t\t\t\taddress += 4;\n\t\t\t\t++total;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor (m <<= 1, ++i; i < 8; m <<= 1, ++i) {\n\t\t\tif (rs & m) {\n\t\t\t\tcpu.mmu.store32(address, gprs[i]);\n\t\t\t\taddress += 4;\n\t\t\t\t++total;\n\t\t\t}\n\t\t}\n\t\tcpu.mmu.waitMulti32(address, total);\n\t\tgprs[rn] = address;\n\t};\n};\n\nARMCoreThumb.prototype.constructSTR1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar n = gprs[rn] + immediate;\n\t\tcpu.mmu.store32(n, gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait32(n);\n\t};\n};\n\nARMCoreThumb.prototype.constructSTR2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.store32(gprs[rn] + gprs[rm], gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait32(gprs[rn] + gprs[rm]);\n\t};\n};\n\nARMCoreThumb.prototype.constructSTR3 = function(rd, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.store32(gprs[ARMRegs.SP] + immediate, gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait32(gprs[ARMRegs.SP] + immediate);\n\t};\n};\n\nARMCoreThumb.prototype.constructSTRB1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar n = gprs[rn] + immediate;\n\t\tcpu.mmu.store8(n, gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait(n);\n\t};\n};\n\nARMCoreThumb.prototype.constructSTRB2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.store8(gprs[rn] + gprs[rm], gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t}\n};\n\nARMCoreThumb.prototype.constructSTRH1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tvar n = gprs[rn] + immediate;\n\t\tcpu.mmu.store16(n, gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait(n);\n\t};\n};\n\nARMCoreThumb.prototype.constructSTRH2 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.store16(gprs[rn] + gprs[rm], gprs[rd]);\n\t\tcpu.mmu.wait(gprs[ARMRegs.PC]);\n\t\tcpu.mmu.wait(gprs[rn] + gprs[rm]);\n\t}\n};\n\nARMCoreThumb.prototype.constructSUB1 = function(rd, rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = gprs[rn] - immediate;\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= immediate;\n\t\tcpu.cpsrV = (gprs[rn] >> 31) && ((gprs[rn] ^ d) >> 31);\n\t\tgprs[rd] = d;\n\t};\n}\n\nARMCoreThumb.prototype.constructSUB2 = function(rn, immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = gprs[rn] - immediate;\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= immediate;\n\t\tcpu.cpsrV = (gprs[rn] >> 31) && ((gprs[rn] ^ d) >> 31);\n\t\tgprs[rn] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructSUB3 = function(rd, rn, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar d = gprs[rn] - gprs[rm];\n\t\tcpu.cpsrN = d >> 31;\n\t\tcpu.cpsrZ = !(d & 0xFFFFFFFF);\n\t\tcpu.cpsrC = (gprs[rn] >>> 0) >= (gprs[rm] >>> 0);\n\t\tcpu.cpsrV = (gprs[rn] >> 31) != (gprs[rm] >> 31) &&\n\t\t\t\t\t(gprs[rn] >> 31) != (d >> 31);\n\t\tgprs[rd] = d;\n\t};\n};\n\nARMCoreThumb.prototype.constructSWI = function(immediate) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.irq.swi(immediate);\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t}\n};\n\nARMCoreThumb.prototype.constructTST = function(rd, rm) {\n\tvar cpu : ARMCoreType = this.cpu;\n\tvar gprs = cpu.gprs;\n\treturn function() {\n\t\tcpu.mmu.waitPrefetch(gprs[ARMRegs.PC]);\n\t\tvar aluOut = gprs[rd] & gprs[rm];\n\t\tcpu.cpsrN = aluOut >> 31;\n\t\tcpu.cpsrZ = !(aluOut & 0xFFFFFFFF);\n\t};\n};\n\n///////////////////////////////////////////////////////////////////////////\n\nfunction ARMCore() {\n\tthis.SP = 13;\n\tthis.LR = 14;\n\tthis.PC = 15;\n\n\tthis.MODE_ARM = 0;\n\tthis.MODE_THUMB = 1;\n\n\tthis.MODE_USER = 0x10;\n\tthis.MODE_FIQ = 0x11;\n\tthis.MODE_IRQ = 0x12;\n\tthis.MODE_SUPERVISOR = 0x13;\n\tthis.MODE_ABORT = 0x17;\n\tthis.MODE_UNDEFINED = 0x1B;\n\tthis.MODE_SYSTEM = 0x1F;\n\n\tthis.BANK_NONE = 0\n\tthis.BANK_FIQ = 1;\n\tthis.BANK_IRQ = 2;\n\tthis.BANK_SUPERVISOR = 3;\n\tthis.BANK_ABORT = 4;\n\tthis.BANK_UNDEFINED = 5;\n\n\tthis.WORD_SIZE_ARM = 4;\n\tthis.WORD_SIZE_THUMB = 2;\n\n\tthis.BASE_RESET = 0x00000000;\n\tthis.BASE_UNDEF = 0x00000004;\n\tthis.BASE_SWI = 0x00000008;\n\tthis.BASE_PABT = 0x0000000C;\n\tthis.BASE_DABT = 0x00000010;\n\tthis.BASE_IRQ = 0x00000018;\n\tthis.BASE_FIQ = 0x0000001C;\n\n\tthis.armCompiler = new ARMCoreArm(this);\n\tthis.thumbCompiler = new ARMCoreThumb(this);\n\tthis.generateConds();\n\n\tthis.gprs = new Int32Array(16);\n\tthis.dfprs = new Float64Array(16);\n\tthis.sfprs = new Float32Array(this.dfprs.buffer); // regs shared with dfprs\n\tthis.ifprs = new Int32Array(this.dfprs.buffer); // regs shared with dfprs\n};\n\nARMCore.prototype.resetCPU = function(startOffset) {\n\tfor (var i = 0; i < ARMRegs.PC; ++i) {\n\t\tthis.gprs[i] = 0;\n\t}\n\tthis.gprs[ARMRegs.PC] = startOffset + ARMConstants.WORD_SIZE_ARM;\n\tthis.dfprs.set(0); // no need to zero the sfprs, since they share the same buffer\n\n\tthis.loadInstruction = this.loadInstructionArm;\n\tthis.execMode = ARMMode.MODE_ARM;\n\tthis.instructionWidth = ARMConstants.WORD_SIZE_ARM;\n\n\tthis.mode = ARMMode.MODE_SYSTEM;\n\n\tthis.cpsrI = false;\n\tthis.cpsrF = false;\n\n\tthis.cpsrV = false;\n\tthis.cpsrC = false;\n\tthis.cpsrZ = false;\n\tthis.cpsrN = false;\n\n\tthis.bankedRegisters = [\n\t\tnew Int32Array(7),\n\t\tnew Int32Array(7),\n\t\tnew Int32Array(2),\n\t\tnew Int32Array(2),\n\t\tnew Int32Array(2),\n\t\tnew Int32Array(2)\n\t];\n\tthis.spsr = 0;\n\tthis.bankedSPSRs = new Int32Array(6);\n\n\tthis.cycles = 0;\n\n\tthis.shifterOperand = 0;\n\tthis.shifterCarryOut = 0;\n\n\tthis.page = null;\n\tthis.pageId = 0;\n\tthis.pageRegion = -1;\n\n\tthis.instruction = null;\n\n\tthis.irq.clear();\n\n\tvar gprs = this.gprs;\n\tvar mmu = this.mmu as ARMMMUInterface;\n\n\tthis.step = function() {\n\t\tvar instruction = this.instruction || (this.instruction = this.loadInstruction(gprs[ARMRegs.PC] - this.instructionWidth));\n\t\tgprs[ARMRegs.PC] += this.instructionWidth;\n\t\tthis.conditionPassed = true;\n\t\tinstruction();\n\n\t\tif (!instruction.writesPC) {\n\t\t\tif (this.instruction != null) { // We might have gotten an interrupt from the instruction\n\t\t\t\tif (instruction.next == null || instruction.next.page.invalid) {\n\t\t\t\t\tinstruction.next = this.loadInstruction(gprs[ARMRegs.PC] - this.instructionWidth);\n\t\t\t\t}\n\t\t\t\tthis.instruction = instruction.next;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.conditionPassed) {\n\t\t\t\tvar pc = gprs[ARMRegs.PC] &= 0xFFFFFFFE;\n\t\t\t\tif (this.execMode == ARMMode.MODE_ARM) {\n\t\t\t\t\tmmu.wait32(pc);\n\t\t\t\t\tmmu.waitPrefetch32(pc);\n\t\t\t\t} else {\n\t\t\t\t\tmmu.wait(pc);\n\t\t\t\t\tmmu.waitPrefetch(pc);\n\t\t\t\t}\n\t\t\t\tgprs[ARMRegs.PC] += this.instructionWidth;\n\t\t\t\tif (!instruction.fixedJump) {\n\t\t\t\t\tthis.instruction = null;\n\t\t\t\t} else if  (this.instruction != null) {\n\t\t\t\t\tif (instruction.next == null || instruction.next.page.invalid) {\n\t\t\t\t\t\tinstruction.next = this.loadInstruction(gprs[ARMRegs.PC] - this.instructionWidth);\n\t\t\t\t\t}\n\t\t\t\t\tthis.instruction = instruction.next;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.instruction = null;\n\t\t\t}\n\t\t}\n\t\tthis.irq.updateTimers();\n\t};\n};\n\nARMCore.prototype.freeze = function() : ARMCoreState {\n\treturn {\n\t\tPC: this.gprs[15] - this.instructionWidth,\n\t\tSP: this.gprs[13],\n\t\t'gprs': [\n\t\t\tthis.gprs[0],\n\t\t\tthis.gprs[1],\n\t\t\tthis.gprs[2],\n\t\t\tthis.gprs[3],\n\t\t\tthis.gprs[4],\n\t\t\tthis.gprs[5],\n\t\t\tthis.gprs[6],\n\t\t\tthis.gprs[7],\n\t\t\tthis.gprs[8],\n\t\t\tthis.gprs[9],\n\t\t\tthis.gprs[10],\n\t\t\tthis.gprs[11],\n\t\t\tthis.gprs[12],\n\t\t\tthis.gprs[13],\n\t\t\tthis.gprs[14],\n\t\t\tthis.gprs[15],\n\t\t],\n\t\t'sfprs': this.sfprs.slice(),\n\t\t'dfprs': this.dfprs.slice(),\n\t\t'ifprs': this.ifprs.slice(),\n\t\t'mode': this.mode,\n\t\t'cpsrI': this.cpsrI,\n\t\t'cpsrF': this.cpsrF,\n\t\t'cpsrV': this.cpsrV,\n\t\t'cpsrC': this.cpsrC,\n\t\t'cpsrZ': this.cpsrZ,\n\t\t'cpsrN': this.cpsrN,\n\t\t'bankedRegisters': [\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[0][0],\n\t\t\t\tthis.bankedRegisters[0][1],\n\t\t\t\tthis.bankedRegisters[0][2],\n\t\t\t\tthis.bankedRegisters[0][3],\n\t\t\t\tthis.bankedRegisters[0][4],\n\t\t\t\tthis.bankedRegisters[0][5],\n\t\t\t\tthis.bankedRegisters[0][6]\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[1][0],\n\t\t\t\tthis.bankedRegisters[1][1],\n\t\t\t\tthis.bankedRegisters[1][2],\n\t\t\t\tthis.bankedRegisters[1][3],\n\t\t\t\tthis.bankedRegisters[1][4],\n\t\t\t\tthis.bankedRegisters[1][5],\n\t\t\t\tthis.bankedRegisters[1][6]\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[2][0],\n\t\t\t\tthis.bankedRegisters[2][1]\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[3][0],\n\t\t\t\tthis.bankedRegisters[3][1]\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[4][0],\n\t\t\t\tthis.bankedRegisters[4][1]\n\t\t\t],\n\t\t\t[\n\t\t\t\tthis.bankedRegisters[5][0],\n\t\t\t\tthis.bankedRegisters[5][1]\n\t\t\t]\n\t\t],\n\t\t'spsr': this.spsr,\n\t\t'bankedSPSRs': [\n\t\t\tthis.bankedSPSRs[0],\n\t\t\tthis.bankedSPSRs[1],\n\t\t\tthis.bankedSPSRs[2],\n\t\t\tthis.bankedSPSRs[3],\n\t\t\tthis.bankedSPSRs[4],\n\t\t\tthis.bankedSPSRs[5]\n\t\t],\n\t\t'cycles': this.cycles,\n\t\t'instructionWidth': this.instructionWidth,\n\t};\n};\n\nARMCore.prototype.defrost = function(frost: ARMCoreState) {\n\tthis.instruction = null;\n\n\tthis.page = null;\n\tthis.pageId = 0;\n\tthis.pageRegion = -1;\n\n\tthis.gprs[0] = frost.gprs[0];\n\tthis.gprs[1] = frost.gprs[1];\n\tthis.gprs[2] = frost.gprs[2];\n\tthis.gprs[3] = frost.gprs[3];\n\tthis.gprs[4] = frost.gprs[4];\n\tthis.gprs[5] = frost.gprs[5];\n\tthis.gprs[6] = frost.gprs[6];\n\tthis.gprs[7] = frost.gprs[7];\n\tthis.gprs[8] = frost.gprs[8];\n\tthis.gprs[9] = frost.gprs[9];\n\tthis.gprs[10] = frost.gprs[10];\n\tthis.gprs[11] = frost.gprs[11];\n\tthis.gprs[12] = frost.gprs[12];\n\tthis.gprs[13] = frost.gprs[13];\n\tthis.gprs[14] = frost.gprs[14];\n\tthis.gprs[15] = frost.gprs[15];\n\n\tthis.ifprs.set(frost.ifprs); // regs shared with sfprs\n\n\tthis.mode = frost.mode;\n\tthis.cpsrI = frost.cpsrI;\n\tthis.cpsrF = frost.cpsrF;\n\tthis.cpsrV = frost.cpsrV;\n\tthis.cpsrC = frost.cpsrC;\n\tthis.cpsrZ = frost.cpsrZ;\n\tthis.cpsrN = frost.cpsrN;\n\n\tthis.bankedRegisters[0][0] = frost.bankedRegisters[0][0];\n\tthis.bankedRegisters[0][1] = frost.bankedRegisters[0][1];\n\tthis.bankedRegisters[0][2] = frost.bankedRegisters[0][2];\n\tthis.bankedRegisters[0][3] = frost.bankedRegisters[0][3];\n\tthis.bankedRegisters[0][4] = frost.bankedRegisters[0][4];\n\tthis.bankedRegisters[0][5] = frost.bankedRegisters[0][5];\n\tthis.bankedRegisters[0][6] = frost.bankedRegisters[0][6];\n\n\tthis.bankedRegisters[1][0] = frost.bankedRegisters[1][0];\n\tthis.bankedRegisters[1][1] = frost.bankedRegisters[1][1];\n\tthis.bankedRegisters[1][2] = frost.bankedRegisters[1][2];\n\tthis.bankedRegisters[1][3] = frost.bankedRegisters[1][3];\n\tthis.bankedRegisters[1][4] = frost.bankedRegisters[1][4];\n\tthis.bankedRegisters[1][5] = frost.bankedRegisters[1][5];\n\tthis.bankedRegisters[1][6] = frost.bankedRegisters[1][6];\n\n\tthis.bankedRegisters[2][0] = frost.bankedRegisters[2][0];\n\tthis.bankedRegisters[2][1] = frost.bankedRegisters[2][1];\n\n\tthis.bankedRegisters[3][0] = frost.bankedRegisters[3][0];\n\tthis.bankedRegisters[3][1] = frost.bankedRegisters[3][1];\n\n\tthis.bankedRegisters[4][0] = frost.bankedRegisters[4][0];\n\tthis.bankedRegisters[4][1] = frost.bankedRegisters[4][1];\n\n\tthis.bankedRegisters[5][0] = frost.bankedRegisters[5][0];\n\tthis.bankedRegisters[5][1] = frost.bankedRegisters[5][1];\n\n\tthis.spsr = frost.spsr;\n\tthis.bankedSPSRs[0] = frost.bankedSPSRs[0];\n\tthis.bankedSPSRs[1] = frost.bankedSPSRs[1];\n\tthis.bankedSPSRs[2] = frost.bankedSPSRs[2];\n\tthis.bankedSPSRs[3] = frost.bankedSPSRs[3];\n\tthis.bankedSPSRs[4] = frost.bankedSPSRs[4];\n\tthis.bankedSPSRs[5] = frost.bankedSPSRs[5];\n\n\tthis.cycles = frost.cycles;\n\n\tthis.instructionWidth = frost.instructionWidth;\n\tthis.loadInstruction = frost.instructionWidth == 2 ? this.loadInstructionThumb : this.loadInstructionArm;\n\tthis.execMode = frost.instructionWidth == 2 ? ARMMode.MODE_THUMB : ARMMode.MODE_ARM;\n};\n\nARMCore.prototype.fetchPage = function(address : number) {\n\tvar mmu = this.mmu;\n\tvar region = address >>> mmu.BASE_OFFSET;\n\tvar pageId = mmu.addressToPage(region, address & mmu.OFFSET_MASK);\n\tif (region == this.pageRegion) {\n\t\tif (pageId == this.pageId && !(this.page as ARMMemoryPage).invalid) {\n\t\t\treturn;\n\t\t}\n\t\tthis.pageId = pageId;\n\t} else {\n\t\tthis.pageMask = mmu.memory[region].PAGE_MASK;\n\t\tthis.pageRegion = region;\n\t\tthis.pageId = pageId;\n\t}\n\n\tthis.page = mmu.accessPage(region, pageId);\n};\n\nARMCore.prototype.loadInstructionArm = function(address : number) {\n\tvar next : ARMOperation = null;\n\tthis.fetchPage(address);\n\tvar offset = (address & this.pageMask) >> 2;\n\tnext = (this.page as ARMMemoryPage).arm[offset];\n\tif (next) {\n\t\treturn next;\n\t}\n\tvar instruction = this.mmu.load32(address) >>> 0;\n\tnext = this.compileArm(instruction);\n\tnext.next = null;\n\tnext.page = this.page;\n\tnext.address = address;\n\tnext.opcode = instruction;\n\t(this.page as ARMMemoryPage).arm[offset] = next;\n\treturn next;\n};\n\nARMCore.prototype.loadInstructionThumb = function(address : number) {\n\tvar next : ARMOperation  = null;\n\tthis.fetchPage(address);\n\tvar offset = (address & this.pageMask) >> 1;\n\tnext = (this.page as ARMMemoryPage).thumb[offset];\n\tif (next) {\n\t\treturn next;\n\t}\n\tvar instruction = this.mmu.load16(address);\n\tnext = this.compileThumb(instruction);\n\tnext.next = null;\n\tnext.page = this.page;\n\tnext.address = address;\n\tnext.opcode = instruction;\n\t(this.page as ARMMemoryPage).thumb[offset] = next;\n\treturn next;\n};\n\nARMCore.prototype.selectBank = function(mode : ARMMode) {\n\tswitch (mode) {\n\tcase ARMMode.MODE_USER:\n\tcase ARMMode.MODE_SYSTEM:\n\t\t// No banked registers\n\t\treturn ARMConstants.BANK_NONE;\n\tcase ARMMode.MODE_FIQ:\n\t\treturn ARMConstants.BANK_FIQ;\n\tcase ARMMode.MODE_IRQ:\n\t\treturn ARMConstants.BANK_IRQ;\n\tcase ARMMode.MODE_SUPERVISOR:\n\t\treturn ARMConstants.BANK_SUPERVISOR;\n\tcase ARMMode.MODE_ABORT:\n\t\treturn ARMConstants.BANK_ABORT;\n\tcase ARMMode.MODE_UNDEFINED:\n\t\treturn ARMConstants.BANK_UNDEFINED;\n\tdefault:\n\t\tthrow new EmuHalt(\"Invalid user mode \" + mode + \" passed to selectBank\");\n\t}\n};\n\nARMCore.prototype.switchExecMode = function(newMode) {\n\tif (this.execMode != newMode) {\n\t\tthis.execMode = newMode;\n\t\tif (newMode == ARMMode.MODE_ARM) {\n\t\t\tthis.instructionWidth = ARMConstants.WORD_SIZE_ARM;\n\t\t\tthis.loadInstruction = this.loadInstructionArm;\n\t\t} else {\n\t\t\tthis.instructionWidth = ARMConstants.WORD_SIZE_THUMB;\n\t\t\tthis.loadInstruction = this.loadInstructionThumb;\n\t\t}\n\t}\n\t\n};\n\nARMCore.prototype.switchMode = function(newMode) {\n\tif (newMode == this.mode) {\n\t\t// Not switching modes after all\n\t\treturn;\n\t}\n\tif (newMode != ARMMode.MODE_USER || newMode != ARMMode.MODE_SYSTEM) {\n\t\t// Switch banked registers\n\t\tvar newBank = this.selectBank(newMode);\n\t\tvar oldBank = this.selectBank(this.mode);\n\t\tif (newBank != oldBank) {\n\t\t\t// TODO: support FIQ\n\t\t\tif (newMode == ARMMode.MODE_FIQ || this.mode == ARMMode.MODE_FIQ) {\n\t\t\t\tvar oldFiqBank = (oldBank == ARMConstants.BANK_FIQ) ? 1 : 0;\n\t\t\t\tvar newFiqBank = (newBank == ARMConstants.BANK_FIQ) ? 1 : 0;\n\t\t\t\tthis.bankedRegisters[oldFiqBank][2] = this.gprs[8];\n\t\t\t\tthis.bankedRegisters[oldFiqBank][3] = this.gprs[9];\n\t\t\t\tthis.bankedRegisters[oldFiqBank][4] = this.gprs[10];\n\t\t\t\tthis.bankedRegisters[oldFiqBank][5] = this.gprs[11];\n\t\t\t\tthis.bankedRegisters[oldFiqBank][6] = this.gprs[12];\n\t\t\t\tthis.gprs[8] = this.bankedRegisters[newFiqBank][2];\n\t\t\t\tthis.gprs[9] = this.bankedRegisters[newFiqBank][3];\n\t\t\t\tthis.gprs[10] = this.bankedRegisters[newFiqBank][4];\n\t\t\t\tthis.gprs[11] = this.bankedRegisters[newFiqBank][5];\n\t\t\t\tthis.gprs[12] = this.bankedRegisters[newFiqBank][6];\n\t\t\t}\n\t\t\tthis.bankedRegisters[oldBank][0] = this.gprs[ARMRegs.SP];\n\t\t\tthis.bankedRegisters[oldBank][1] = this.gprs[ARMRegs.LR];\n\t\t\tthis.gprs[ARMRegs.SP] = this.bankedRegisters[newBank][0];\n\t\t\tthis.gprs[ARMRegs.LR] = this.bankedRegisters[newBank][1];\n\n\t\t\tthis.bankedSPSRs[oldBank] = this.spsr;\n\t\t\tthis.spsr = this.bankedSPSRs[newBank];\n\t\t}\n\t}\n\tthis.mode = newMode;\n};\n\nARMCore.prototype.packCPSR = function() {\n\treturn this.mode | (this.execMode << 5) | (this.cpsrF << 6) | (this.cpsrI << 7) |\n\t       (this.cpsrN << 31) | (this.cpsrZ << 30) | (this.cpsrC << 29) | (this.cpsrV << 28);\n};\n\nARMCore.prototype.unpackCPSR = function(spsr) {\n\tthis.switchMode(spsr & 0x0000001F);\n\tthis.switchExecMode(!!(spsr & 0x00000020));\n\tthis.cpsrF = spsr & 0x00000040;\n\tthis.cpsrI = spsr & 0x00000080;\n\tthis.cpsrN = spsr & 0x80000000;\n\tthis.cpsrZ = spsr & 0x40000000;\n\tthis.cpsrC = spsr & 0x20000000;\n\tthis.cpsrV = spsr & 0x10000000;\n\n\tthis.irq.testIRQ();\n};\n\nARMCore.prototype.hasSPSR = function() {\n\treturn this.mode != ARMMode.MODE_SYSTEM && this.mode != ARMMode.MODE_USER;\n};\n\nARMCore.prototype.raiseIRQ = function() {\n\tif (this.cpsrI) {\n\t\treturn;\n\t}\n\tvar cpsr = this.packCPSR();\n\tvar instructionWidth = this.instructionWidth;\n\tthis.switchMode(ARMMode.MODE_IRQ);\n\tthis.spsr = cpsr;\n\tthis.gprs[ARMRegs.LR] = this.gprs[ARMRegs.PC] - instructionWidth + 4;\n\tthis.gprs[ARMRegs.PC] = this.BASE_IRQ + ARMConstants.WORD_SIZE_ARM;\n\tthis.instruction = null;\n\tthis.switchExecMode(ARMMode.MODE_ARM);\n\tthis.cpsrI = true;\n};\n\nARMCore.prototype.raiseTrap = function() {\n\tvar cpsr = this.packCPSR();\n\tvar instructionWidth = this.instructionWidth;\n\tthis.switchMode(ARMMode.MODE_SUPERVISOR);\n\tthis.spsr = cpsr;\n\tthis.gprs[ARMRegs.LR] = this.gprs[ARMRegs.PC] - instructionWidth;\n\tthis.gprs[ARMRegs.PC] = this.BASE_SWI + ARMConstants.WORD_SIZE_ARM;\n\tthis.instruction = null;\n\tthis.switchExecMode(ARMMode.MODE_ARM);\n\tthis.cpsrI = true;\n};\n\nARMCore.prototype.badOp = function(instruction) {\n\tvar func : AddressFunction = function() {\n\t\tthrow new EmuHalt(\"Illegal instruction: 0x\" + instruction.toString(16));\n\t};\n\tfunc.writesPC = true;\n\tfunc.fixedJump = false;\n\treturn func;\n};\n\nARMCore.prototype.generateConds = function() {\n\tvar cpu = this;\n\tthis.conds = [\n\t\t// EQ\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrZ;\n\t\t},\n\t\t// NE\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrZ;\n\t\t},\n\t\t// CS\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrC;\n\t\t},\n\t\t// CC\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrC;\n\t\t},\n\t\t// MI\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrN;\n\t\t},\n\t\t// PL\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrN;\n\t\t},\n\t\t// VS\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrV;\n\t\t},\n\t\t// VC\n\t\tfunction() {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrV;\n\t\t},\n\t\t// HI\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrC && !cpu.cpsrZ;\n\t\t},\n\t\t// LS\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrC || cpu.cpsrZ;\n\t\t},\n\t\t// GE\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrN == !cpu.cpsrV;\n\t\t},\n\t\t// LT\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrN != !cpu.cpsrV;\n\t\t},\n\t\t// GT\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = !cpu.cpsrZ && !cpu.cpsrN == !cpu.cpsrV;\n\t\t},\n\t\t// LE\n\t\tfunction () {\n\t\t\treturn cpu.conditionPassed = cpu.cpsrZ || !cpu.cpsrN != !cpu.cpsrV;\n\t\t},\n\t\t// AL\n\t\tnull,\n\t\tnull\n\t]\n}\n\nARMCore.prototype.barrelShiftImmediate = function(shiftType, immediate, rm) {\n\tvar cpu = this;\n\tvar gprs = this.gprs;\n\tvar shiftOp = this.badOp;\n\tswitch (shiftType) {\n\tcase 0x00000000:\n\t\t// LSL\n\t\tif (immediate) {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = gprs[rm] << immediate;\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & (1 << (32 - immediate));\n\t\t\t};\n\t\t} else {\n\t\t\t// This boils down to no shift\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = gprs[rm];\n\t\t\t\tcpu.shifterCarryOut = cpu.cpsrC;\n\t\t\t};\n\t\t}\n\t\tbreak;\n\tcase 0x00000020:\n\t\t// LSR\n\t\tif (immediate) {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = gprs[rm] >>> immediate;\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & (1 << (immediate - 1));\n\t\t\t};\n\t\t} else {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = 0;\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & 0x80000000;\n\t\t\t};\n\t\t}\n\t\tbreak;\n\tcase 0x00000040:\n\t\t// ASR\n\t\tif (immediate) {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = gprs[rm] >> immediate;\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & (1 << (immediate - 1));\n\t\t\t};\n\t\t} else {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & 0x80000000;\n\t\t\t\tif (cpu.shifterCarryOut) {\n\t\t\t\t\tcpu.shifterOperand = 0xFFFFFFFF;\n\t\t\t\t} else {\n\t\t\t\t\tcpu.shifterOperand = 0;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tbreak;\n\tcase 0x00000060:\n\t\t// ROR\n\t\tif (immediate) {\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = (gprs[rm] >>> immediate) | (gprs[rm] << (32 - immediate));\n\t\t\t\tcpu.shifterCarryOut = gprs[rm] & (1 << (immediate - 1));\n\t\t\t};\n\t\t} else {\n\t\t\t// RRX\n\t\t\tshiftOp = function() {\n\t\t\t\tcpu.shifterOperand = ((cpu.cpsrC ? 1 : 0) << 31) | (gprs[rm] >>> 1);\n\t\t\t\tcpu.shifterCarryOut =  gprs[rm] & 0x00000001;\n\t\t\t};\n\t\t}\n\t\tbreak;\n\t}\n\treturn shiftOp;\n}\n\nARMCore.prototype.compileArm = function(instruction) {\n\tvar op = this.badOp(instruction);\n\tvar i = instruction & 0x0E000000;\n\tvar cpu = this;\n\tvar gprs = this.gprs;\n\n\tvar condOp = this.conds[(instruction & 0xF0000000) >>> 28];\n\tif ((instruction & 0x0FFFFFF0) == 0x012FFF10) {\n\t\t// BX\n\t\tvar rm = instruction & 0xF;\n\t\top = this.armCompiler.constructBX(rm, condOp);\n\t\top.writesPC = true;\n\t\top.fixedJump = false;\n\t} else if (!(instruction & 0x0C000000) && (i == 0x02000000 || (instruction & 0x00000090) != 0x00000090)) {\n\t\tvar opcode = instruction & 0x01E00000;\n\t\tvar s = instruction & 0x00100000;\n\t\tvar shiftsRs = false;\n\t\tif ((opcode & 0x01800000) == 0x01000000 && !s) {\n\t\t\tvar r = instruction & 0x00400000;\n\t\t\tif ((instruction & 0x00B0F000) == 0x0020F000) {\n\t\t\t\t// MSR\n\t\t\t\tvar rm = instruction & 0x0000000F;\n\t\t\t\tvar immediate = instruction & 0x000000FF;\n\t\t\t\tvar rotateImm = (instruction & 0x00000F00) >> 7;\n\t\t\t\timmediate = (immediate >>> rotateImm) | (immediate << (32 - rotateImm));\n\t\t\t\top = this.armCompiler.constructMSR(rm, r, instruction, immediate, condOp);\n\t\t\t\top.writesPC = false;\n\t\t\t} else if ((instruction & 0x00BF0000) == 0x000F0000) {\n\t\t\t\t// MRS\n\t\t\t\tvar rd = (instruction & 0x0000F000) >> 12;\n\t\t\t\top = this.armCompiler.constructMRS(rd, r, condOp);\n\t\t\t\top.writesPC = rd == ARMRegs.PC;\n\t\t\t}\n\t\t} else {\n\t\t\t// Data processing/FSR transfer\n\t\t\tvar rn = (instruction & 0x000F0000) >> 16;\n\t\t\tvar rd = (instruction & 0x0000F000) >> 12;\n\n\t\t\t// Parse shifter operand\n\t\t\tvar shiftType = instruction & 0x00000060;\n\t\t\tvar rm = instruction & 0x0000000F;\n\t\t\tvar shiftOp = function() {\n\t\t\t\tthrow new EmuHalt('BUG: invalid barrel shifter');\n\t\t\t};\n\t\t\tif (instruction & 0x02000000) {\n\t\t\t\tvar immediate = instruction & 0x000000FF;\n\t\t\t\tvar rotate = (instruction & 0x00000F00) >> 7;\n\t\t\t\tif (!rotate) {\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1Immediate(immediate);\n\t\t\t\t} else {\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1ImmediateRotate(immediate, rotate);\n\t\t\t\t}\n\t\t\t} else if (instruction & 0x00000010) {\n\t\t\t\tvar rs = (instruction & 0x00000F00) >> 8;\n\t\t\t\tshiftsRs = true;\n\t\t\t\tswitch (shiftType) {\n\t\t\t\tcase 0x00000000:\n\t\t\t\t\t// LSL\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1LSL(rs, rm);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00000020:\n\t\t\t\t\t// LSR\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1LSR(rs, rm);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00000040:\n\t\t\t\t\t// ASR\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1ASR(rs, rm);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00000060:\n\t\t\t\t\t// ROR\n\t\t\t\t\tshiftOp = this.armCompiler.constructAddressingMode1ROR(rs, rm);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar immediate = (instruction & 0x00000F80) >> 7;\n\t\t\t\tshiftOp = this.barrelShiftImmediate(shiftType, immediate, rm);\n\t\t\t}\n\n\t\t\tswitch (opcode) {\n\t\t\tcase 0x00000000:\n\t\t\t\t// AND\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructANDS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructAND(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00200000:\n\t\t\t\t// EOR\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructEORS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructEOR(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00400000:\n\t\t\t\t// SUB\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructSUBS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructSUB(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00600000:\n\t\t\t\t// RSB\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructRSBS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructRSB(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00800000:\n\t\t\t\t// ADD\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructADDS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructADD(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00A00000:\n\t\t\t\t// ADC\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructADCS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructADC(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00C00000:\n\t\t\t\t// SBC\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructSBCS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructSBC(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x00E00000:\n\t\t\t\t// RSC\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructRSCS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructRSC(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x01000000:\n\t\t\t\t// TST\n\t\t\t\top = this.armCompiler.constructTST(rd, rn, shiftOp, condOp);\n\t\t\t\tbreak;\n\t\t\tcase 0x01200000:\n\t\t\t\t// TEQ\n\t\t\t\top = this.armCompiler.constructTEQ(rd, rn, shiftOp, condOp);\n\t\t\t\tbreak;\n\t\t\tcase 0x01400000:\n\t\t\t\t// CMP\n\t\t\t\top = this.armCompiler.constructCMP(rd, rn, shiftOp, condOp);\n\t\t\t\tbreak;\n\t\t\tcase 0x01600000:\n\t\t\t\t// CMN\n\t\t\t\top = this.armCompiler.constructCMN(rd, rn, shiftOp, condOp);\n\t\t\t\tbreak;\n\t\t\tcase 0x01800000:\n\t\t\t\t// ORR\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructORRS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructORR(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x01A00000:\n\t\t\t\t// MOV\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructMOVS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructMOV(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x01C00000:\n\t\t\t\t// BIC\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructBICS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructBIC(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0x01E00000:\n\t\t\t\t// MVN\n\t\t\t\tif (s) {\n\t\t\t\t\top = this.armCompiler.constructMVNS(rd, rn, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructMVN(rd, rn, shiftOp, condOp);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\top.writesPC = rd == ARMRegs.PC;\n\t\t}\n\t} else if ((instruction & 0x0FB00FF0) == 0x01000090) {\n\t\t// Single data swap\n\t\tvar rm = instruction & 0x0000000F;\n\t\tvar rd = (instruction >> 12) & 0x0000000F;\n\t\tvar rn = (instruction >> 16) & 0x0000000F;\n\t\tif (instruction & 0x00400000) {\n\t\t\top = this.armCompiler.constructSWPB(rd, rn, rm, condOp);\n\t\t} else {\n\t\t\top = this.armCompiler.constructSWP(rd, rn, rm, condOp);\n\t\t}\n\t\top.writesPC = rd == ARMRegs.PC;\n\t} else {\n\t\tswitch (i) {\n\t\tcase 0x00000000:\n\t\t\tif ((instruction & 0x010000F0) == 0x00000090) {\n\t\t\t\t// Multiplies\n\t\t\t\tvar rd = (instruction & 0x000F0000) >> 16;\n\t\t\t\tvar rn = (instruction & 0x0000F000) >> 12;\n\t\t\t\tvar rs = (instruction & 0x00000F00) >> 8;\n\t\t\t\tvar rm = instruction & 0x0000000F;\n\t\t\t\tswitch (instruction & 0x00F00000) {\n\t\t\t\tcase 0x00000000:\n\t\t\t\t\t// MUL\n\t\t\t\t\top = this.armCompiler.constructMUL(rd, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00100000:\n\t\t\t\t\t// MULS\n\t\t\t\t\top = this.armCompiler.constructMULS(rd, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00200000:\n\t\t\t\t\t// MLA\n\t\t\t\t\top = this.armCompiler.constructMLA(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak\n\t\t\t\tcase 0x00300000:\n\t\t\t\t\t// MLAS\n\t\t\t\t\top = this.armCompiler.constructMLAS(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00800000:\n\t\t\t\t\t// UMULL\n\t\t\t\t\top = this.armCompiler.constructUMULL(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00900000:\n\t\t\t\t\t// UMULLS\n\t\t\t\t\top = this.armCompiler.constructUMULLS(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00A00000:\n\t\t\t\t\t// UMLAL\n\t\t\t\t\top = this.armCompiler.constructUMLAL(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00B00000:\n\t\t\t\t\t// UMLALS\n\t\t\t\t\top = this.armCompiler.constructUMLALS(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00C00000:\n\t\t\t\t\t// SMULL\n\t\t\t\t\top = this.armCompiler.constructSMULL(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00D00000:\n\t\t\t\t\t// SMULLS\n\t\t\t\t\top = this.armCompiler.constructSMULLS(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00E00000:\n\t\t\t\t\t// SMLAL\n\t\t\t\t\top = this.armCompiler.constructSMLAL(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 0x00F00000:\n\t\t\t\t\t// SMLALS\n\t\t\t\t\top = this.armCompiler.constructSMLALS(rd, rn, rs, rm, condOp);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\top.writesPC = rd == ARMRegs.PC;\n\t\t\t} else {\n\t\t\t\t// Halfword and signed byte data transfer\n\t\t\t\tvar load = instruction & 0x00100000;\n\t\t\t\tvar rd = (instruction & 0x0000F000) >> 12;\n\t\t\t\tvar hiOffset = (instruction & 0x00000F00) >> 4;\n\t\t\t\tvar loOffset = rm = instruction & 0x0000000F;\n\t\t\t\tvar h = instruction & 0x00000020;\n\t\t\t\tvar s = instruction & 0x00000040;\n\t\t\t\tvar w = instruction & 0x00200000;\n\t\t\t\tvar i = instruction & 0x00400000;\n\n\t\t\t\tvar address : AddressFunction;\n\t\t\t\tif (i) {\n\t\t\t\t\tvar immediate = loOffset | hiOffset;\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode23Immediate(instruction, immediate, condOp);\n\t\t\t\t} else {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode23Register(instruction, rm, condOp);\n\t\t\t\t}\n\t\t\t\taddress.writesPC = !!w && rn == ARMRegs.PC;\n\n\t\t\t\tif ((instruction & 0x00000090) == 0x00000090) {\n\t\t\t\t\tif (load) {\n\t\t\t\t\t\t// Load [signed] halfword/byte\n\t\t\t\t\t\tif (h) {\n\t\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\t\t// LDRSH\n\t\t\t\t\t\t\t\top = this.armCompiler.constructLDRSH(rd, address, condOp);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// LDRH\n\t\t\t\t\t\t\t\top = this.armCompiler.constructLDRH(rd, address, condOp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (s) {\n\t\t\t\t\t\t\t\t// LDRSB\n\t\t\t\t\t\t\t\top = this.armCompiler.constructLDRSB(rd, address, condOp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (!s && h) {\n\t\t\t\t\t\t// STRH\n\t\t\t\t\t\top = this.armCompiler.constructSTRH(rd, address, condOp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\top.writesPC = rd == ARMRegs.PC || address.writesPC;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x04000000:\n\t\tcase 0x06000000:\n\t\t\t// LDR/STR\n\t\t\tvar rd = (instruction & 0x0000F000) >> 12;\n\t\t\tvar load = instruction & 0x00100000;\n\t\t\tvar b = instruction & 0x00400000;\n\t\t\tvar i = instruction & 0x02000000;\n\t\t\t// test for UDF instruction\n\t\t\tif ((instruction & 0xfff000f0) == (0xe7f000f0|0)) {\n\t\t\t\tvar immediate = instruction & 0x0000000f; // TODO: full range\n\t\t\t\tthrow new EmuHalt(\"Program exited (\" + immediate + \")\");\n\t\t\t}\n\n\t\t\tvar address : AddressFunction = function() {\n\t\t\t\tthrow new EmuHalt(\"Unimplemented memory access: 0x\" + instruction.toString(16));\n\t\t\t};\n\t\t\tif (~instruction & 0x01000000) {\n\t\t\t\t// Clear the W bit if the P bit is clear--we don't support memory translation, so these turn into regular accesses\n\t\t\t\tinstruction &= 0xFFDFFFFF;\n\t\t\t}\n\t\t\tif (i) {\n\t\t\t\t// Register offset\n\t\t\t\tvar rm = instruction & 0x0000000F;\n\t\t\t\tvar shiftType = instruction & 0x00000060;\n\t\t\t\tvar shiftImmediate = (instruction & 0x00000F80) >> 7;\n\t\t\t\t\n\t\t\t\tif (shiftType || shiftImmediate) {\n\t\t\t\t\tshiftOp = this.barrelShiftImmediate(shiftType, shiftImmediate, rm);\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode2RegisterShifted(instruction, shiftOp, condOp);\n\t\t\t\t} else {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode23Register(instruction, rm, condOp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Immediate\n\t\t\t\tvar offset = instruction & 0x00000FFF;\n\t\t\t\taddress = this.armCompiler.constructAddressingMode23Immediate(instruction, offset, condOp);\n\t\t\t}\n\t\t\tif (load) {\n\t\t\t\tif (b) {\n\t\t\t\t\t// LDRB\n\t\t\t\t\top = this.armCompiler.constructLDRB(rd, address, condOp);\n\t\t\t\t} else {\n\t\t\t\t\t// LDR\n\t\t\t\t\top = this.armCompiler.constructLDR(rd, address, condOp);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (b) {\n\t\t\t\t\t// STRB\n\t\t\t\t\top = this.armCompiler.constructSTRB(rd, address, condOp);\n\t\t\t\t} else {\n\t\t\t\t\t// STR\n\t\t\t\t\top = this.armCompiler.constructSTR(rd, address, condOp);\n\t\t\t\t}\n\t\t\t}\n\t\t\top.writesPC = load && (rd == ARMRegs.PC || address.writesPC); // SEH\n\t\t\tbreak;\n\t\tcase 0x08000000:\n\t\t\t// Block data transfer\n\t\t\tvar load = instruction & 0x00100000;\n\t\t\tvar w = instruction & 0x00200000;\n\t\t\tvar user = instruction & 0x00400000;\n\t\t\tvar u = instruction & 0x00800000;\n\t\t\tvar p = instruction & 0x01000000;\n\t\t\tvar rs = instruction & 0x0000FFFF;\n\t\t\tvar rn = (instruction & 0x000F0000) >> 16;\n\n\t\t\tvar address : AddressFunction;\n\t\t\tvar immediate = 0;\n\t\t\tvar offset = 0;\n\t\t\tvar overlap = false;\n\t\t\tif (u) {\n\t\t\t\tif (p) {\n\t\t\t\t\timmediate = 4;\n\t\t\t\t}\n\t\t\t\tfor (var m = 0x01, i = 0; i < 16; m <<= 1, ++i) {\n\t\t\t\t\tif (rs & m) {\n\t\t\t\t\t\tif (w && i == rn && !offset) {\n\t\t\t\t\t\t\trs &= ~m;\n\t\t\t\t\t\t\timmediate += 4;\n\t\t\t\t\t\t\toverlap = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\toffset += 4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!p) {\n\t\t\t\t\timmediate = 4;\n\t\t\t\t}\n\t\t\t\tfor (var m = 0x01, i = 0; i < 16; m <<= 1, ++i) {\n\t\t\t\t\tif (rs & m) {\n\t\t\t\t\t\tif (w && i == rn && !offset) {\n\t\t\t\t\t\t\trs &= ~m;\n\t\t\t\t\t\t\timmediate += 4;\n\t\t\t\t\t\t\toverlap = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\timmediate -= 4;\n\t\t\t\t\t\toffset -= 4;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (w) {\n\t\t\t\taddress = this.armCompiler.constructAddressingMode4Writeback(immediate, offset, rn, overlap);\n\t\t\t} else {\n\t\t\t\taddress = this.armCompiler.constructAddressingMode4(immediate, rn);\n\t\t\t}\n\t\t\tif (load) {\n\t\t\t\t// LDM\n\t\t\t\tif (user) {\n\t\t\t\t\top = this.armCompiler.constructLDMS(rs, address, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructLDM(rs, address, condOp);\n\t\t\t\t}\n\t\t\t\top.writesPC = !!(rs & (1 << 15));\n\t\t\t} else {\n\t\t\t\t// STM\n\t\t\t\tif (user) {\n\t\t\t\t\top = this.armCompiler.constructSTMS(rs, address, condOp);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructSTM(rs, address, condOp);\n\t\t\t\t}\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x0A000000:\n\t\t\t// Branch\n\t\t\tvar immediate = instruction & 0x00FFFFFF;\n\t\t\tif (immediate & 0x00800000) {\n\t\t\t\timmediate |= 0xFF000000;\n\t\t\t}\n\t\t\timmediate <<= 2;\n\t\t\tvar link = instruction & 0x01000000;\n\t\t\tif (link) {\n\t\t\t\top = this.armCompiler.constructBL(immediate, condOp);\n\t\t\t} else {\n\t\t\t\top = this.armCompiler.constructB(immediate, condOp);\n\t\t\t}\n\t\t\top.writesPC = true;\n\t\t\top.fixedJump = true;\n\t\t\tbreak;\n\t\tcase 0x0C000000:\n\t\t\t// Coprocessor data transfer\n\t\t\tvar load = instruction & 0x00100000;\n\t\t\tvar w = instruction & 0x00200000;\n\t\t\tvar user = instruction & 0x00400000;\n\t\t\tvar u = instruction & 0x00800000;\n\t\t\tvar p = instruction & 0x01000000;\n\t\t\tvar rn = (instruction & 0x000F0000) >> 16;\n\t\t\tvar crd = (instruction & 0x0000F000) >> 12;\n\t\t\tvar cpnum = (instruction & 0x00000F00) >> 8;\n\t\t\tvar immediate = instruction & 0x000000FF;\n\t\t\tvar cond = (instruction >> 28) & 0xf;\n\t\t\tvar condOp = this.conds[cond];\n\n\t\t\t// VPUSH, VPOP\n\t\t\tif ((instruction & 0x0fbf0f00) == 0x0d2d0a00) {\n\t\t\t\top = this.armCompiler.constructVPUSH(condOp, (crd<<1)|(user?1:0), immediate, true);\n\t\t\t}\n\t\t\telse if ((instruction & 0x0fbf0f00) == 0x0d2d0b00) {\n\t\t\t\top = this.armCompiler.constructVPUSH(condOp, ((user?16:0)|crd)*2, immediate, false);\n\t\t\t}\n\t\t\telse if ((instruction & 0x0fbf0f00) == 0x0cbd0a00) {\n\t\t\t\top = this.armCompiler.constructVPOP(condOp, (crd<<1)|(user?1:0), immediate, true);\n\t\t\t}\n\t\t\telse if ((instruction & 0x0fbf0f00) == 0x0cbd0b00) {\n\t\t\t\top = this.armCompiler.constructVPOP(condOp, ((user?16:0)|crd)*2, immediate, false);\n\t\t\t}\n\t\t\t// VLDR, VSTR\n\t\t\t// https://developer.arm.com/documentation/ddi0406/c/Application-Level-Architecture/Instruction-Details/Alphabetical-list-of-instructions/VSTR?lang=en\n\t\t\telse if ((instruction & 0x0f200f00) == 0x0d000a00) {\n\t\t\t\timmediate *= 4;\n\t\t\t\tif (!u) immediate = -immediate;\n\t\t\t\tvar overlap = false;\n\t\t\t\tvar d = (crd<<1)|(user?1:0);\n\t\n\t\t\t\tvar address : AddressFunction;\n\t\t\t\tif (w) {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode4Writeback(immediate, offset, rn, overlap);\n\t\t\t\t} else {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode4(immediate, rn);\n\t\t\t\t}\n\t\t\t\tif (load) {\n\t\t\t\t\top = this.armCompiler.constructVLDR(condOp, d, address, true);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructVSTR(condOp, d, address, true);\n\t\t\t\t}\n\t\t\t} else if ((instruction & 0x0f200f00) == 0x0d000b00) {\n\t\t\t\timmediate *= 4;\n\t\t\t\tif (!u) immediate = -immediate;\n\t\t\t\tvar overlap = false;\n\t\t\t\tvar d = ((user?16:0)|crd)*2;\n\t\n\t\t\t\tvar address : AddressFunction;\n\t\t\t\tif (w) {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode4Writeback(immediate, offset, rn, overlap);\n\t\t\t\t} else {\n\t\t\t\t\taddress = this.armCompiler.constructAddressingMode4(immediate, rn);\n\t\t\t\t}\n\t\t\t\tif (load) {\n\t\t\t\t\top = this.armCompiler.constructVLDR(condOp, d, address, false);\n\t\t\t\t} else {\n\t\t\t\t\top = this.armCompiler.constructVSTR(condOp, d, address, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x0E000000:\n\t\t\t// Coprocessor data operation/SWI\n\t\t\tif ((instruction & 0x0F000000) == 0x0F000000) {\n\t\t\t\t// SWI\n\t\t\t\tvar immediate = (instruction & 0x00FFFFFF);\n\t\t\t\top = this.armCompiler.constructSWI(immediate, condOp);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// VCVT, VCVTR, VCVT\n\t\t\t// https://developer.arm.com/documentation/ddi0406/c/Application-Level-Architecture/Instruction-Details/Alphabetical-list-of-instructions/VCVT--VCVTR--between-floating-point-and-integer--Floating-point-\n\t\t\t/*\n\t\t\tif opc2 != '000' && !(opc2 IN \"10x\") then SEE \"Related encodings\";\n\t\t\tto_integer = (opc2<2> == '1');  dp_operation = (sz == 1);\n\t\t\tif to_integer then\n\t\t\t\tunsigned = (opc2<0> == '0');  round_zero = (op == '1');\n\t\t\t\td = UInt(Vd:D);  m = if dp_operation then UInt(M:Vm) else UInt(Vm:M);\n\t\t\telse\n\t\t\t\tunsigned = (op == '0');  round_nearest = FALSE;  // FALSE selects FPSCR rounding\n\t\t\t\tm = UInt(Vm:M);  d = if dp_operation then UInt(D:Vd) else UInt(Vd:D);\n\t\t\t*/\n\t\t\telse if ((instruction & 0x0FB80E50) == 0x0EB80A40) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst opc2 = (instruction >> 16) & 0x7;\n\t\t\t\tconst Vd = (instruction >> 12) & 0xf;\n\t\t\t\tconst sz = (instruction >> 8) & 0x1;\n\t\t\t\tconst op0 = (instruction >> 7) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst Vm = instruction & 0xf;\n\t\t\t\tconst to_integer = opc2 & 0x4;\n\t\t\t\tconst dp_operation = sz != 0;\n\t\t\t\tconst unsigned = to_integer ? opc2 & 0x1 : 0;\n\t\t\t\tconst round_zero = op0 != 0;\n\t\t\t\tconst round_nearest = false;\n\t\t\t\tconst d = sz ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = sz ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\t//console.log(\"VCVT\", d, m, opc2, to_integer, dp_operation, unsigned, round_zero, round_nearest);\n\t\t\t\top = this.armCompiler.constructVCVT(condOp, d, m, to_integer, dp_operation, unsigned, round_zero, round_nearest);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// VCVT f64/f32\n\t\t\telse if ((instruction & 0x0FBF0ED0) == 0x0EB70AC0) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst Vd = (instruction >> 12) & 0xf;\n\t\t\t\tconst sz = (instruction >> 8) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst Vm = instruction & 0xf;\n\t\t\t\tconst double_to_single = sz != 0;\n\t\t\t\tconst d = sz ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = sz ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\top = this.armCompiler.constructVCVTF(condOp, d, m, double_to_single);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// 3-op floating point vector instructions (VADD, etc)\n\t\t\telse if ((instruction & 0x0FA00E10) == 0x0E200A00) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst N = (instruction >> 7) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst opcode = (instruction & 0x0F00000) >> 20;\n\t\t\t\tconst Vn = (instruction & 0x000F0000) >> 16;\n\t\t\t\tconst Vd = (instruction & 0x0000F000) >> 12;\n\t\t\t\tconst opcode2 = (instruction & 0b11100000) >> 5;\n\t\t\t\tconst Vm = instruction & 0x0000000F;\n\t\t\t\tconst sz = (instruction >> 8) & 0x1;\n\t\t\t\tconst d = sz ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = sz ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\tconst n = sz ? (N?16:0)|Vn : (Vn<<1)|(N?1:0);\n\n\t\t\t\tvar condOp = this.conds[cond];\n\t\t\t\top = this.armCompiler.constructVFP3Register(condOp, opcode, n, d, sz, opcode2, m);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// VDIV - https://developer.arm.com/documentation/ddi0597/2023-12/SIMD-FP-Instructions/VDIV--Divide-?lang=en\n\t\t\telse if ((instruction & 0x0FB00C50) == 0x0E800800) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst Vn = (instruction >> 16) & 0xf;\n\t\t\t\tconst Vd = (instruction >> 12) & 0xf;\n\t\t\t\tconst size = (instruction >> 8) & 0x3;\n\t\t\t\tconst N = (instruction >> 7) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst Vm = instruction & 0xf;\n\t\t\t\t/*\n\t\t\t\tcase size of\n\t\t\t\twhen '01' esize = 16; d = UInt(Vd:D); n = UInt(Vn:N); m = UInt(Vm:M);\n\t\t\t\twhen '10' esize = 32; d = UInt(Vd:D); n = UInt(Vn:N); m = UInt(Vm:M);\n\t\t\t\twhen '11' esize = 64; d = UInt(D:Vd); n = UInt(N:Vn); m = UInt(M:Vm);\n\t\t\t\t*/\n\t\t\t\tconst d = size==3 ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = size==3 ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\tconst n = size==3 ? (N?16:0)|Vn : (Vn<<1)|(N?1:0);\n\t\t\t\top = this.armCompiler.constructVFP3Register(condOp, 8, n, d, size==3, 0, m);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// 2-op floating point vector instructions (VCMP, etc)\n\t\t\telse if ((instruction & 0x0FBF0E50) == 0x0EB40A40) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst Vd = (instruction >> 12) & 0xf;\n\t\t\t\tconst sz = (instruction >> 8) & 0x1;\n\t\t\t\tconst E = (instruction >> 7) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst Vm = instruction & 0x0000000F;\n\t\t\t\tconst d = sz ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = sz ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\t\n\t\t\t\tvar condOp = this.conds[cond];\n\t\t\t\top = this.armCompiler.constructVCMP(condOp, d, Vd, sz, E, m, Vm);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// VCMP #0\n\t\t\telse if ((instruction & 0x0FBF0EFF) == 0x0EB50A40) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst D = (instruction >> 22) & 0x1;\n\t\t\t\tconst Vd = (instruction >> 12) & 0xf;\n\t\t\t\tconst sz = (instruction >> 8) & 0x1;\n\t\t\t\tconst E = (instruction >> 7) & 0x1;\n\t\t\t\tconst M = (instruction >> 5) & 0x1;\n\t\t\t\tconst Vm = instruction & 0x0000000F;\n\t\t\t\tconst d = sz ? (D?16:0)|Vd : (Vd<<1)|(D?1:0);\n\t\t\t\tconst m = sz ? (M?16:0)|Vm : (Vm<<1)|(M?1:0);\n\t\t\t\t\n\t\t\t\tvar condOp = this.conds[cond];\n\t\t\t\top = this.armCompiler.constructVCMP0(condOp, d, Vd, sz, E, m, Vm);\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\t// vmrs apsr_nzcv, fpscr (ignore, we always call this after CMP)\n\t\t\telse if (instruction == 0xeef1fa10) {\n\t\t\t\top = this.armCompiler.constructNOP();\n\t\t\t}\n\t\t\t// VMOV - https://developer.arm.com/documentation/ddi0406/c/Application-Level-Architecture/Instruction-Details/Alphabetical-list-of-instructions/VMOV--between-ARM-core-register-and-single-precision-register-\n\t\t\telse if ((instruction & 0x0FE00F10) == 0x0E000A10) {\n\t\t\t\tconst cond = (instruction >> 28) & 0xf;\n\t\t\t\tconst opc1 = (instruction >> 20) & 0x1;\n\t\t\t\tconst Vn = (instruction >> 16) & 0xf;\n\t\t\t\tconst Rt = (instruction >> 12) & 0xf;\n\t\t\t\tconst N = (instruction >> 7) & 0x1;\n\t\t\t\tvar condOp = this.conds[cond];\n\t\t\t\t//console.log(\"VMOV\", instruction.toString(16), opc1, Vn, Rt, N);\n\t\t\t\top = this.armCompiler.constructVMOV(condOp, opc1, (Vn<<1)|(N?1:0), Rt);\n\t\t\t}\n\t\t\t// vmov.32 dn[i], rn\n\t\t\telse if (instruction == 0xee000b10) {\n\t\t\t\top = this.armCompiler.constructVMOV(condOp, false, 0, 0);\n\t\t\t}\n\t\t\telse if (instruction == 0xee201b10) {\n\t\t\t\top = this.armCompiler.constructVMOV(condOp, false, 1, 1);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new EmuHalt('Bad opcode: 0x' + instruction.toString(16));\n\t\t}\n\t}\n\n\top.execMode = ARMMode.MODE_ARM;\n\top.fixedJump = op.fixedJump || false;\n\treturn op;\n};\n\nARMCore.prototype.compileThumb = function(instruction) {\n\tvar op = this.badOp(instruction & 0xFFFF);\n\tvar cpu = this;\n\tvar gprs = this.gprs;\n\tif ((instruction & 0xFC00) == 0x4000) {\n\t\t// Data-processing register\n\t\tvar rm = (instruction & 0x0038) >> 3;\n\t\tvar rd = instruction & 0x0007;\n\t\tswitch (instruction & 0x03C0) {\n\t\tcase 0x0000:\n\t\t\t// AND\n\t\t\top = this.thumbCompiler.constructAND(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0040:\n\t\t\t// EOR\n\t\t\top = this.thumbCompiler.constructEOR(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0080:\n\t\t\t// LSL(2)\n\t\t\top = this.thumbCompiler.constructLSL2(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x00C0:\n\t\t\t// LSR(2)\n\t\t\top = this.thumbCompiler.constructLSR2(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0100:\n\t\t\t// ASR(2)\n\t\t\top = this.thumbCompiler.constructASR2(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0140:\n\t\t\t// ADC\n\t\t\top = this.thumbCompiler.constructADC(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0180:\n\t\t\t// SBC\n\t\t\top = this.thumbCompiler.constructSBC(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x01C0:\n\t\t\t// ROR\n\t\t\top = this.thumbCompiler.constructROR(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0200:\n\t\t\t// TST\n\t\t\top = this.thumbCompiler.constructTST(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0240:\n\t\t\t// NEG\n\t\t\top = this.thumbCompiler.constructNEG(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0280:\n\t\t\t// CMP(2)\n\t\t\top = this.thumbCompiler.constructCMP2(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x02C0:\n\t\t\t// CMN\n\t\t\top = this.thumbCompiler.constructCMN(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0300:\n\t\t\t// ORR\n\t\t\top = this.thumbCompiler.constructORR(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0340:\n\t\t\t// MUL\n\t\t\top = this.thumbCompiler.constructMUL(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x0380:\n\t\t\t// BIC\n\t\t\top = this.thumbCompiler.constructBIC(rd, rm);\n\t\t\tbreak;\n\t\tcase 0x03C0:\n\t\t\t// MVN\n\t\t\top = this.thumbCompiler.constructMVN(rd, rm);\n\t\t\tbreak;\n\t\t}\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xFC00) == 0x4400) {\n\t\t// Special data processing / branch/exchange instruction set\n\t\tvar rm = (instruction & 0x0078) >> 3;\n\t\tvar rn = instruction & 0x0007;\n\t\tvar h1 = instruction & 0x0080;\n\t\tvar rd = rn | (h1 >> 4);\n\t\tswitch (instruction & 0x0300) {\n\t\tcase 0x0000:\n\t\t\t// ADD(4)\n\t\t\top = this.thumbCompiler.constructADD4(rd, rm)\n\t\t\top.writesPC = rd == ARMRegs.PC;\n\t\t\tbreak;\n\t\tcase 0x0100:\n\t\t\t// CMP(3)\n\t\t\top = this.thumbCompiler.constructCMP3(rd, rm);\n\t\t\top.writesPC = false;\n\t\t\tbreak;\n\t\tcase 0x0200:\n\t\t\t// MOV(3)\n\t\t\top = this.thumbCompiler.constructMOV3(rd, rm);\n\t\t\top.writesPC = rd == ARMRegs.PC;\n\t\t\tbreak;\n\t\tcase 0x0300:\n\t\t\t// BX\n\t\t\top = this.thumbCompiler.constructBX(rd, rm);\n\t\t\top.writesPC = true;\n\t\t\top.fixedJump = false;\n\t\t\tbreak;\n\t\t}\n\t} else if ((instruction & 0xF800) == 0x1800) {\n\t\t// Add/subtract\n\t\tvar rm = (instruction & 0x01C0) >> 6;\n\t\tvar rn = (instruction & 0x0038) >> 3;\n\t\tvar rd = instruction & 0x0007;\n\t\tswitch (instruction & 0x0600) {\n\t\tcase 0x0000:\n\t\t\t// ADD(3)\n\t\t\top = this.thumbCompiler.constructADD3(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0200:\n\t\t\t// SUB(3)\n\t\t\top = this.thumbCompiler.constructSUB3(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0400:\n\t\t\tvar immediate = (instruction & 0x01C0) >> 6;\n\t\t\tif (immediate) {\n\t\t\t\t// ADD(1)\n\t\t\t\top = this.thumbCompiler.constructADD1(rd, rn, immediate);\n\t\t\t} else {\n\t\t\t\t// MOV(2)\n\t\t\t\top = this.thumbCompiler.constructMOV2(rd, rn, rm);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x0600:\n\t\t\t// SUB(1)\n\t\t\tvar immediate = (instruction & 0x01C0) >> 6;\n\t\t\top = this.thumbCompiler.constructSUB1(rd, rn, immediate);\n\t\t\tbreak;\n\t\t}\n\t\top.writesPC = false;\n\t} else if (!(instruction & 0xE000)) {\n\t\t// Shift by immediate\n\t\tvar rd = instruction & 0x0007;\n\t\tvar rm = (instruction & 0x0038) >> 3;\n\t\tvar immediate = (instruction & 0x07C0) >> 6;\n\t\tswitch (instruction & 0x1800) {\n\t\tcase 0x0000:\n\t\t\t// LSL(1)\n\t\t\top = this.thumbCompiler.constructLSL1(rd, rm, immediate);\n\t\t\tbreak;\n\t\tcase 0x0800:\n\t\t\t// LSR(1)\n\t\t\top = this.thumbCompiler.constructLSR1(rd, rm, immediate);\n\t\t\tbreak;\n\t\tcase 0x1000:\n\t\t\t// ASR(1)\n\t\t\top = this.thumbCompiler.constructASR1(rd, rm, immediate);\n\t\t\tbreak;\n\t\tcase 0x1800:\n\t\t\tbreak;\n\t\t}\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xE000) == 0x2000) {\n\t\t// Add/subtract/compare/move immediate\n\t\tvar immediate = instruction & 0x00FF;\n\t\tvar rn = (instruction & 0x0700) >> 8;\n\t\tswitch (instruction & 0x1800) {\n\t\tcase 0x0000:\n\t\t\t// MOV(1)\n\t\t\top = this.thumbCompiler.constructMOV1(rn, immediate);\n\t\t\tbreak;\n\t\tcase 0x0800:\n\t\t\t// CMP(1)\n\t\t\top = this.thumbCompiler.constructCMP1(rn, immediate);\n\t\t\tbreak;\n\t\tcase 0x1000:\n\t\t\t// ADD(2)\n\t\t\top = this.thumbCompiler.constructADD2(rn, immediate);\n\t\t\tbreak;\n\t\tcase 0x1800:\n\t\t\t// SUB(2)\n\t\t\top = this.thumbCompiler.constructSUB2(rn, immediate);\n\t\t\tbreak;\n\t\t}\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xF800) == 0x4800) {\n\t\t// LDR(3)\n\t\tvar rd = (instruction & 0x0700) >> 8;\n\t\tvar immediate = (instruction & 0x00FF) << 2;\n\t\top = this.thumbCompiler.constructLDR3(rd, immediate);\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xF000) == 0x5000) {\n\t\t// Load and store with relative offset\n\t\tvar rd = instruction & 0x0007;\n\t\tvar rn = (instruction & 0x0038) >> 3;\n\t\tvar rm = (instruction & 0x01C0) >> 6;\n\t\tvar opcode = instruction & 0x0E00;\n\t\tswitch (opcode) {\n\t\tcase 0x0000:\n\t\t\t// STR(2)\n\t\t\top = this.thumbCompiler.constructSTR2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0200:\n\t\t\t// STRH(2)\n\t\t\top = this.thumbCompiler.constructSTRH2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0400:\n\t\t\t// STRB(2)\n\t\t\top = this.thumbCompiler.constructSTRB2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0600:\n\t\t\t// LDRSB\n\t\t\top = this.thumbCompiler.constructLDRSB(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0800:\n\t\t\t// LDR(2)\n\t\t\top = this.thumbCompiler.constructLDR2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0A00:\n\t\t\t// LDRH(2)\n\t\t\top = this.thumbCompiler.constructLDRH2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0C00:\n\t\t\t// LDRB(2)\n\t\t\top = this.thumbCompiler.constructLDRB2(rd, rn, rm);\n\t\t\tbreak;\n\t\tcase 0x0E00:\n\t\t\t// LDRSH\n\t\t\top = this.thumbCompiler.constructLDRSH(rd, rn, rm);\n\t\t\tbreak;\n\t\t}\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xE000) == 0x6000) {\n\t\t// Load and store with immediate offset\n\t\tvar rd = instruction & 0x0007;\n\t\tvar rn = (instruction & 0x0038) >> 3;\n\t\tvar immediate = (instruction & 0x07C0) >> 4;\n\t\tvar b = instruction & 0x1000;\n\t\tif (b) {\n\t\t\timmediate >>= 2;\n\t\t}\n\t\tvar load = instruction & 0x0800;\n\t\tif (load) {\n\t\t\tif (b) {\n\t\t\t\t// LDRB(1)\n\t\t\t\top = this.thumbCompiler.constructLDRB1(rd, rn, immediate);\n\t\t\t} else {\n\t\t\t\t// LDR(1)\n\t\t\t\top = this.thumbCompiler.constructLDR1(rd, rn, immediate);\n\t\t\t}\n\t\t} else {\n\t\t\tif (b) {\n\t\t\t\t// STRB(1)\n\t\t\t\top = this.thumbCompiler.constructSTRB1(rd, rn, immediate);\n\t\t\t} else {\n\t\t\t\t// STR(1)\n\t\t\t\top = this.thumbCompiler.constructSTR1(rd, rn, immediate);\n\t\t\t}\n\t\t}\n\t\top.writesPC = false;\n\t} else if ((instruction & 0xF600) == 0xB400) {\n\t\t// Push and pop registers\n\t\tvar r = !!(instruction & 0x0100);\n\t\tvar rs = instruction & 0x00FF;\n\t\tif (instruction & 0x0800) {\n\t\t\t// POP\n\t\t\top = this.thumbCompiler.constructPOP(rs, r);\n\t\t\top.writesPC = r;\n\t\t\top.fixedJump = false;\n\t\t} else {\n\t\t\t// PUSH\n\t\t\top = this.thumbCompiler.constructPUSH(rs, r);\n\t\t\top.writesPC = false;\n\t\t}\n\t} else if (instruction & 0x8000) {\n\t\tswitch (instruction & 0x7000) {\n\t\tcase 0x0000:\n\t\t\t// Load and store halfword\n\t\t\tvar rd = instruction & 0x0007;\n\t\t\tvar rn = (instruction & 0x0038) >> 3;\n\t\t\tvar immediate = (instruction & 0x07C0) >> 5;\n\t\t\tif (instruction & 0x0800) {\n\t\t\t\t// LDRH(1)\n\t\t\t\top = this.thumbCompiler.constructLDRH1(rd, rn, immediate);\n\t\t\t} else {\n\t\t\t\t// STRH(1)\n\t\t\t\top = this.thumbCompiler.constructSTRH1(rd, rn, immediate);\n\t\t\t}\n\t\t\top.writesPC = false;\n\t\t\tbreak;\n\t\tcase 0x1000:\n\t\t\t// SP-relative load and store\n\t\t\tvar rd = (instruction & 0x0700) >> 8;\n\t\t\tvar immediate = (instruction & 0x00FF) << 2;\n\t\t\tvar load = instruction & 0x0800;\n\t\t\tif (load) {\n\t\t\t\t// LDR(4)\n\t\t\t\top = this.thumbCompiler.constructLDR4(rd, immediate);\n\t\t\t} else {\n\t\t\t\t// STR(3)\n\t\t\t\top = this.thumbCompiler.constructSTR3(rd, immediate);\n\t\t\t}\n\t\t\top.writesPC = false;\n\t\t\tbreak;\n\t\tcase 0x2000:\n\t\t\t// Load address\n\t\t\tvar rd = (instruction & 0x0700) >> 8;\n\t\t\tvar immediate = (instruction & 0x00FF) << 2;\n\t\t\tif (instruction & 0x0800) {\n\t\t\t\t// ADD(6)\n\t\t\t\top = this.thumbCompiler.constructADD6(rd, immediate);\n\t\t\t} else {\n\t\t\t\t// ADD(5)\n\t\t\t\top = this.thumbCompiler.constructADD5(rd, immediate);\n\t\t\t}\n\t\t\top.writesPC = false;\n\t\t\tbreak;\n\t\tcase 0x3000:\n\t\t\t// Miscellaneous\n\t\t\tif (!(instruction & 0x0F00)) {\n\t\t\t\t// Adjust stack pointer\n\t\t\t\t// ADD(7)/SUB(4)\n\t\t\t\tvar b = instruction & 0x0080;\n\t\t\t\tvar immediate = (instruction & 0x7F) << 2;\n\t\t\t\tif (b) {\n\t\t\t\t\timmediate = -immediate;\n\t\t\t\t}\n\t\t\t\top = this.thumbCompiler.constructADD7(immediate)\n\t\t\t\top.writesPC = false;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x4000:\n\t\t\t// Multiple load and store\n\t\t\tvar rn = (instruction & 0x0700) >> 8;\n\t\t\tvar rs = instruction & 0x00FF;\n\t\t\tif (instruction & 0x0800) {\n\t\t\t\t// LDMIA\n\t\t\t\top = this.thumbCompiler.constructLDMIA(rn, rs);\n\t\t\t} else {\n\t\t\t\t// STMIA\n\t\t\t\top = this.thumbCompiler.constructSTMIA(rn, rs);\n\t\t\t}\n\t\t\top.writesPC = false;\n\t\t\tbreak;\n\t\tcase 0x5000:\n\t\t\t// Conditional branch\n\t\t\tvar cond = (instruction & 0x0F00) >> 8;\n\t\t\tvar immediate = (instruction & 0x00FF);\n\t\t\tif (cond == 0xF) {\n\t\t\t\t// SWI\n\t\t\t\top = this.thumbCompiler.constructSWI(immediate);\n\t\t\t\top.writesPC = false;\n\t\t\t} else {\n\t\t\t\t// B(1)\n\t\t\t\tif (instruction & 0x0080) {\n\t\t\t\t\timmediate |= 0xFFFFFF00;\n\t\t\t\t}\n\t\t\t\timmediate <<= 1;\n\t\t\t\tvar condOp = this.conds[cond];\n\t\t\t\top = this.thumbCompiler.constructB1(immediate, condOp);\n\t\t\t\top.writesPC = true;\n\t\t\t\top.fixedJump = true;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x6000:\n\t\tcase 0x7000:\n\t\t\t// BL(X)\n\t\t\tvar immediate = instruction & 0x07FF;\n\t\t\tvar h = instruction & 0x1800;\n\t\t\tswitch (h) {\n\t\t\tcase 0x0000:\n\t\t\t\t// B(2)\n\t\t\t\tif (immediate & 0x0400) {\n\t\t\t\t\timmediate |= 0xFFFFF800;\n\t\t\t\t}\n\t\t\t\timmediate <<= 1;\n\t\t\t\top = this.thumbCompiler.constructB2(immediate);\n\t\t\t\top.writesPC = true;\n\t\t\t\top.fixedJump = true;\n\t\t\t\tbreak;\n\t\t\tcase 0x0800:\n\t\t\t\t// BLX (ARMv5T)\n\t\t\t\t/*op = function() {\n\t\t\t\t\tvar pc = gprs[ARMRegs.PC];\n\t\t\t\t\tgprs[ARMRegs.PC] = (gprs[ARMRegs.LR] + (immediate << 1)) & 0xFFFFFFFC;\n\t\t\t\t\tgprs[ARMRegs.LR] = pc - 1;\n\t\t\t\t\tcpu.switchExecMode(cpu.MODE_ARM);\n\t\t\t\t}*/\n\t\t\t\tbreak;\n\t\t\tcase 0x1000:\n\t\t\t\t// BL(1)\n\t\t\t\tif (immediate & 0x0400) {\n\t\t\t\t\timmediate |= 0xFFFFFC00;\n\t\t\t\t}\n\t\t\t\timmediate <<= 12;\n\t\t\t\top = this.thumbCompiler.constructBL1(immediate);\n\t\t\t\top.writesPC = false;\n\t\t\t\tbreak;\n\t\t\tcase 0x1800:\n\t\t\t\t// BL(2)\n\t\t\t\top = this.thumbCompiler.constructBL2(immediate);\n\t\t\t\top.writesPC = true;\n\t\t\t\top.fixedJump = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new EmuHalt(\"Undefined instruction: 0x\" + instruction.toString(16));\n\t\t}\n\t} else {\n\t\tthrow new EmuHalt('Bad opcode: 0x' + instruction.toString(16));\n\t}\n\n\top.execMode = ARMMode.MODE_THUMB;\n\top.fixedJump = op.fixedJump || false;\n\t//console.log(hex(instruction), op);\n\treturn op;\n};\n\n///////////////////////////////////////////////////////////////////////////\n\ntype ARMBus = Bus & Bus32;\n\nexport class ARM32CPU implements CPU, InstructionBased, ARMMMUInterface, ARMIRQInterface, SavesState<ARMCoreState> {\n\n\tcore : ARMCoreType;\n\tbus : ARMBus;\n\tmemory : ARMMemoryRegion[];\n\tf64arr = new Float64Array(1);\n\tf32arr = new Float32Array(this.f64arr.buffer);\n\ti32arr = new Int32Array(this.f64arr.buffer);\n\n\tBASE_OFFSET = 24;\n\tOFFSET_MASK = 0x00FFFFFF;\n\n\tconstructor() {\n\t\tthis.core = new ARMCore();\n\t\tthis.core.irq = this;\n\t\tthis.core.mmu = this;\n\t\tthis.resetMemory();\n\t}\n\tresetMemory() {\n\t\tthis.memory = []; // TODO\n\t\tfor (var i=0; i<256; i++) {\n\t\t\t// TODO: constant\n\t\t\tconst bits = 10;\n\t\t\tthis.memory[i] = {\n\t\t\t\tPAGE_MASK: (2 << bits) - 1,\n\t\t\t\tICACHE_PAGE_BITS: bits,\n\t\t\t\ticache: new Array() // size >> (bits + 1))\n\t\t\t }; // TODO?\n\t\t}\n\t}\n\tadvanceInsn() : number {\n\t\tvar n = this.core.cycles;\n\t\tthis.core.step();\n\t\tn -= this.core.cycles;\n\t\treturn n > 0 ? n : 1;\n\t}\n\tgetPC(): number {\n\t\treturn this.core.gprs[15] - this.core.instructionWidth;\n\t}\n\tgetSP(): number {\n\t\treturn this.core.gprs[13];\n\t}\n\tisStable(): boolean {\n\t\treturn true; // TODO?\n\t}\n\tconnectMemoryBus(bus: ARMBus): void {\n\t\tthis.bus = bus;\n\t}\n\treset(): void {\n\t\tthis.resetMemory();\n\t\tconst resetVector = this.load32(0);\n\t\tthis.core.resetCPU(resetVector);\n\t}\n\tsaveState() : ARMCoreState {\n\t\treturn this.core.freeze();\n\t}\n\tloadState(state: ARMCoreState): void {\n\t\tthis.core.defrost(state);\n\t}\n\n\tload8(a: number): number {\n\t\treturn (this.bus.read(a) << 24) >> 24;\n\t}\n\tloadU8(a: number): number {\n\t\treturn this.bus.read(a) & 0xff;\n\t}\n\tload16(a: number): number {\n\t\treturn (this.loadU16(a) << 16) >> 16;\n\t}\n\tloadU16(a: number): number {\n\t\treturn this.bus.read(a) | (this.bus.read(a+1) << 8);\n\t}\n\tload32(a: number): number {\n\t\tvar v = this.bus.read32(a);\n\t\treturn v;\n\t}\n\t// TODO:         memory.invalidatePage(maskedOffset);\n\tstore8(a: number, v: number): void {\n\t\tthis.bus.write(a, v & 0xff);\n\t}\n\tstore16(a: number, v: number): void {\n\t\tthis.bus.write(a, v & 0xff);\n\t\tthis.bus.write(a+1, (v >> 8) & 0xff);\n\t}\n\tstore32(a: number, v: number): void {\n\t\tthis.bus.write32(a, v);\n\t}\n\t// TODO\n\twait(a: number): void {\n\t\t++this.core.cycles;\n\t}\n\twait32(a: number): void {\n\t\t++this.core.cycles;\n\t}\n\twaitSeq32(a: number): void {\n\t\t++this.core.cycles;\n\t}\n\twaitMul(rs: number): void {\n        if (((rs & 0xFFFFFF00) == 0xFFFFFF00) || !(rs & 0xFFFFFF00)) {\n\t\t\tthis.core.cycles += 1;\n\t\t} else if (((rs & 0xFFFF0000) == 0xFFFF0000) || !(rs & 0xFFFF0000)) {\n\t\t\t\tthis.core.cycles += 2;\n\t\t} else if (((rs & 0xFF000000) == 0xFF000000) || !(rs & 0xFF000000)) {\n\t\t\t\tthis.core.cycles += 3;\n\t\t} else {\n\t\t\t\tthis.core.cycles += 4;\n\t\t}\n\t}\n\twaitMulti32(a: number, total: number): void {\n\t\tthis.core.cycles += 2;\n\t}\n\twaitPrefetch(a: number): void {\n\t\t++this.core.cycles;\n\t}\n\twaitPrefetch32(a: number): void {\n\t\t++this.core.cycles;\n\t}\n\taddressToPage(region: number, address: number) : number {\n        return address >> this.memory[region].ICACHE_PAGE_BITS;\n\t}\n\taccessPage(region: number, pageId: number): ARMMemoryPage {\n\t\tvar memory = this.memory[region];\n\t\tvar page = memory.icache[pageId];\n\t\tif (!page || page.invalid) {\n\t\t\t\tpage = {\n\t\t\t\t\t\tthumb: new Array(1 << (memory.ICACHE_PAGE_BITS)),\n\t\t\t\t\t\tarm: new Array(1 << memory.ICACHE_PAGE_BITS - 1),\n\t\t\t\t\t\tinvalid: false\n\t\t\t\t}\n\t\t\t\tmemory.icache[pageId] = page;\n\t\t}\n\t\treturn page;\n\t}\n\n\tswi(opcode: number): void {\n\t\tthis.core.raiseTrap();\n\t}\n\tswi32(opcode: number): void {\n        this.swi(opcode >> 16);\n\t}\n\tclear() : void {\n\t}\n\tupdateTimers() : void {\n\t}\n\ttestIRQ() : void {\n\t}\n\n\tisThumb() : boolean {\n\t\treturn this.core.instructionWidth == 2;\n\t}\n\tgetDebugTree() {\n\t\treturn {\n\t\t\tstate: this.saveState(),\n\t\t\tmmu: this.core.mmu\n\t\t};\n\t}\n}\n", "/*\n * Copyright (c) 2024 Steven E. Hugg\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { ARM32CPU, ARMCoreState } from \"../common/cpu/ARM\";\nimport { BasicScanlineMachine, Bus32, HasSerialIO, SerialEvent, SerialIOInterface } from \"../common/devices\";\nimport { newAddressDecoder, Keys, makeKeycodeMap, newKeyboardHandler, EmuHalt } from \"../common/emu\";\nimport { Debuggable, EmuState } from \"../common/baseplatform\";\nimport { hex, lpad } from \"../common/util\";\n\nvar GBA_KEYCODE_MAP = makeKeycodeMap([\n  [Keys.A,     0, 0x1],\n  [Keys.B,     0, 0x2],\n  [Keys.GP_A,  0, 0x1],\n  [Keys.GP_B,  0, 0x2],\n  [Keys.SELECT,0, 0x4],\n  [Keys.START ,0, 0x8],\n  [Keys.RIGHT, 0, 0x10],\n  [Keys.LEFT,  0, 0x20],\n  [Keys.UP,    0, 0x40],\n  [Keys.DOWN,  0, 0x80],\n]);\n\nconst RAM_START =        0x0;\nconst RAM_SIZE  =   0x100000;\nconst ROM_BASE  =        0x0;\nconst IO_START =   0x4000000;\nconst IO_SIZE  =       0x100;\nconst MAX_SERIAL_CHARS = 1000000;\n\nconst CPU_FREQ = 4000000; // 4 MHz\n\nconst ILLEGAL_OPCODE = 0xedededed;\n\nexport class ARM32Machine extends BasicScanlineMachine\n  implements Debuggable, HasSerialIO, Bus32 {\n\n  cpuFrequency = CPU_FREQ; // MHz\n  canvasWidth = 160;\n  numTotalScanlines = 256;\n  numVisibleScanlines = 128;\n  cpuCyclesPerLine = Math.floor(CPU_FREQ / (256*60));\n  defaultROMSize = RAM_SIZE - ROM_BASE;\n  sampleRate = 1;\n  \n  cpu: ARM32CPU = new ARM32CPU();\n  ram = new Uint8Array(RAM_SIZE);\n  ram16 = new Uint16Array(this.ram.buffer);\n  ram32 = new Uint32Array(this.ram.buffer);\n  pixels32 : Uint32Array;\n  pixels8 : Uint8Array;\n  rombase : number = ROM_BASE;\n  brightness : number = 255;\n  serial : SerialIOInterface;\n  serialOut : SerialEvent[];\n  serialIn : SerialEvent[];\n  ioregs = new Uint8Array(IO_SIZE);\n  ioregs32 = new Uint32Array(this.ioregs.buffer);\n\n  constructor() {\n    super();\n    this.connectCPUMemoryBus(this);\n    this.handler = newKeyboardHandler(this.inputs, GBA_KEYCODE_MAP);\n  }\n\n  connectVideo(pixels:Uint32Array) : void {\n    super.connectVideo(pixels);\n    this.pixels32 = pixels;\n    this.pixels8 = new Uint8Array(pixels.buffer);\n  }\n\n  connectSerialIO(serial: SerialIOInterface) {\n    this.serial = serial;\n  }\n\n  loadROM(rom: Uint8Array) {\n    super.loadROM(rom);\n  }\n\n  reset() {\n    this.ram.fill(0);\n    if (this.rom) {\n      this.ram.set(this.rom, this.rombase);\n    }\n    super.reset();\n    this.serialOut = [];\n    this.serialIn = [];\n  }\n\n  // TODO: 32-bit bus?\n\n  read = newAddressDecoder([\n    [RAM_START, RAM_START+RAM_SIZE-1, RAM_SIZE-1, (a) => {\n      return this.ram[a];\n    }],\n    [IO_START, IO_START+IO_SIZE-1, IO_SIZE-1, (a, v) => {\n      return this.readIO(a);\n    }],\n  ], {defaultval: ILLEGAL_OPCODE & 0xff});\n\n  write = newAddressDecoder([\n    [RAM_START, RAM_START+RAM_SIZE-1, RAM_SIZE-1, (a, v) => {\n      this.ram[a] = v;\n    }],\n    [IO_START, IO_START+IO_SIZE-1, IO_SIZE-1, (a, v) => {\n      this.writeIO(a, v);\n    }],\n  ]);\n\n  read32 = (a) => {\n    if (a >= RAM_START && a < RAM_SIZE && (a & 3) == 0) {\n      return this.ram32[a >> 2];\n    } else {\n      return this.read(a) | (this.read(a+1)<<8) | (this.read(a+2)<<16) | (this.read(a+3)<<24);\n    }\n  };\n\n  write32 = (a, v) => {\n    if (a >= RAM_START && a < RAM_SIZE && (a & 3) == 0) {\n      this.ram32[a >> 2] = v;\n    } else {\n      this.write(a, v & 0xff);\n      this.write(a+1, (v>>8) & 0xff);\n      this.write(a+2, (v>>16) & 0xff);\n      this.write(a+3, (v>>24) & 0xff);\n    }\n  }\n\n  readAddress(a : number) : number {\n    if (a >= RAM_START && a < RAM_START+RAM_SIZE) return this.read(a);\n    else return ILLEGAL_OPCODE;\n  }\n\n  readIO(a : number) : number {\n    switch (a) {\n      case 0x0:\n        return this.inputs[0];\n      case 0x20:\n        return this.getRasterY() & 0xff;\n      case 0x21:\n        return this.getRasterY() >> 8;\n      case 0x24:\n        return this.getRasterX();\n      case 0x25:\n        return this.getRasterX() >> 8;\n      case 0x40:\n        return (this.serial.byteAvailable() ? 0x80 : 0) | (this.serial.clearToSend() ? 0x40 : 0);\n      case 0x44:\n        let evin = this.serialIn.shift();\n        if (evin != null) {\n          this.serialOut.push(evin);\n          return evin.value;\n        } else\n          return 0;\n      default:\n        return 0;\n    }\n  }\n\n  writeIO(a : number, v : number) : void {\n    this.ioregs[a] = v;\n    switch (a) {\n      case 0x48:\n        if (this.serialOut.length < MAX_SERIAL_CHARS) {\n          this.serialOut.push({op:'write', value:v, nbits:8});\n        }\n        break;\n      }\n  }\n\n  startScanline() {\n  }\n\n  drawScanline() {\n  }\n  \n  postFrame() {\n    var p32 = this.pixels32;\n    const vidbase = this.ioregs32[0x80 >> 2];\n    var vbase = (vidbase >> 1) & 0xfffff;\n    var mask = this.brightness << 24;\n    for (var i=0; i<p32.length; i++) {\n      var col = this.ram16[i + vbase];\n      // rrrrrgggggbbbbb0 ->\n      // 000rrrrr000ggggg000bbbbb00011111111\n      p32[i] = mask | ((col&31)<<3) | (((col>>5)&31)<<11) | (((col>>10)&31)<<19);\n    }\n  }\n\n  getDebugCategories() {\n    return ['CPU', 'Stack', 'FPU'];\n  }\n\n  getDebugInfo?(category: string, state: EmuState) : string {\n    switch (category) {\n      case 'Stack':\n        var s = '';\n        var c = state.c as ARMCoreState;\n        var sp = c.gprs[13];\n        var fp = c.gprs[11];\n        // dump stack using ram32\n        for (var i=0; i<16; i++) {\n          s += hex(sp,8) + '  ' + hex(this.ram32[(sp-RAM_START)>>2],8);\n          if (sp == fp) s += ' FP';\n          s += '\\n';\n          sp += 4;\n          if (sp >= RAM_START+RAM_SIZE) break;\n        }\n        return s;\n      case 'CPU':\n        var s = '';\n        var c = state.c as ARMCoreState;\n        const EXEC_MODE = {2:'Thumb',4:'ARM'};\n        const REGNAMES = {15:'PC',14:'LR',13:'SP',12:'IP',11:'FP',9:'SB'};\n        for (var i=0; i<8; i++) {\n          let j = i+8;\n          s += lpad('r'+i, 5) + ' ' + hex(c.gprs[i],8) + '   ';\n          s += lpad('r'+j, 5) + ' ' + hex(c.gprs[j],8) + lpad(REGNAMES[j]||'',3) + '\\n';\n        }\n        s += 'Flags ';\n        s += c.cpsrN ? \" N\" : \" -\";\n        s += c.cpsrV ? \" V\" : \" -\";\n        s += c.cpsrF ? \" F\" : \" -\";\n        s += c.cpsrZ ? \" Z\" : \" -\";\n        s += c.cpsrC ? \" C\" : \" -\";\n        s += c.cpsrI ? \" I\" : \" -\";\n        s += '\\n';\n        s += 'MODE ' + EXEC_MODE[c.instructionWidth] + ' ' + MODE_NAMES[c.mode] + '\\n';\n        s += 'SPSR ' + hex(c.spsr,8) + '\\n';\n        s += 'cycl ' + c.cycles + '\\n';\n        return s;\n      case 'FPU':\n        var s = '';\n        var c = state.c as ARMCoreState;\n        for (var i=0; i<16; i++) {\n          //let j = i+16;\n          s += lpad('s'+i, 5) + ' ' + hex(c.ifprs[i],8) + ' '  + c.sfprs[i].toPrecision(6);\n          if (i & 1) {\n            s += lpad('d'+(i>>1), 5) + ' ' + c.dfprs[i>>1].toPrecision(12);\n          }\n          s += '\\n';\n          //s += lpad('s'+j, 5) + ' ' + lpad(c.sfprs[j]+'',8) + '\\n';\n        }\n        return s;\n    }\n  }\n\n  saveState() {\n    var state = super.saveState() as any;\n    state.serial = {\n      sin: this.serialIn.slice(0),\n      sout : this.serialOut.slice(0)\n    }\n    return state;\n  }\n  loadState(state) {\n    super.loadState(state);\n    this.serialIn = state.serial.sin;\n    this.serialOut = state.serial.sout;\n  }\n}\n\nconst MODE_NAMES = {\n\t0x10: \"USER\",\n  0x11: \"FIQ\",\n  0x12: \"IRQ\",\n  0x13: \"SUPERVISOR\",\n  0x17: \"ABORT\",\n  0x1b: \"UNDEFINED\",\n  0x1f: \"SYSTEM\",\n};\n", "/*\n * Copyright (c) 2024 Steven E. Hugg\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport { Platform, DisasmLine, Machine, BaseMachinePlatform } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { loadScript } from \"../common/util\";\nimport { ARM32Machine } from \"../machine/arm32\";\n\ndeclare var cs : any; // Unicorn module\n\nconst ARM32_PRESETS = [\n  { id: 'vidfill.c', name: 'Video Memory Fill' },\n];\n\nexport abstract class BaseARMMachinePlatform<T extends Machine> extends BaseMachinePlatform<T> {\n\n    //getOpcodeMetadata     = getOpcodeMetadata_z80;\n    getToolForFilename(fn: string)  {\n      fn = fn.toLowerCase();\n      if (fn.endsWith('.vasm')) return \"vasmarm\";\n      if (fn.endsWith('.armips')) return \"armips\";\n      if (fn.endsWith('.c')) return \"armtcc\";\n      if (fn.endsWith('.s')) return \"armtcc\";\n      return \"armtcc\";\n    }\n    getPresets()          { return ARM32_PRESETS; }\n    getDefaultExtension() { return \".c\"; };\n  }\n  \nclass ARM32Platform extends BaseARMMachinePlatform<ARM32Machine> implements Platform {\n\n  capstone_arm : any;\n  capstone_thumb : any;\n\n  async start() {\n    super.start();\n    console.log(\"Loading Capstone\");\n    await loadScript('./lib/capstone-arm.min.js');\n    this.capstone_arm = new cs.Capstone(cs.ARCH_ARM, cs.MODE_ARM);\n    this.capstone_thumb = new cs.Capstone(cs.ARCH_ARM, cs.MODE_THUMB);\n  }\n\n  newMachine()          { return new ARM32Machine(); }\n  readAddress(a)        { return this.machine.read(a); }\n  getMemoryMap = function() { return { main:[\n    {name:'ROM',start:0x0000000,size:0x100000,type:'ram'},\n    {name:'I/O',start:0x4000000,size:0x100,type:'io'},\n  ] } };\n  getPlatformName()     { return \"ARM7\"; }\n  getDebugTree() {\n    return {\n      ...this.machine.cpu.getDebugTree(),\n      dwarf: this.debugSymbols.debuginfo\n    }\n  }\n  disassemble(pc:number, read:(addr:number)=>number) : DisasmLine {\n    var is_thumb = this.machine.cpu.isThumb();\n    var capstone = is_thumb ? this.capstone_thumb : this.capstone_arm;\n    var buf = [];\n    for (var i=0; i<4; i++) {\n      buf[i] = read(pc+i);\n    }\n    var insns = capstone.disasm(buf, pc, 4);\n    var i0 = insns && insns[0];\n    if (i0) {\n      return {\n        nbytes: i0.size,\n        line: i0.mnemonic + \" \" + i0.op_str,\n        isaddr: i0.address > 0\n      };\n    } else {\n      return {\n        nbytes: 4,\n        line: \"???\",\n        isaddr: false\n      };\n    }\n  }\n}\n\n////\n\nPLATFORMS['arm32'] = ARM32Platform;\n"],
  "mappings": "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",
  "names": ["USER_MASK", "PRIV_MASK", "STATE_MASK", "ARMCoreArm", "cpu", "rn", "offset", "condOp", "gprs", "address", "addr", "rm", "shiftOp", "rs", "shift", "shiftVal", "immediate", "rotate", "instruction", "overlap", "writeInitial", "rd", "shifterOperand", "d", "aluOut", "mmu", "total", "m", "i", "mode", "hi", "lo", "r", "c", "f", "operand", "mask", "n", "SHIFT_32", "carry", "opcode", "nOperandReg", "destReg", "sz", "opcode2", "mOperandReg", "fpregs", "hex", "to_integer", "dp_operation", "unsigned", "round_zero", "round_nearest", "sregs", "dregs", "iregs", "src", "dest", "double_to_single", "single_reg", "srcReg", "regs", "single_regs", "FPCompare", "op1", "op2", "Vd", "E", "Vm", "result", "to_arm_reg", "t", "ARMCoreThumb", "oldD", "oldDn", "dn", "mn", "pc", "misalign", "an", "r4", "ARMCore", "startOffset", "frost", "region", "pageId", "next", "EmuHalt", "newMode", "newBank", "oldBank", "oldFiqBank", "newFiqBank", "spsr", "cpsr", "instructionWidth", "func", "shiftType", "op", "s", "shiftsRs", "rotateImm", "load", "hiOffset", "loOffset", "h", "w", "b", "shiftImmediate", "user", "u", "p", "link", "crd", "cpnum", "cond", "D", "opc2", "op0", "M", "N", "Vn", "size", "opc1", "Rt", "h1", "ARM32CPU", "bus", "resetVector", "state", "a", "v", "memory", "page", "GBA_KEYCODE_MAP", "makeKeycodeMap", "Keys", "RAM_START", "RAM_SIZE", "ROM_BASE", "IO_START", "IO_SIZE", "MAX_SERIAL_CHARS", "CPU_FREQ", "ILLEGAL_OPCODE", "ARM32Machine", "BasicScanlineMachine", "ARM32CPU", "newAddressDecoder", "a", "v", "newKeyboardHandler", "pixels", "serial", "rom", "evin", "p32", "vbase", "mask", "i", "col", "category", "state", "s", "c", "sp", "fp", "hex", "EXEC_MODE", "REGNAMES", "j", "lpad", "MODE_NAMES", "ARM32_PRESETS", "BaseARMMachinePlatform", "BaseMachinePlatform", "fn", "ARM32Platform", "loadScript", "ARM32Machine", "a", "__spreadProps", "__spreadValues", "pc", "read", "is_thumb", "capstone", "buf", "i", "insns", "i0", "PLATFORMS"]
}
