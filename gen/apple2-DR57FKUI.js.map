{
  "version": 3,
  "sources": ["../src/machine/apple2.ts", "../src/platform/apple2.ts"],
  "sourcesContent": ["\nimport { MOS6502, MOS6502State } from \"../common/cpu/MOS6502\";\nimport { Bus, BasicScanlineMachine, SavesState, AcceptsBIOS } from \"../common/devices\";\nimport { KeyFlags } from \"../common/emu\"; // TODO\nimport { hex, lzgmini, stringToByteArray, RGBA, printFlags, arrayCompare } from \"../common/util\";\n\ninterface AppleIIStateBase {\n  ram : Uint8Array<ArrayBuffer>;\n  soundstate : number;\n  auxRAMselected,writeinhibit : boolean;\n  auxRAMbank : number;\n}\n\ninterface AppleIIControlsState {\n  inputs : Uint8Array<ArrayBuffer>; // unused?\n  kbdlatch : number;\n}\n\ninterface AppleIIState extends AppleIIStateBase, AppleIIControlsState {\n  c : MOS6502State;\n  grswitch : number;\n  slots: SlotDevice[];\n}\n\ninterface SlotDevice extends Bus {\n   readROM(address: number) : number;\n   readConst(address: number) : number;\n}\n\nexport class AppleII extends BasicScanlineMachine implements AcceptsBIOS {\n\n   // approx: http://www.cs.columbia.edu/~sedwards/apple2fpga/\n  cpuFrequency = 1022727;\n  sampleRate = this.cpuFrequency;\n  cpuCyclesPerLine = 65;\n  cpuCyclesPerFrame = this.cpuCyclesPerLine * 262;\n  canvasWidth = 280;\n  numVisibleScanlines = 192;\n  numTotalScanlines = 262;\n  defaultROMSize = 0x13000; // we'll never need one that big, but...\n\n  // these are set later\n  LOAD_BASE = 0;\n  HDR_SIZE = 0;\n\n  ram = new Uint8Array(0x13000); // 64K + 16K LC RAM - 4K hardware + 12K ROM\n  bios : Uint8Array;\n  cpu = new MOS6502();\n  grdirty = new Array(0xc000 >> 7);\n  grparams = {dirty:this.grdirty, grswitch:GR_TXMODE, mem:this.ram};\n  ap2disp;\n  kbdlatch = 0;\n  soundstate = 0;\n  // language card switches\n  auxRAMselected = false;\n  auxRAMbank = 1;\n  writeinhibit = true;\n  // value to add when reading & writing each of these banks\n  // bank 1 is E000-FFFF, bank 2 is D000-DFFF\n  bank2rdoffset=0;\n  bank2wroffset=0;\n  // disk II\n  slots : SlotDevice[] = new Array(8);\n  // fake disk drive that loads program into RAM\n  fakeDrive : SlotDevice = {\n    readROM: (a) => {\n      var pc = this.cpu.getPC();\n      if (pc >= 0xC600 && pc < 0xC700) {\n          // We're reading code to EXECUTE.\n          // Load the built program directly into memory, and \"read\"\n          // a JMP directly to it.\n          //console.log(`fakeDrive (EXEC): ${a.toString(16)}`);\n          switch (a) {\n            // JMP VM_BASE\n            case 0:\n              // SHOULD load program into RAM here, but have to do it\n              // below instead.\n              return 0;\n            case 1: return this.LOAD_BASE&0xff;\n            case 2: return (this.LOAD_BASE>>8)&0xff;\n            default: return 0;\n          }\n      }\n      else {\n          // We're reading code, but not executing it.\n          // This is probably the Monitor routine to identify whether\n          // this slot is a Disk ][ drive, so... give it what it wants.\n          //console.log(`fakeDrive (NOEX): ${a.toString(16)}`);\n          switch (a) {\n            case 0:\n              // Actually, if we get here, we probably ARE being\n              // executed. For some reason, the instruction at $C600\n              // gets read for execution, BEFORE the PC gets set to\n              // the correct location. So we handle loading the program\n              // into RAM and returning the JMP here, instead of above\n              // where it would otherwise belong.\n              if (this.rom) {\n                this.loadRAMWithProgram();\n              }\n              return 0x4c; // JMP\n            case 1: return 0x20;\n            case 3: return 0x00;\n            case 5: return 0x03;\n            case 7: return 0x3c;\n            default: return 0;\n          }\n      }\n    },\n    readConst: (a) => {\n       return 0;\n    },\n    read: (a) => { return this.floatbus(); },\n    write: (a,v) => { }\n  };\n\n  constructor() {\n    super();\n    this.loadBIOS(new lzgmini().decode(stringToByteArray(atob(APPLEIIGO_LZG))));\n    this.connectCPUMemoryBus(this);\n    // This line is inappropriate for real ROMs, but was there for\n    // the APPLE][GO ROM, so keeping it only in the constructor, for\n    // that special case (in case it really is important for this\n    // address to be an RTS).\n    this.bios[0xD39A - (0x10000 - this.bios.length)] = 0x60;  // $d39a = RTS\n  }\n  saveState() : AppleIIState {\n    // TODO: automagic\n    return {\n      c: this.cpu.saveState(),\n      ram: this.ram.slice(),\n      kbdlatch: this.kbdlatch,\n      soundstate: this.soundstate,\n      grswitch: this.grparams.grswitch,\n      auxRAMselected: this.auxRAMselected,\n      auxRAMbank: this.auxRAMbank,\n      writeinhibit: this.writeinhibit,\n      slots: this.slots.map((slot) => { return slot && slot['saveState'] && slot['saveState']() }),\n      inputs: this.ram.slice(0,0) // unused\n    };\n  }\n  loadState(s:AppleIIState) {\n    this.cpu.loadState(s.c);\n    this.ram.set(s.ram);\n    this.kbdlatch = s.kbdlatch;\n    this.soundstate = s.soundstate;\n    this.grparams.grswitch = s.grswitch;\n    this.auxRAMselected = s.auxRAMselected;\n    this.auxRAMbank = s.auxRAMbank;\n    this.writeinhibit = s.writeinhibit;\n    this.setupLanguageCardConstants();\n    for (var i=0; i<this.slots.length; i++)\n       if (this.slots[i] && this.slots[i]['loadState'])\n          this.slots[i]['loadState'](s.slots[i]);\n    this.ap2disp.invalidate(); // repaint entire screen\n  }\n  saveControlsState() : AppleIIControlsState {\n    return {inputs:null,kbdlatch:this.kbdlatch};\n  }\n  loadControlsState(s:AppleIIControlsState) {\n    this.kbdlatch = s.kbdlatch;\n  }\n  loadBIOS(data, title?) {\n      if (data.length != 0x3000) {\n          console.log(`apple2 loadBIOS !!!WARNING!!!: BIOS wants length 0x3000, but BIOS '${title}' has length 0x${data.length.toString(16)}`);\n          console.log(\"will load BIOS to end of memory anyway...\");\n      }\n      this.bios = Uint8Array.from(data);\n  }\n   loadROM(data) {\n      // is it a 16-sector 35-track disk image?\n      if (data.length == 16 * 35 * 256) {\n         var diskii = new DiskII(this, data);\n         this.slots[6] = diskii;\n         this.reset();\n      } else { // it's a binary, use a fake drive\n         // set this.rom variable\n         super.loadROM(data);\n         // AppleSingle header? https://github.com/cc65/cc65/blob/master/libsrc/apple2/exehdr.s\n         if (arrayCompare(this.rom.slice(0, 4), [0x00, 0x05, 0x16, 0x00])) {\n            this.LOAD_BASE = this.rom[0x39] | (this.rom[0x38] << 8); // big endian\n            this.HDR_SIZE = 58;\n         } else {\n            // 4-byte DOS header? (TODO: hacky detection)\n            const origin = this.rom[0] | (this.rom[1] << 8);\n            const size = this.rom[2] | (this.rom[3] << 8);\n            let isPlausible = origin < 0xc000\n               && origin + size < 0x13000\n               && (origin == 0x803 || (origin & 0xff) == 0);\n            if (size == data.length - 4 && isPlausible) {\n               this.LOAD_BASE = origin;\n               this.HDR_SIZE = 4;\n            } else {\n               // default = raw binary @ $803\n               this.LOAD_BASE = 0x803;\n               this.HDR_SIZE = 0;\n            }\n         }\n         this.slots[6] = this.fakeDrive;\n      }\n   }\n   loadRAMWithProgram() {\n      console.log(`Loading program into Apple ][ RAM at \\$${this.LOAD_BASE.toString(16)}`);\n      // truncate if needed to fit into RAM\n      const exedata = this.rom.slice(this.HDR_SIZE, this.HDR_SIZE + this.ram.length - this.LOAD_BASE);\n      this.ram.set(exedata, this.LOAD_BASE);\n      // fake DOS detect for CC65 (TODO?)\n      if (this.HDR_SIZE == 58) {\n         this.ram[0xbf00] = 0x4c;\n         this.ram[0xbf6f] = 0x01;\n      }\n   }\n  reset() {\n    this.auxRAMselected = false;\n    this.auxRAMbank = 1;\n    this.writeinhibit = true;\n    this.ram.fill(0, 0x300, 0x400); // Clear soft-reset vector\n                                    // (force hard reset)\n    super.reset();\n    this.skipboot();\n  }\n  skipboot() {\n    // execute until $c600 boot\n    for (var i=0; i<2000000; i++) {\n      this.cpu.advanceClock();\n      if ((this.cpu.getPC()>>8) == 0xc6) break;\n    }\n    // get out of $c600 boot\n    for (var i=0; i<2000000; i++) {\n      this.cpu.advanceClock();\n      if ((this.cpu.getPC()>>8) < 0xc6) break;\n    }\n  }\n   readConst(address: number): number {\n      if (address < 0xc000) {\n         return this.ram[address];\n      } else if (address >= 0xd000) {\n         if (!this.auxRAMselected)\n            return this.bios[address - (0x10000 - this.bios.length)];\n         else if (address >= 0xe000)\n            return this.ram[address];\n         else\n            return this.ram[address + this.bank2rdoffset];\n      } else if (address >= 0xc100 && address < 0xc800) {\n         var slot = (address >> 8) & 7;\n         return (this.slots[slot] && this.slots[slot].readConst(address & 0xff)) | 0;\n      } else {\n         return 0;\n      }\n   }\n  read(address:number) : number {\n    address &= 0xffff;\n    if (address < 0xc000 || address >= 0xd000) {\n      return this.readConst(address);\n    } else if (address < 0xc100) {\n      this.probe.logIORead(address, 0); // TODO: value\n      var slot = (address >> 4) & 0x0f;\n      switch (slot)\n      {\n         case 0:\n            return this.kbdlatch;\n         case 1:\n            this.kbdlatch &= 0x7f;\n            break;\n         case 3:\n            this.soundstate = this.soundstate ^ 1;\n            break;\n         case 5:\n            if ((address & 0x0f) < 8) {\n               // graphics\n               if ((address & 1) != 0)\n                  this.grparams.grswitch |= 1 << ((address >> 1) & 0x07);\n               else\n                  this.grparams.grswitch &= ~(1 << ((address >> 1) & 0x07));\n            }\n            break;\n         case 6:\n            // tapein, joystick, buttons\n            switch (address & 7) {\n               // buttons (off)\n               case 1:\n               case 2:\n               case 3:\n                  return this.floatbus() & 0x7f;\n                // joystick\n               case 4:\n               case 5:\n                  return this.floatbus() | 0x80;\n               default:\n                  return this.floatbus();\n            }\n         case 7:\n            // joy reset\n            if (address == 0xc070)\n               return this.floatbus() | 0x80;\n         case 8:\n            return this.doLanguageCardIO(address);\n         case 9: case 10: case 11: case 12: case 13: case 14: case 15:\n            return (this.slots[slot-8] && this.slots[slot-8].read(address & 0xf)) | 0;\n      }\n    } else if (address >= 0xc100 && address < 0xc800) {\n      var slot = (address >> 8) & 7;\n      return (this.slots[slot] && this.slots[slot].readROM(address & 0xff)) | 0;\n    }\n    return this.floatbus();\n  }\n  write(address:number, val:number) : void {\n    address &= 0xffff;\n    val &= 0xff;\n    if (address < 0xc000) {\n      this.ram[address] = val;\n      this.grdirty[address>>7] = 1;\n    } else if (address < 0xc090) {\n      this.read(address); // strobe address, discard result\n    } else if (address < 0xc100) {\n       var slot = (address >> 4) & 0x0f;\n       this.slots[slot-8] && this.slots[slot-8].write(address & 0xf, val);\n       this.probe.logIOWrite(address, val);\n    } else if (address >= 0xd000 && !this.writeinhibit) {\n      if (address >= 0xe000)\n        this.ram[address] = val;\n      else\n        this.ram[address + this.bank2wroffset] = val;\n    }\n  }\n  // http://www.deater.net/weave/vmwprod/megademo/vapor_lock.html\n  // https://retrocomputing.stackexchange.com/questions/14012/what-is-dram-refresh-and-why-is-the-weird-apple-ii-video-memory-layout-affected\n  // http://www.apple-iigs.info/doc/fichiers/TheappleIIcircuitdescription1.pdf\n  // http://rich12345.tripod.com/aiivideo/softalk.html\n  // https://github.com/MiSTer-devel/Apple-II_MiSTer/blob/master/rtl/timing_generator.vhd\n  floatbus() : number {\n     var fcyc = this.frameCycles;\n     var yline = Math.floor(fcyc / 65);\n     var xcyc = Math.floor(fcyc % 65);\n     var addr = this.ap2disp.getAddressForScanline(yline);\n     return this.readConst(addr + xcyc);\n  }\n\n  connectVideo(pixels:Uint32Array) {\n    super.connectVideo(pixels);\n    this.ap2disp = this.pixels && new Apple2Display(this.pixels, this.grparams);\n  }\n  startScanline() {\n  }\n  drawScanline() {\n    // TODO: draw scanline via ap2disp\n  }\n  advanceFrame(trap) : number {\n    var clocks = super.advanceFrame(trap);\n    this.ap2disp && this.ap2disp.updateScreen();\n    return clocks;\n  }\n  advanceCPU() {\n    this.audio.feedSample(this.soundstate, 1);\n    return super.advanceCPU();\n  }\n\n  setKeyInput(key:number, code:number, flags:number) : void {\n   console.log(`setKeyInput: ${key} ${code} ${flags}`);\n   if (flags & KeyFlags.KeyDown) {\n      code = 0;\n      switch (key) {\n         case 16: case 17: case 18: case 91:\n            return; // ignore shift/ctrl/alt - don't set any key\n        case 8:\n          code=8; // left\n          if (flags & KeyFlags.Shift) {\n            // (possibly) soft reset\n            this.cpu.reset();\n            return;\n          }\n          break;\n        case 13: code=13; break; // return\n        case 27: code=27; break; // escape\n        case 37: code=8; break; // left\n        case 39: code=21; break; // right\n        case 38: code=11; break; // up\n        case 40: code=10; break; // down\n        case 48: code = (flags & KeyFlags.Shift) ? 0x29 : 0x30; break; // ) or 0\n        case 49: code = (flags & KeyFlags.Shift) ? 0x21 : 0x31; break; // ! or 1\n        case 50: code = (flags & KeyFlags.Shift) ? 0x40 : 0x32; break; // @ or 2\n        case 51: code = (flags & KeyFlags.Shift) ? 0x23 : 0x33; break; // # or 3\n        case 52: code = (flags & KeyFlags.Shift) ? 0x24 : 0x34; break; // $ or 4\n        case 53: code = (flags & KeyFlags.Shift) ? 0x25 : 0x35; break; // % or 5\n        case 54: code = (flags & KeyFlags.Shift) ? 0x5e : 0x36; break; // ^ or 6\n        case 55: code = (flags & KeyFlags.Shift) ? 0x26 : 0x37; break; // & or 7\n        case 56: code = (flags & KeyFlags.Shift) ? 0x2a : 0x38; break; // * or 8\n        case 57: code = (flags & KeyFlags.Shift) ? 0x28 : 0x39; break; // ( or 9\n        case 61: code = (flags & KeyFlags.Shift) ? 0x5f : 0x2d; break; // _ or -\n        case 173: code = (flags & KeyFlags.Shift) ? 0x2b : 0x3d; break; // + or =\n        case 59: code = (flags & KeyFlags.Shift) ? 0x3a : 0x3b; break; // : or ;\n        case 186: code = (flags & KeyFlags.Shift) ? 0x3a : 0x3b; break; // : or ;\n        case 187: code = (flags & KeyFlags.Shift) ? 0x2b : 0x3d; break; // + or =\n        case 188: code = (flags & KeyFlags.Shift) ? 0x3c : 0x2c; break;\n        case 189: code = (flags & KeyFlags.Shift) ? 0x5f : 0x2d; break; // _ or -\n        case 190: code = (flags & KeyFlags.Shift) ? 0x3e : 0x2e; break;\n        case 191: code = (flags & KeyFlags.Shift) ? 0x3f : 0x2f; break;\n        case 222: code = (flags & KeyFlags.Shift) ? 0x22 : 0x27; break;\n      default:\n         code = key;\n         // convert to uppercase for Apple ][\n         if (code >= 0x61 && code <= 0x7a) code -= 32;\n         // convert to control codes if Ctrl pressed\n         if (code >= 65 && code < 65+26) {\n            if (flags & KeyFlags.Ctrl) code -= 64; // ctrl\n         }\n      }\n      if (code) {\n        this.kbdlatch = (code | 0x80) & 0xff;\n      }\n    }\n  }\n  \n  doLanguageCardIO(address:number) {\n     // TODO: require two writes in a row for some things\n     switch (address & 0x0f) {\n         // Select aux RAM bank 2, write protected.\n        case 0x0:\n        case 0x4:\n           this.auxRAMselected = true;\n           this.auxRAMbank = 2;\n           this.writeinhibit = true;\n           break;\n        // Select ROM, write enable aux RAM bank 2.\n        case 0x1:\n        case 0x5:\n           this.auxRAMselected = false;\n           this.auxRAMbank = 2;\n           this.writeinhibit = false;\n           break;\n        // Select ROM, write protect aux RAM (either bank).\n        case 0x2:\n        case 0x6:\n        case 0xA:\n        case 0xE:\n           this.auxRAMselected = false;\n           this.writeinhibit = true;\n           break;\n        // Select aux RAM bank 2, write enabled.\n        case 0x3:\n        case 0x7:\n           this.auxRAMselected = true;\n           this.auxRAMbank = 2;\n           this.writeinhibit = false;\n           break;\n        // Select aux RAM bank 1, write protected.\n        case 0x8:\n        case 0xC:\n           this.auxRAMselected = true;\n           this.auxRAMbank = 1;\n           this.writeinhibit = true;\n           break;\n        // Select ROM, write enable aux RAM bank 1.\n        case 0x9:\n        case 0xD:\n           this.auxRAMselected = false;\n           this.auxRAMbank = 1;\n           this.writeinhibit = false;\n           break;\n       // Select aux RAM bank 1, write enabled.\n        case 0xB:\n        case 0xF:\n           this.auxRAMselected = true;\n           this.auxRAMbank = 1;\n           this.writeinhibit = false;\n           break;\n     }\n     this.setupLanguageCardConstants();\n     return this.floatbus();\n  }\n\n  setupLanguageCardConstants() {\n    // reset language card constants\n     if (this.auxRAMbank == 2)\n        this.bank2rdoffset = -0x1000;   // map 0xd000-0xdfff -> 0xc000-0xcfff\n     else\n        this.bank2rdoffset = 0x3000; // map 0xd000-0xdfff -> 0x10000-0x10fff\n     if (this.auxRAMbank == 2)\n        this.bank2wroffset = -0x1000;   // map 0xd000-0xdfff -> 0xc000-0xcfff\n     else\n        this.bank2wroffset = 0x3000; // map 0xd000-0xdfff -> 0x10000-0x10fff\n  }\n\n  getDebugCategories() {\n    return ['CPU','Stack','I/O','Disk'];\n  }\n  getDebugInfo(category:string, state:AppleIIState) {\n    switch (category) {\n      case 'I/O':  return \"AUX RAM Bank:   \" + state.auxRAMbank + \n         \"\\nAUX RAM Select: \" + state.auxRAMselected +\n         \"\\nAUX RAM Write:  \" + !state.writeinhibit +\n         \"\\n\\nGR Switches: \" + printFlags(state.grswitch, [\"Graphics\",\"Mixed\",\"Page2\",\"Hires\"], false) +\n         \"\\n\";\n      case 'Disk': return (this.slots[6] && this.slots[6]['toLongString'] && this.slots[6]['toLongString']()) || \"\\n\";\n    }\n  }\n}\n\nconst GR_TXMODE   = 1;\nconst GR_MIXMODE  = 2;\nconst GR_PAGE1    = 4;\nconst GR_HIRES    = 8;\n\ntype AppleGRParams = {dirty:boolean[], grswitch:number, mem:Uint8Array};\n\nvar Apple2Display = function(pixels : Uint32Array, apple : AppleGRParams) {\n  var XSIZE = 280;\n  var YSIZE = 192;\n  var PIXELON = 0xffffffff;\n  var PIXELOFF = 0xff000000;\n\n  var oldgrmode = -1;\n  var textbuf = new Array(40*24);\n\n  const flashInterval = 250;\n\n  // https://mrob.com/pub/xapple2/colors.html\n  const loresColor = [\n     RGBA(0, 0, 0),\n     RGBA(227, 30, 96),\n     RGBA(96, 78, 189),\n     RGBA(255, 68, 253),\n     RGBA(0, 163, 96),\n     RGBA(156, 156, 156),\n     RGBA(20, 207, 253),\n     RGBA(208, 195, 255),\n     RGBA(96, 114, 3),\n     RGBA(255, 106, 60),\n     RGBA(156, 156, 156),\n     RGBA(255, 160, 208),\n     RGBA(20, 245, 60),\n     RGBA(208, 221, 141),\n     RGBA(114, 255, 208),\n     RGBA(255, 255, 255)\n  ];\n\n  const text_lut = [\n     0x000, 0x080, 0x100, 0x180, 0x200, 0x280, 0x300, 0x380,\n     0x028, 0x0a8, 0x128, 0x1a8, 0x228, 0x2a8, 0x328, 0x3a8,\n     0x050, 0x0d0, 0x150, 0x1d0, 0x250, 0x2d0, 0x350, 0x3d0\n  ];\n\n  const hires_lut = [\n     0x0000, 0x0400, 0x0800, 0x0c00, 0x1000, 0x1400, 0x1800, 0x1c00,\n     0x0080, 0x0480, 0x0880, 0x0c80, 0x1080, 0x1480, 0x1880, 0x1c80,\n     0x0100, 0x0500, 0x0900, 0x0d00, 0x1100, 0x1500, 0x1900, 0x1d00,\n     0x0180, 0x0580, 0x0980, 0x0d80, 0x1180, 0x1580, 0x1980, 0x1d80,\n     0x0200, 0x0600, 0x0a00, 0x0e00, 0x1200, 0x1600, 0x1a00, 0x1e00,\n     0x0280, 0x0680, 0x0a80, 0x0e80, 0x1280, 0x1680, 0x1a80, 0x1e80,\n     0x0300, 0x0700, 0x0b00, 0x0f00, 0x1300, 0x1700, 0x1b00, 0x1f00,\n     0x0380, 0x0780, 0x0b80, 0x0f80, 0x1380, 0x1780, 0x1b80, 0x1f80,\n     0x0028, 0x0428, 0x0828, 0x0c28, 0x1028, 0x1428, 0x1828, 0x1c28,\n     0x00a8, 0x04a8, 0x08a8, 0x0ca8, 0x10a8, 0x14a8, 0x18a8, 0x1ca8,\n     0x0128, 0x0528, 0x0928, 0x0d28, 0x1128, 0x1528, 0x1928, 0x1d28,\n     0x01a8, 0x05a8, 0x09a8, 0x0da8, 0x11a8, 0x15a8, 0x19a8, 0x1da8,\n     0x0228, 0x0628, 0x0a28, 0x0e28, 0x1228, 0x1628, 0x1a28, 0x1e28,\n     0x02a8, 0x06a8, 0x0aa8, 0x0ea8, 0x12a8, 0x16a8, 0x1aa8, 0x1ea8,\n     0x0328, 0x0728, 0x0b28, 0x0f28, 0x1328, 0x1728, 0x1b28, 0x1f28,\n     0x03a8, 0x07a8, 0x0ba8, 0x0fa8, 0x13a8, 0x17a8, 0x1ba8, 0x1fa8,\n     0x0050, 0x0450, 0x0850, 0x0c50, 0x1050, 0x1450, 0x1850, 0x1c50,\n     0x00d0, 0x04d0, 0x08d0, 0x0cd0, 0x10d0, 0x14d0, 0x18d0, 0x1cd0,\n     0x0150, 0x0550, 0x0950, 0x0d50, 0x1150, 0x1550, 0x1950, 0x1d50,\n     0x01d0, 0x05d0, 0x09d0, 0x0dd0, 0x11d0, 0x15d0, 0x19d0, 0x1dd0,\n     0x0250, 0x0650, 0x0a50, 0x0e50, 0x1250, 0x1650, 0x1a50, 0x1e50,\n     0x02d0, 0x06d0, 0x0ad0, 0x0ed0, 0x12d0, 0x16d0, 0x1ad0, 0x1ed0,\n     0x0350, 0x0750, 0x0b50, 0x0f50, 0x1350, 0x1750, 0x1b50, 0x1f50,\n     0x03d0, 0x07d0, 0x0bd0, 0x0fd0, 0x13d0, 0x17d0, 0x1bd0, 0x1fd0,\n     // just for floating bus, y >= 192\n     0x0078, 0x0478, 0x0878, 0x0c78, 0x1078, 0x1478, 0x1878, 0x1c78,\n     0x00f8, 0x04f8, 0x08f8, 0x0cf8, 0x10f8, 0x14f8, 0x18f8, 0x1cf8,\n     0x0178, 0x0578, 0x0978, 0x0d78, 0x1178, 0x1578, 0x1978, 0x1d78, \n     0x01f8, 0x05f8, 0x09f8, 0x0df8, 0x11f8, 0x15f8, 0x19f8, 0x1df8, \n     0x0278, 0x0678, 0x0a78, 0x0e78, 0x1278, 0x1678, 0x1a78, 0x1e78, \n     0x02f8, 0x06f8, 0x0af8, 0x0ef8, 0x12f8, 0x16f8, 0x1af8, 0x1ef8, \n     0x0378, 0x0778, 0x0b78, 0x0f78, 0x1378, 0x1778, 0x1b78, 0x1f78, \n     0x03f8, 0x07f8, 0x0bf8, 0x0ff8, 0x13f8, 0x17f8, 0x1bf8, 0x1ff8, \n     0x0000, 0x0400, 0x0800, 0x0c00, 0x1000, 0x1400,\n   ];\n\n  var colors_lut;\n\n  /**\n    * This function makes the color lookup table for hires mode.\n    * We make a table of 1024 * 2 * 7 entries.\n    * Why? Because we assume each color byte has 10 bits\n    * (8 real bits + 1 on each side) and we need different colors\n    * for odd and even addresses (2) and each byte displays 7 pixels.\n    */\n  {\n     colors_lut = new Array(256*4*2*7);\n     var i,j;\n     var c1,c2,c3 = 15;\n     var base = 0;\n\n     // go thru odd and even\n     for (j=0; j<2; j++)\n     {\n        // go thru 1024 values\n        for (var b1=0; b1<1024; b1++)\n        {\n           // see if the hi bit is set\n           if ((b1 & 0x80) == 0)\n           {\n              c1 = 3; c2 = 12;    // purple & green\n           } else\n           {\n              c1 = 6; c2 = 9;     // blue & orange\n           }\n           // make a value consisting of:\n           // the 8th bit, then bits 0-7, then the 9th bit\n           var b = ((b1 & 0x100) >> 8) | ((b1 & 0x7f) << 1) |\n                   ((b1 & 0x200) >> 1);\n           // go through each pixel\n           for (i=0; i<7; i++)\n           {\n              var c;\n              // is this pixel lit?\n              if (((2<<i)&b) != 0)\n              {\n                 // are there pixels lit on both sides of this one?\n                 if (((7<<i)&b) == (7<<i))\n                    // yes, make it white\n                    c = 15;\n                 else\n                    // no, choose color based on odd/even byte\n                    // and odd/even pixel column\n                    c = ((((j ^ i) & 1) == 0) ? c1 : c2);\n              } else\n              {\n                 // are there pixels lit in the previous & next\n                 // column but none in this?\n                 if (((5<<i)&b) == (5<<i))\n                    // color this pixel\n                    c = ((((j ^ i) & 1) != 0) ? c1 : c2);\n                 else\n                    c = 0;\n              }\n              colors_lut[base] = loresColor[c];\n              base++;\n           }\n        }\n     }\n  }\n\n  function drawLoresChar(x, y, b)\n  {\n     var i,base,adr,c;\n     base = (y<<3)*XSIZE + x*7; //(x<<2) + (x<<1) + x\n     c = loresColor[b & 0x0f];\n     for (i=0; i<4; i++)\n     {\n        pixels[base] =\n        pixels[base+1] =\n        pixels[base+2] =\n        pixels[base+3] =\n        pixels[base+4] =\n        pixels[base+5] =\n        pixels[base+6] = c;\n        base += XSIZE;\n     }\n     c = loresColor[b >> 4];\n     for (i=0; i<4; i++)\n     {\n        pixels[base] =\n        pixels[base+1] =\n        pixels[base+2] =\n        pixels[base+3] =\n        pixels[base+4] =\n        pixels[base+5] =\n        pixels[base+6] = c;\n        base += XSIZE;\n     }\n  }\n\n  function drawTextChar(x, y, b, invert)\n  {\n     var base = (y<<3)*XSIZE + x*7; // (x<<2) + (x<<1) + x\n     var on,off;\n     if (invert)\n     {\n        on = PIXELOFF;\n        off = PIXELON;\n     } else\n     {\n        on = PIXELON;\n        off = PIXELOFF;\n     }\n\n     for (var yy=0; yy<8; yy++)\n     {\n        var chr = apple2_charset[(b<<3)+yy];\n        pixels[base] = ((chr & 64) > 0)?on:off;\n        pixels[base+1] = ((chr & 32) > 0)?on:off;\n        pixels[base+2] = ((chr & 16) > 0)?on:off;\n        pixels[base+3] = ((chr & 8) > 0)?on:off;\n        pixels[base+4] = ((chr & 4) > 0)?on:off;\n        pixels[base+5] = ((chr & 2) > 0)?on:off;\n        pixels[base+6] = ((chr & 1) > 0)?on:off;\n        base += XSIZE;\n     }\n  }\n\n   this.getAddressForScanline = function(y:number) : number {\n      var base = hires_lut[y];\n      if ((apple.grswitch & GR_HIRES) && (y < 160 || !(apple.grswitch & GR_MIXMODE)))\n         base = base | ((apple.grswitch & GR_PAGE1) ? 0x4000 : 0x2000);\n      else\n         base = (base & 0x3ff) | ((apple.grswitch & GR_PAGE1) ? 0x800 : 0x400);\n      return base;\n   }\n\n  function drawHiresLines(y, maxy)\n  {\n     var yb = y*XSIZE;\n     for (; y < maxy; y++)\n     {\n        var base = hires_lut[y] + (((apple.grswitch & GR_PAGE1) != 0) ? 0x4000 : 0x2000);\n        if (!apple.dirty[base >> 7])\n        {\n           yb += XSIZE;\n           continue;\n        }\n        var c1, c2;\n        var b = 0;\n        var b1 = apple.mem[base] & 0xff;\n        for (var x1=0; x1<20; x1++)\n        {\n           var b2 = apple.mem[base+1] & 0xff;\n           var b3 = apple.mem[base+2] & 0xff;\n           var d1 = (((b&0x40)<<2) | b1 | b2<<9) & 0x3ff;\n           for (var i=0; i<7; i++)\n              pixels[yb+i] = colors_lut[d1*7+i];\n           var d2 = (((b1&0x40)<<2) | b2 | b3<<9) & 0x3ff;\n           for (var i=0; i<7; i++)\n              pixels[yb+7+i] = colors_lut[d2*7+7168+i];\n           yb += 14;\n           base += 2;\n           b = b2;\n           b1 = b3;\n        }\n     }\n  }\n\n  function drawLoresLine(y)\n  {\n     // get the base address of this line\n     var base = text_lut[y] +\n                (((apple.grswitch & GR_PAGE1) != 0) ? 0x800 : 0x400);\n  //\t\tif (!dirty[base >> 7])\n  //\t\t    return;\n     for (var x=0; x<40; x++)\n     {\n        var b = apple.mem[base+x] & 0xff;\n        // if the char. changed, draw it\n        if (b != textbuf[y*40+x])\n        {\n           drawLoresChar(x, y, b);\n           textbuf[y*40+x] = b;\n        }\n     }\n  }\n\n  function drawTextLine(y, flash)\n  {\n     // get the base address of this line\n     var base = text_lut[y] +\n                (((apple.grswitch & GR_PAGE1) != 0) ? 0x800 : 0x400);\n  //\t\tif (!dirty[base >> 7])\n  //\t\t    return;\n     for (var x=0; x<40; x++)\n     {\n        var b = apple.mem[base+x] & 0xff;\n        var invert;\n        // invert flash characters 1/2 of the time\n        if (b >= 0x80)\n        {\n           invert = false;\n        } else if (b >= 0x40)\n        {\n           invert = flash;\n           if (flash)\n              b -= 0x40;\n           else\n              b += 0x40;\n        } else\n           invert = true;\n        // if the char. changed, draw it\n        if (b != textbuf[y*40+x])\n        {\n           drawTextChar(x, y, b & 0x7f, invert);\n           textbuf[y*40+x] = b;\n        }\n     }\n  }\n\n  this.updateScreen = function(totalrepaint)\n  {\n     var y;\n     var flash = (new Date().getTime() % (flashInterval<<1)) > flashInterval;\n\n     // if graphics mode changed, repaint whole screen\n     if (apple.grswitch != oldgrmode)\n     {\n        oldgrmode = apple.grswitch;\n        totalrepaint = true;\n     }\n     if (totalrepaint)\n     {\n        // clear textbuf if in text mode\n        if ((apple.grswitch & GR_TXMODE) != 0 || (apple.grswitch & GR_MIXMODE) != 0)\n        {\n           for (y=0; y<24; y++)\n              for (var x=0; x<40; x++)\n                 textbuf[y*40+x] = -1;\n        }\n        for (var i=0; i<apple.dirty.length; i++)\n           apple.dirty[i] = true;\n     }\n\n     // first, draw top part of window\n     if ((apple.grswitch & GR_TXMODE) != 0)\n     {\n        for (y=0; y<20; y++)\n           drawTextLine(y, flash);\n     } else\n     {\n        if ((apple.grswitch & GR_HIRES) != 0)\n           drawHiresLines(0, 160);\n        else\n           for (y=0; y<20; y++)\n              drawLoresLine(y);\n     }\n\n     // now do mixed part of window\n     if ((apple.grswitch & GR_TXMODE) != 0 || (apple.grswitch & GR_MIXMODE) != 0)\n     {\n        for (y=20; y<24; y++)\n           drawTextLine(y, flash);\n     } else\n     {\n        if ((apple.grswitch & GR_HIRES) != 0)\n           drawHiresLines(160, 192);\n        else\n           for (y=20; y<24; y++)\n              drawLoresLine(y);\n     }\n     for (var i=0; i<apple.dirty.length; i++)\n        apple.dirty[i] = false;\n  }\n  \n  this.invalidate = function() {\n    oldgrmode = -1;\n  }\n}\n\n/*exported apple2_charset */\n\nconst apple2_charset = [\n    0x00,0x1c,0x22,0x2a,0x2e,0x2c,0x20,0x1e,\n    0x00,0x08,0x14,0x22,0x22,0x3e,0x22,0x22,\n    0x00,0x3c,0x22,0x22,0x3c,0x22,0x22,0x3c,\n    0x00,0x1c,0x22,0x20,0x20,0x20,0x22,0x1c,\n    0x00,0x3c,0x22,0x22,0x22,0x22,0x22,0x3c,\n    0x00,0x3e,0x20,0x20,0x3c,0x20,0x20,0x3e,\n    0x00,0x3e,0x20,0x20,0x3c,0x20,0x20,0x20,\n    0x00,0x1e,0x20,0x20,0x20,0x26,0x22,0x1e,\n    0x00,0x22,0x22,0x22,0x3e,0x22,0x22,0x22,\n    0x00,0x1c,0x08,0x08,0x08,0x08,0x08,0x1c,\n    0x00,0x02,0x02,0x02,0x02,0x02,0x22,0x1c,\n    0x00,0x22,0x24,0x28,0x30,0x28,0x24,0x22,\n    0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x3e,\n    0x00,0x22,0x36,0x2a,0x2a,0x22,0x22,0x22,\n    0x00,0x22,0x22,0x32,0x2a,0x26,0x22,0x22,\n    0x00,0x1c,0x22,0x22,0x22,0x22,0x22,0x1c,\n    0x00,0x3c,0x22,0x22,0x3c,0x20,0x20,0x20,\n    0x00,0x1c,0x22,0x22,0x22,0x2a,0x24,0x1a,\n    0x00,0x3c,0x22,0x22,0x3c,0x28,0x24,0x22,\n    0x00,0x1c,0x22,0x20,0x1c,0x02,0x22,0x1c,\n    0x00,0x3e,0x08,0x08,0x08,0x08,0x08,0x08,\n    0x00,0x22,0x22,0x22,0x22,0x22,0x22,0x1c,\n    0x00,0x22,0x22,0x22,0x22,0x22,0x14,0x08,\n    0x00,0x22,0x22,0x22,0x2a,0x2a,0x36,0x22,\n    0x00,0x22,0x22,0x14,0x08,0x14,0x22,0x22,\n    0x00,0x22,0x22,0x14,0x08,0x08,0x08,0x08,\n    0x00,0x3e,0x02,0x04,0x08,0x10,0x20,0x3e,\n    0x00,0x3e,0x30,0x30,0x30,0x30,0x30,0x3e,\n    0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x00,\n    0x00,0x3e,0x06,0x06,0x06,0x06,0x06,0x3e,\n    0x00,0x00,0x00,0x08,0x14,0x22,0x00,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n    0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x08,\n    0x00,0x14,0x14,0x14,0x00,0x00,0x00,0x00,\n    0x00,0x14,0x14,0x3e,0x14,0x3e,0x14,0x14,\n    0x00,0x08,0x1e,0x28,0x1c,0x0a,0x3c,0x08,\n    0x00,0x30,0x32,0x04,0x08,0x10,0x26,0x06,\n    0x00,0x10,0x28,0x28,0x10,0x2a,0x24,0x1a,\n    0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x00,\n    0x00,0x08,0x10,0x20,0x20,0x20,0x10,0x08,\n    0x00,0x08,0x04,0x02,0x02,0x02,0x04,0x08,\n    0x00,0x08,0x2a,0x1c,0x08,0x1c,0x2a,0x08,\n    0x00,0x00,0x08,0x08,0x3e,0x08,0x08,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x10,\n    0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,\n    0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x00,\n    0x00,0x1c,0x22,0x26,0x2a,0x32,0x22,0x1c,\n    0x00,0x08,0x18,0x08,0x08,0x08,0x08,0x1c,\n    0x00,0x1c,0x22,0x02,0x0c,0x10,0x20,0x3e,\n    0x00,0x3e,0x02,0x04,0x0c,0x02,0x22,0x1c,\n    0x00,0x04,0x0c,0x14,0x24,0x3e,0x04,0x04,\n    0x00,0x3e,0x20,0x3c,0x02,0x02,0x22,0x1c,\n    0x00,0x0e,0x10,0x20,0x3c,0x22,0x22,0x1c,\n    0x00,0x3e,0x02,0x04,0x08,0x10,0x10,0x10,\n    0x00,0x1c,0x22,0x22,0x1c,0x22,0x22,0x1c,\n    0x00,0x1c,0x22,0x22,0x1e,0x02,0x04,0x38,\n    0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x00,\n    0x00,0x00,0x00,0x08,0x00,0x08,0x08,0x10,\n    0x00,0x04,0x08,0x10,0x20,0x10,0x08,0x04,\n    0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,\n    0x00,0x10,0x08,0x04,0x02,0x04,0x08,0x10,\n    0x00,0x1c,0x22,0x04,0x08,0x08,0x00,0x08,\n    0x80,0x9c,0xa2,0xaa,0xae,0xac,0xa0,0x9e,\n    0x80,0x88,0x94,0xa2,0xa2,0xbe,0xa2,0xa2,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa2,0xa2,0xbc,\n    0x80,0x9c,0xa2,0xa0,0xa0,0xa0,0xa2,0x9c,\n    0x80,0xbc,0xa2,0xa2,0xa2,0xa2,0xa2,0xbc,\n    0x80,0xbe,0xa0,0xa0,0xbc,0xa0,0xa0,0xbe,\n    0x80,0xbe,0xa0,0xa0,0xbc,0xa0,0xa0,0xa0,\n    0x80,0x9e,0xa0,0xa0,0xa0,0xa6,0xa2,0x9e,\n    0x80,0xa2,0xa2,0xa2,0xbe,0xa2,0xa2,0xa2,\n    0x80,0x9c,0x88,0x88,0x88,0x88,0x88,0x9c,\n    0x80,0x82,0x82,0x82,0x82,0x82,0xa2,0x9c,\n    0x80,0xa2,0xa4,0xa8,0xb0,0xa8,0xa4,0xa2,\n    0x80,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xbe,\n    0x80,0xa2,0xb6,0xaa,0xaa,0xa2,0xa2,0xa2,\n    0x80,0xa2,0xa2,0xb2,0xaa,0xa6,0xa2,0xa2,\n    0x80,0x9c,0xa2,0xa2,0xa2,0xa2,0xa2,0x9c,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa0,0xa0,0xa0,\n    0x80,0x9c,0xa2,0xa2,0xa2,0xaa,0xa4,0x9a,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa8,0xa4,0xa2,\n    0x80,0x9c,0xa2,0xa0,0x9c,0x82,0xa2,0x9c,\n    0x80,0xbe,0x88,0x88,0x88,0x88,0x88,0x88,\n    0x80,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0x9c,\n    0x80,0xa2,0xa2,0xa2,0xa2,0xa2,0x94,0x88,\n    0x80,0xa2,0xa2,0xa2,0xaa,0xaa,0xb6,0xa2,\n    0x80,0xa2,0xa2,0x94,0x88,0x94,0xa2,0xa2,\n    0x80,0xa2,0xa2,0x94,0x88,0x88,0x88,0x88,\n    0x80,0xbe,0x82,0x84,0x88,0x90,0xa0,0xbe,\n    0x80,0xbe,0xb0,0xb0,0xb0,0xb0,0xb0,0xbe,\n    0x80,0x80,0xa0,0x90,0x88,0x84,0x82,0x80,\n    0x80,0xbe,0x86,0x86,0x86,0x86,0x86,0xbe,\n    0x80,0x80,0x80,0x88,0x94,0xa2,0x80,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xbe,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,\n    0x80,0x88,0x88,0x88,0x88,0x88,0x80,0x88,\n    0x80,0x94,0x94,0x94,0x80,0x80,0x80,0x80,\n    0x80,0x94,0x94,0xbe,0x94,0xbe,0x94,0x94,\n    0x80,0x88,0x9e,0xa8,0x9c,0x8a,0xbc,0x88,\n    0x80,0xb0,0xb2,0x84,0x88,0x90,0xa6,0x86,\n    0x80,0x90,0xa8,0xa8,0x90,0xaa,0xa4,0x9a,\n    0x80,0x88,0x88,0x88,0x80,0x80,0x80,0x80,\n    0x80,0x88,0x90,0xa0,0xa0,0xa0,0x90,0x88,\n    0x80,0x88,0x84,0x82,0x82,0x82,0x84,0x88,\n    0x80,0x88,0xaa,0x9c,0x88,0x9c,0xaa,0x88,\n    0x80,0x80,0x88,0x88,0xbe,0x88,0x88,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x90,\n    0x80,0x80,0x80,0x80,0xbe,0x80,0x80,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,\n    0x80,0x80,0x82,0x84,0x88,0x90,0xa0,0x80,\n    0x80,0x9c,0xa2,0xa6,0xaa,0xb2,0xa2,0x9c,\n    0x80,0x88,0x98,0x88,0x88,0x88,0x88,0x9c,\n    0x80,0x9c,0xa2,0x82,0x8c,0x90,0xa0,0xbe,\n    0x80,0xbe,0x82,0x84,0x8c,0x82,0xa2,0x9c,\n    0x80,0x84,0x8c,0x94,0xa4,0xbe,0x84,0x84,\n    0x80,0xbe,0xa0,0xbc,0x82,0x82,0xa2,0x9c,\n    0x80,0x8e,0x90,0xa0,0xbc,0xa2,0xa2,0x9c,\n    0x80,0xbe,0x82,0x84,0x88,0x90,0x90,0x90,\n    0x80,0x9c,0xa2,0xa2,0x9c,0xa2,0xa2,0x9c,\n    0x80,0x9c,0xa2,0xa2,0x9e,0x82,0x84,0xb8,\n    0x80,0x80,0x80,0x88,0x80,0x88,0x80,0x80,\n    0x80,0x80,0x80,0x88,0x80,0x88,0x88,0x90,\n    0x80,0x84,0x88,0x90,0xa0,0x90,0x88,0x84,\n    0x80,0x80,0x80,0xbe,0x80,0xbe,0x80,0x80,\n    0x80,0x90,0x88,0x84,0x82,0x84,0x88,0x90,\n    0x80,0x9c,0xa2,0x84,0x88,0x88,0x80,0x88,\n    0x00,0x1c,0x22,0x2a,0x2e,0x2c,0x20,0x1e,\n    0x00,0x08,0x14,0x22,0x22,0x3e,0x22,0x22,\n    0x00,0x3c,0x22,0x22,0x3c,0x22,0x22,0x3c,\n    0x00,0x1c,0x22,0x20,0x20,0x20,0x22,0x1c,\n    0x00,0x3c,0x22,0x22,0x22,0x22,0x22,0x3c,\n    0x00,0x3e,0x20,0x20,0x3c,0x20,0x20,0x3e,\n    0x00,0x3e,0x20,0x20,0x3c,0x20,0x20,0x20,\n    0x00,0x1e,0x20,0x20,0x20,0x26,0x22,0x1e,\n    0x00,0x22,0x22,0x22,0x3e,0x22,0x22,0x22,\n    0x00,0x1c,0x08,0x08,0x08,0x08,0x08,0x1c,\n    0x00,0x02,0x02,0x02,0x02,0x02,0x22,0x1c,\n    0x00,0x22,0x24,0x28,0x30,0x28,0x24,0x22,\n    0x00,0x20,0x20,0x20,0x20,0x20,0x20,0x3e,\n    0x00,0x22,0x36,0x2a,0x2a,0x22,0x22,0x22,\n    0x00,0x22,0x22,0x32,0x2a,0x26,0x22,0x22,\n    0x00,0x1c,0x22,0x22,0x22,0x22,0x22,0x1c,\n    0x00,0x3c,0x22,0x22,0x3c,0x20,0x20,0x20,\n    0x00,0x1c,0x22,0x22,0x22,0x2a,0x24,0x1a,\n    0x00,0x3c,0x22,0x22,0x3c,0x28,0x24,0x22,\n    0x00,0x1c,0x22,0x20,0x1c,0x02,0x22,0x1c,\n    0x00,0x3e,0x08,0x08,0x08,0x08,0x08,0x08,\n    0x00,0x22,0x22,0x22,0x22,0x22,0x22,0x1c,\n    0x00,0x22,0x22,0x22,0x22,0x22,0x14,0x08,\n    0x00,0x22,0x22,0x22,0x2a,0x2a,0x36,0x22,\n    0x00,0x22,0x22,0x14,0x08,0x14,0x22,0x22,\n    0x00,0x22,0x22,0x14,0x08,0x08,0x08,0x08,\n    0x00,0x3e,0x02,0x04,0x08,0x10,0x20,0x3e,\n    0x00,0x3e,0x30,0x30,0x30,0x30,0x30,0x3e,\n    0x00,0x00,0x20,0x10,0x08,0x04,0x02,0x00,\n    0x00,0x3e,0x06,0x06,0x06,0x06,0x06,0x3e,\n    0x00,0x00,0x00,0x08,0x14,0x22,0x00,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3e,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\n    0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x08,\n    0x00,0x14,0x14,0x14,0x00,0x00,0x00,0x00,\n    0x00,0x14,0x14,0x3e,0x14,0x3e,0x14,0x14,\n    0x00,0x08,0x1e,0x28,0x1c,0x0a,0x3c,0x08,\n    0x00,0x30,0x32,0x04,0x08,0x10,0x26,0x06,\n    0x00,0x10,0x28,0x28,0x10,0x2a,0x24,0x1a,\n    0x00,0x08,0x08,0x08,0x00,0x00,0x00,0x00,\n    0x00,0x08,0x10,0x20,0x20,0x20,0x10,0x08,\n    0x00,0x08,0x04,0x02,0x02,0x02,0x04,0x08,\n    0x00,0x08,0x2a,0x1c,0x08,0x1c,0x2a,0x08,\n    0x00,0x00,0x08,0x08,0x3e,0x08,0x08,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x08,0x08,0x10,\n    0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,\n    0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,\n    0x00,0x00,0x02,0x04,0x08,0x10,0x20,0x00,\n    0x00,0x1c,0x22,0x26,0x2a,0x32,0x22,0x1c,\n    0x00,0x08,0x18,0x08,0x08,0x08,0x08,0x1c,\n    0x00,0x1c,0x22,0x02,0x0c,0x10,0x20,0x3e,\n    0x00,0x3e,0x02,0x04,0x0c,0x02,0x22,0x1c,\n    0x00,0x04,0x0c,0x14,0x24,0x3e,0x04,0x04,\n    0x00,0x3e,0x20,0x3c,0x02,0x02,0x22,0x1c,\n    0x00,0x0e,0x10,0x20,0x3c,0x22,0x22,0x1c,\n    0x00,0x3e,0x02,0x04,0x08,0x10,0x10,0x10,\n    0x00,0x1c,0x22,0x22,0x1c,0x22,0x22,0x1c,\n    0x00,0x1c,0x22,0x22,0x1e,0x02,0x04,0x38,\n    0x00,0x00,0x00,0x08,0x00,0x08,0x00,0x00,\n    0x00,0x00,0x00,0x08,0x00,0x08,0x08,0x10,\n    0x00,0x04,0x08,0x10,0x20,0x10,0x08,0x04,\n    0x00,0x00,0x00,0x3e,0x00,0x3e,0x00,0x00,\n    0x00,0x10,0x08,0x04,0x02,0x04,0x08,0x10,\n    0x00,0x1c,0x22,0x04,0x08,0x08,0x00,0x08,\n    0x80,0x9c,0xa2,0xaa,0xae,0xac,0xa0,0x9e,\n    0x80,0x88,0x94,0xa2,0xa2,0xbe,0xa2,0xa2,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa2,0xa2,0xbc,\n    0x80,0x9c,0xa2,0xa0,0xa0,0xa0,0xa2,0x9c,\n    0x80,0xbc,0xa2,0xa2,0xa2,0xa2,0xa2,0xbc,\n    0x80,0xbe,0xa0,0xa0,0xbc,0xa0,0xa0,0xbe,\n    0x80,0xbe,0xa0,0xa0,0xbc,0xa0,0xa0,0xa0,\n    0x80,0x9e,0xa0,0xa0,0xa0,0xa6,0xa2,0x9e,\n    0x80,0xa2,0xa2,0xa2,0xbe,0xa2,0xa2,0xa2,\n    0x80,0x9c,0x88,0x88,0x88,0x88,0x88,0x9c,\n    0x80,0x82,0x82,0x82,0x82,0x82,0xa2,0x9c,\n    0x80,0xa2,0xa4,0xa8,0xb0,0xa8,0xa4,0xa2,\n    0x80,0xa0,0xa0,0xa0,0xa0,0xa0,0xa0,0xbe,\n    0x80,0xa2,0xb6,0xaa,0xaa,0xa2,0xa2,0xa2,\n    0x80,0xa2,0xa2,0xb2,0xaa,0xa6,0xa2,0xa2,\n    0x80,0x9c,0xa2,0xa2,0xa2,0xa2,0xa2,0x9c,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa0,0xa0,0xa0,\n    0x80,0x9c,0xa2,0xa2,0xa2,0xaa,0xa4,0x9a,\n    0x80,0xbc,0xa2,0xa2,0xbc,0xa8,0xa4,0xa2,\n    0x80,0x9c,0xa2,0xa0,0x9c,0x82,0xa2,0x9c,\n    0x80,0xbe,0x88,0x88,0x88,0x88,0x88,0x88,\n    0x80,0xa2,0xa2,0xa2,0xa2,0xa2,0xa2,0x9c,\n    0x80,0xa2,0xa2,0xa2,0xa2,0xa2,0x94,0x88,\n    0x80,0xa2,0xa2,0xa2,0xaa,0xaa,0xb6,0xa2,\n    0x80,0xa2,0xa2,0x94,0x88,0x94,0xa2,0xa2,\n    0x80,0xa2,0xa2,0x94,0x88,0x88,0x88,0x88,\n    0x80,0xbe,0x82,0x84,0x88,0x90,0xa0,0xbe,\n    0x80,0xbe,0xb0,0xb0,0xb0,0xb0,0xb0,0xbe,\n    0x80,0x80,0xa0,0x90,0x88,0x84,0x82,0x80,\n    0x80,0xbe,0x86,0x86,0x86,0x86,0x86,0xbe,\n    0x80,0x80,0x80,0x88,0x94,0xa2,0x80,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0xbe,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x80,\n    0x80,0x88,0x88,0x88,0x88,0x88,0x80,0x88,\n    0x80,0x94,0x94,0x94,0x80,0x80,0x80,0x80,\n    0x80,0x94,0x94,0xbe,0x94,0xbe,0x94,0x94,\n    0x80,0x88,0x9e,0xa8,0x9c,0x8a,0xbc,0x88,\n    0x80,0xb0,0xb2,0x84,0x88,0x90,0xa6,0x86,\n    0x80,0x90,0xa8,0xa8,0x90,0xaa,0xa4,0x9a,\n    0x80,0x88,0x88,0x88,0x80,0x80,0x80,0x80,\n    0x80,0x88,0x90,0xa0,0xa0,0xa0,0x90,0x88,\n    0x80,0x88,0x84,0x82,0x82,0x82,0x84,0x88,\n    0x80,0x88,0xaa,0x9c,0x88,0x9c,0xaa,0x88,\n    0x80,0x80,0x88,0x88,0xbe,0x88,0x88,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x88,0x88,0x90,\n    0x80,0x80,0x80,0x80,0xbe,0x80,0x80,0x80,\n    0x80,0x80,0x80,0x80,0x80,0x80,0x80,0x88,\n    0x80,0x80,0x82,0x84,0x88,0x90,0xa0,0x80,\n    0x80,0x9c,0xa2,0xa6,0xaa,0xb2,0xa2,0x9c,\n    0x80,0x88,0x98,0x88,0x88,0x88,0x88,0x9c,\n    0x80,0x9c,0xa2,0x82,0x8c,0x90,0xa0,0xbe,\n    0x80,0xbe,0x82,0x84,0x8c,0x82,0xa2,0x9c,\n    0x80,0x84,0x8c,0x94,0xa4,0xbe,0x84,0x84,\n    0x80,0xbe,0xa0,0xbc,0x82,0x82,0xa2,0x9c,\n    0x80,0x8e,0x90,0xa0,0xbc,0xa2,0xa2,0x9c,\n    0x80,0xbe,0x82,0x84,0x88,0x90,0x90,0x90,\n    0x80,0x9c,0xa2,0xa2,0x9c,0xa2,0xa2,0x9c,\n    0x80,0x9c,0xa2,0xa2,0x9e,0x82,0x84,0xb8,\n    0x80,0x80,0x80,0x88,0x80,0x88,0x80,0x80,\n    0x80,0x80,0x80,0x88,0x80,0x88,0x88,0x90,\n    0x80,0x84,0x88,0x90,0xa0,0x90,0x88,0x84,\n    0x80,0x80,0x80,0xbe,0x80,0xbe,0x80,0x80,\n    0x80,0x90,0x88,0x84,0x82,0x84,0x88,0x90,\n    0x80,0x9c,0xa2,0x84,0x88,0x88,0x80,0x88\n];\n\n// public domain ROM (http://a2go.applearchives.com/roms/)\nconst APPLEIIGO_LZG = `TFpHAAAwAAAABYxwdy2NARUZHjRBUFBMRUlJR08gUk9NMS4wADQfNB80HzQfNB80HzQfNB80HDQGIADgGR97GR+uNB80Hxk/azQfNB8ZP2UZH4s0HzQfNB80HzQfNB80HzQfNB80HzQfNB80HTQPoCA0HCAgoBkOKAEQEAwFEw8GFCAODxQgARYBCQwBAgwFGRAoxs/SoM3P0sWgyc4eA83B1MnPzqDQzMXB08Wgw8zJw8ugHgigGQgo1MjFoMHQHhnJycfPoMzPNIHCxczP1x4cNAoZHvhMA+AgWPyiJ70A352ABMoQ9x4DMN+dAAUewx5OGQUDYB4DBh7DkB4ZBx4DTEDgNEEZP7s0HzQfNB80HzQfNB80HzQfNB80HzQfNB80HzQfNB80HzQfNB80HzQfNB80HjQYyc6w7snJkOrJzPDm0OjqNAtISikDCQSFKWgpGJACaX+FKAoKBSiFKGAZHnQApSUgwftlIBkdSzQVpSJIICT8pSiFKqUphSukIYhoaQHFI7ANHk6xKJEqiBD5MOGgACCe/LCGpCSpoJEoyMQhkPkZHsc0G6QksShIKT8JQJEoaGw4GRMbIAz9IKX7NKHJm/DzGRyNNAYgjv2lMyDt/aIBivDzyiA1/cmV0AKxKMngkAIp350AAsmN0LIgnPypjdBbpD2mPB4nIED5oACprUzt/RlfdjQfNB80HzQfNB80HzQfNB80HzQfNB80HjQFqQCFHKXmhRugAIQapRyRGiB+9MjQ9uYbpRspH9DuYIXihuCE4UgpwIUmSkoFJoUmaIUnCgoKJic0QmYmpScpHwXmhSeKwADwBaAjaQTI6Qew+4Tlqr259IUwmEql5IUcsBUcACM0BArJwBAGpRxJf4UcGf7aNB80HzQfNB80HzQfNBw0CkoIIEf4KKkPkAJp4IUusSZFMCUuUSaRJmAgAPjELLARyCAO+JD2aQFIHghoxS2Q9WCgL9ACoCeELaAnqQCFMCAo+IgQ9mAVBQR+JxUGBH4mCgoZgjRgpTAYaQMpD4UwCjQBBTCFMBln35AESjQBKQ8Za/CoSpAJarAQyaLwDCmHSqq9YvkgefjQBKCAqQCqvab5hS4pA4UvmCmPqpigA+CK8AtKkAhKSgkgiND6yIjQ8hmfOzQfNB80FNgghP4gL/sgk/4gif6tWMCtWsCtXcCtX8Ct/88sEMDYIDr/IGD7qQCFAKnGhQFsGR5vNB0VAxNs3dvHzxkKDa1wwKAA6uq9ZMAQBMjQ+IhgqQCFSK1WwK1UwK1RwKkA8AutUMCtU8AgNvipFIUiHhYgqSiFIakYhSOpF4UlTCL8IFj8oAm5CPuZDgSI0PdgrfMDSaWN9ANgyY3QGKwAwBATwJPQDywQwB5E+8CD8AMeBEz9+xUdB/gVEAf4yYfQEqlAIKj8oMCpDDTBrTDAiND1YKQkkSjmJKUkxSGwZmDJoLDvqBDsyY3wWsmKNGGI0MnGJBDopSGFJMYkpSLFJbALxiUVHAf4AEggJPwgnvygAGhpAMUjkPCwyqUihSWgAIQk8OSpAIUk5h4+HhC2xiUVHQf4FQYH+DhI6QHQ/Gg0gfZg5kLQAuZDpTzFPqU95T/mPB4GPRl99BUcB/jmTtAC5k8sAMAQ9ZEorQDALBDAYBUKB/j+YKUySKn/hTK9AAIg7f1oHoHJiPAdyZjwCuD4kAMgOv/o0BOp3B4VFQoH+P4VHgf4NBsASBmiWCDl/WgpDwmwybqQAmkGbDYAyaCQAiUyhDVIIHj7aKQ1GTEvQBkKBRkLGLE8kUIgtPyQ9xm+YTQBoD/QAqD/hDIZYlI+ojigG9AIHoI2oPClPikP8AYJwKAA8AKp/ZQAlQFg6upMFR8eQzQHqYdM7f2lSEilRaZGpEcZbhYZ34Q0GzQB9QP7A2L6Yvo=`;\n\n///\n/// Disk II\n///\n\n   const NUM_DRIVES = 2;\n   const NUM_TRACKS = 35;\n   const TRACK_SIZE = 0x1880;\n   const SECTOR_SIZE = 383;\n\n   const DISKII_PROM = [\n      0xA2,0x20,0xA0,0x00,0xA2,0x03,0x86,0x3C,0x8A,0x0A,0x24,0x3C,0xF0,0x10,0x05,0x3C\n      ,0x49,0xFF,0x29,0x7E,0xB0,0x08,0x4A,0xD0,0xFB,0x98,0x9D,0x56,0x03,0xC8,0xE8,0x10\n      ,0xE5,0x20,0x58,0xFF,0xBA,0xBD,0x00,0x01,0x0A,0x0A,0x0A,0x0A,0x85,0x2B,0xAA,0xBD\n      ,0x8E,0xC0,0xBD,0x8C,0xC0,0xBD,0x8A,0xC0,0xBD,0x89,0xC0,0xA0,0x50,0xBD,0x80,0xC0\n      ,0x98,0x29,0x03,0x0A,0x05,0x2B,0xAA,0xBD,0x81,0xC0,0xA9,0x56,\n      /*0x20,0xA8,0xFC,*/0xa9,0x00,0xea,0x88\n      ,0x10,0xEB,0x85,0x26,0x85,0x3D,0x85,0x41,0xA9,0x08,0x85,0x27,0x18,0x08,0xBD,0x8C\n      ,0xC0,0x10,0xFB,0x49,0xD5,0xD0,0xF7,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0xAA,0xD0,0xF3\n      ,0xEA,0xBD,0x8C,0xC0,0x10,0xFB,0xC9,0x96,0xF0,0x09,0x28,0x90,0xDF,0x49,0xAD,0xF0\n      ,0x25,0xD0,0xD9,0xA0,0x03,0x85,0x40,0xBD,0x8C,0xC0,0x10,0xFB,0x2A,0x85,0x3C,0xBD\n      ,0x8C,0xC0,0x10,0xFB,0x25,0x3C,0x88,0xD0,0xEC,0x28,0xC5,0x3D,0xD0,0xBE,0xA5,0x40\n      ,0xC5,0x41,0xD0,0xB8,0xB0,0xB7,0xA0,0x56,0x84,0x3C,0xBC,0x8C,0xC0,0x10,0xFB,0x59\n      ,0xD6,0x02,0xA4,0x3C,0x88,0x99,0x00,0x03,0xD0,0xEE,0x84,0x3C,0xBC,0x8C,0xC0,0x10\n      ,0xFB,0x59,0xD6,0x02,0xA4,0x3C,0x91,0x26,0xC8,0xD0,0xEF,0xBC,0x8C,0xC0,0x10,0xFB\n      ,0x59,0xD6,0x02,0xD0,0x87,0xA0,0x00,0xA2,0x56,0xCA,0x30,0xFB,0xB1,0x26,0x5E,0x00\n      ,0x03,0x2A,0x5E,0x00,0x03,0x2A,0x91,0x26,0xC8,0xD0,0xEE,0xE6,0x27,0xE6,0x3D,0xA5\n      ,0x3D,0xCD,0x00,0x08,0xA6,0x2B,0x90,0xDB,0x4C,0x01,0x08,0x00,0x00,0x00,0x00,0x00\n   ];\n\nclass DiskIIState {\n    data : Uint8Array[];\n    track : number = 0;\n    read_mode : boolean = true;\n    write_protect : boolean = false;\n    motor : boolean = false;\n    track_index : number = 0;\n}\n\nclass DiskII extends DiskIIState implements SlotDevice, SavesState<DiskIIState> {\n    emu : AppleII;\n    track_data : Uint8Array;\n    \n    constructor(emu : AppleII, image : Uint8Array) {\n        super();\n        this.emu = emu;\n        this.data = new Array(NUM_TRACKS);\n        for (var i=0; i<NUM_TRACKS; i++) {\n           var ofs = i*16*256;\n           this.data[i] = nibblizeTrack(254, i, image.slice(ofs, ofs+16*256));\n        }\n    }\n    \n    saveState() : DiskIIState {\n       var s = {\n          data: new Array(NUM_TRACKS),\n          track: this.track,\n          read_mode: this.read_mode,\n          write_protect: this.write_protect,\n          motor: this.motor,\n          track_index: this.track_index\n       };\n       for (var i=0; i<NUM_TRACKS; i++)\n          s.data[i] = this.data[i].slice(0);\n       return s;\n    }\n    \n    loadState(s: DiskIIState) {\n       for (var i=0; i<NUM_TRACKS; i++)\n          this.data[i].set(s.data[i]);\n       this.track = s.track;\n       this.read_mode = s.read_mode;\n       this.write_protect = s.write_protect;\n       this.motor = s.motor;\n       this.track_index = s.track_index;\n       if ((this.track & 1) == 0)\n          this.track_data = this.data[this.track>>1];\n       else\n          this.track_data = null;\n    }\n    \n    toLongString() {\n       return \"Track:  \" + (this.track / 2) +\n         \"\\nOffset: \" + (this.track_index) +\n         \"\\nMode:   \" + (this.read_mode ? \"READ\" : \"WRITE\") +\n         \"\\nMotor:  \" + this.motor +\n         \"\\nData:   \" + (this.track_data ? hex(this.track_data[this.track_index]) : '-') +\n         \"\\n\";\n    }\n    \n   read_latch() : number {\n      this.track_index = (this.track_index + 1) % TRACK_SIZE;\n      if (this.track_data) {\n         return (this.track_data[this.track_index] & 0xff);\n      } else\n         return this.emu.floatbus() | 0x80;\n   }\n\n   write_latch(value: number) {\n      this.track_index = (this.track_index + 1) % TRACK_SIZE;\n      if (this.track_data != null)\n         this.track_data[this.track_index] = value;\n   }\n   \n   readROM(address)      { return DISKII_PROM[address]; }\n   readConst(address)    { return DISKII_PROM[address]; }\n   read(address)         { return this.doIO(address, 0); }\n   write(address, value) { this.doIO(address, value); }\n\n   doIO(address, value) : number \n   {\n      switch (address & 0x0f)\n      {\n         /*\n          * Turn motor phases 0 to 3 on.  Turning on the previous phase + 1\n          * increments the track position, turning on the previous phase - 1\n          * decrements the track position.  In this scheme phase 0 and 3 are\n          * considered to be adjacent.  The previous phase number can be\n          * computed as the track number % 4.\n          */\n         case 0x1:\n         case 0x3:\n         case 0x5:\n         case 0x7:\n            var phase, lastphase, new_track;\n            new_track = this.track;\n            phase = (address >> 1) & 3;\n\n            // if new phase is even and current phase is odd\n            if (phase == ((new_track - 1) & 3))\n            {\n               if (new_track > 0)\n                  new_track--;\n            } else\n               if (phase == ((new_track + 1) & 3))\n            {\n               if (new_track < NUM_TRACKS*2-1)\n                  new_track++;\n            }\n            if ((new_track & 1) == 0)\n            {\n               this.track_data = this.data[new_track>>1];\n               console.log('track', new_track/2);\n            } else\n               this.track_data = null;\n            this.track = new_track;\n            break;\n            /*\n             * Turn drive motor off.\n             */\n         case 0x8:\n            this.motor = false;\n            break;\n            /*\n             * Turn drive motor on.\n             */\n         case 0x9:\n            this.motor = true;\n            break;   \n            /*\n             * Select drive 1.\n             */\n         case 0xa:\n            //drive = 0;\n            break;\n            /*\n             * Select drive 2.\n             */\n         case 0xb:\n            //drive = 1;\n            break;\n            /*\n             * Select write mode.\n             */\n         case 0xf:\n            this.read_mode = false;\n            /*\n             * Read a disk byte if read mode is active.\n             */\n         case 0xC:\n            if (this.read_mode)\n               return this.read_latch();\n            break;\n            /*\n             * Select read mode and read the write protect status.\n             */\n         case 0xE:\n            this.read_mode = true;\n            /*\n             * Write a disk byte if write mode is active and the disk is not\n             * write protected.\n             */\n         case 0xD:\n            if (value >= 0 && !this.read_mode && !this.write_protect)\n               this.write_latch(value);\n            /*\n             * Read the write protect status only.\n             */\n            return this.write_protect ? 0x80 : 0x00;\n      }\n      return this.emu.floatbus();\n   }\n\n}\n\n/* --------------- TRACK CONVERSION ROUTINES ---------------------- */\n\n   /*\n    * Normal byte (lower six bits only) -> disk byte translation table.\n    */\n   const byte_translation = [\n      0x96, 0x97, 0x9a, 0x9b, 0x9d, 0x9e, 0x9f, 0xa6,\n      0xa7, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb2, 0xb3,\n      0xb4, 0xb5, 0xb6, 0xb7, 0xb9, 0xba, 0xbb, 0xbc,\n      0xbd, 0xbe, 0xbf, 0xcb, 0xcd, 0xce, 0xcf, 0xd3,\n      0xd6, 0xd7, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde,\n      0xdf, 0xe5, 0xe6, 0xe7, 0xe9, 0xea, 0xeb, 0xec,\n      0xed, 0xee, 0xef, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6,\n      0xf7, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff\n   ];\n\n   /*\n    * Sector skewing table.\n    */\n\n   const skewing_table = [\n      0,7,14,6,13,5,12,4,11,3,10,2,9,1,8,15\n   ];\n\n/*\n * Encode a 256-byte sector as SECTOR_SIZE disk bytes as follows:\n *\n *   14 sync bytes\n *   3 address header bytes\n *   8 address block bytes\n *   3 address trailer bytes\n *   6 sync bytes\n *   3 data header bytes\n * 343 data block bytes\n *   3 data trailer bytes\n */\n   function nibblizeSector(vol, trk, sector, inn, in_ofs, out, i)\n   {\n      var loop, checksum, prev_value, value;\n      var sector_buffer = new Uint8Array(258);\n      value = 0;\n\n      /*\n       * Step 1: write 6 sync bytes (0xff's).  Normally these would be\n       * written as 10-bit bytes with two extra zero bits, but for the\n       * purpose of emulation normal 8-bit bytes will do, since the\n       * emulated drive will always be in sync.\n       */\n      for (loop = 0; loop < 14; loop++)\n         out[i++] = 0xff;\n\n      /*\n       * Step 2: write the 3-byte address header (0xd5 0xaa 0x96).\n       */\n      out[i++] = 0xd5;\n      out[i++] = 0xaa;\n      out[i++] = 0x96;\n\n      /*\n       * Step 3: write the address block.  Use 4-and-4 encoding to convert\n       * the volume, track and sector and checksum into 2 disk bytes each.\n       * The checksum is a simple exclusive OR of the first three values.\n       */\n      out[i++] = ((vol >> 1) | 0xaa);\n      out[i++] = (vol | 0xaa);\n      checksum = vol;\n      out[i++] = ((trk >> 1) | 0xaa);\n      out[i++] = (trk | 0xaa);\n      checksum ^= trk;\n      out[i++] = ((sector >> 1) | 0xaa);\n      out[i++] = (sector | 0xaa);\n      checksum ^= sector;\n      out[i++] = ((checksum >> 1) | 0xaa);\n      out[i++] = (checksum | 0xaa);\n\n      /*\n       * Step 4: write the 3-byte address trailer (0xde 0xaa 0xeb).\n       */\n      out[i++] = (0xde);\n      out[i++] = (0xaa);\n      out[i++] = (0xeb);\n\n      /*\n       * Step 5: write another 6 sync bytes.\n       */\n      for (loop = 0; loop < 6; loop++)\n         out[i++] = (0xff);\n\n      /*\n       * Step 6: write the 3-byte data header.\n       */\n      out[i++] = (0xd5);\n      out[i++] = (0xaa);\n      out[i++] = (0xad);\n\n      /*\n       * Step 7: read the next 256-byte sector from the old disk image file,\n       * and add two zero bytes to bring the number of bytes up to a multiple\n       * of 3.\n       */\n      for (loop = 0; loop < 256; loop++)\n         sector_buffer[loop] = inn[loop + in_ofs] & 0xff;\n      sector_buffer[256] = 0;\n      sector_buffer[257] = 0; \n\n      /*\n       * Step 8: write the first 86 disk bytes of the data block, which\n       * encodes the bottom two bits of each sector byte into six-bit\n       * values as follows:\n       *\n       * disk byte n, bit 0 = sector byte n,       bit 1\n       * disk byte n, bit 1 = sector byte n,       bit 0\n       * disk byte n, bit 2 = sector byte n +  86, bit 1\n       * disk byte n, bit 3 = sector byte n +  86, bit 0\n       * disk byte n, bit 4 = sector byte n + 172, bit 1\n       * disk byte n, bit 5 = sector byte n + 172, bit 0\n       *\n       * The scheme allows each pair of bits to be shifted to the right out\n       * of the disk byte, then shifted to the left into the sector byte.\n       *\n       * Before the 6-bit value is translated to a disk byte, it is exclusive\n       * ORed with the previous 6-bit value, hence the values written are\n       * really a running checksum.\n       */\n      prev_value = 0;\n      for (loop = 0; loop < 86; loop++)\n      {\n         value  = (sector_buffer[loop] & 0x01) << 1;\n         value |= (sector_buffer[loop] & 0x02) >> 1;\n         value |= (sector_buffer[loop + 86] & 0x01) << 3;\n         value |= (sector_buffer[loop + 86] & 0x02) << 1;\n         value |= (sector_buffer[loop + 172] & 0x01) << 5;\n         value |= (sector_buffer[loop + 172] & 0x02) << 3;\n         out[i++] = (byte_translation[value ^ prev_value]);\n         prev_value = value;\n      }  \n\n      /*\n       * Step 9: write the last 256 disk bytes of the data block, which\n       * encodes the top six bits of each sector byte.  Again, each value\n       * is exclusive ORed with the previous value to create a running\n       * checksum (the first value is exclusive ORed with the last value of\n       * the previous step).\n       */\n\n      for (loop = 0; loop < 256; loop++)\n      {\n         value = (sector_buffer[loop] >> 2);\n         out[i++] = (byte_translation[value ^ prev_value]);\n         prev_value = value;\n      }\n\n      /*\n       * Step 10: write the last value as the checksum.\n       */\n      out[i++] = (byte_translation[value]);\n\n      /*\n       * Step 11: write the 3-byte data trailer.\n       */\n      out[i++] = (0xde);\n      out[i++] = (0xaa);\n      out[i++] = (0xeb);\n\n   }\n\n   function nibblizeTrack(vol, trk, inn)\n   {\n      var out = new Uint8Array(TRACK_SIZE);\n      var out_pos = 0;\n      for (var sector = 0; sector < 16; sector++) {\n         nibblizeSector(vol, trk, sector,\n                        inn, skewing_table[sector] << 8,\n                        out, out_pos);\n         out_pos += SECTOR_SIZE;\n      }\n      while (out_pos < TRACK_SIZE)\n         out[out_pos++] = (0xff);\n      return out;\n   }\n\n\n", "\nimport { Platform, Preset, getOpcodeMetadata_6502, getToolForFilename_6502 } from \"../common/baseplatform\";\nimport { PLATFORMS } from \"../common/emu\";\nimport { AppleII } from \"../machine/apple2\";\nimport { Base6502MachinePlatform } from \"../common/baseplatform\";\nimport { CodeAnalyzer_apple2 } from \"../common/analysis\";\nimport { BaseMAME6502Platform } from \"../common/mameplatform\";\n\nconst APPLE2_PRESETS : Preset[] = [\n  {id:'sieve.c', name:'Sieve', category:\"C\"},\n  {id:'keyboardtest.c', name:'Keyboard Test'},\n  {id:'mandel.c', name:'Mandelbrot'},\n  {id:'tgidemo.c', name:'TGI Graphics Demo'},\n  {id:'Eliza.c', name:'Eliza'},\n  {id:'siegegame.c', name:'Siege Game'},\n  {id:'cosmic.c', name:'Cosmic Impalas'},\n  {id:'farmhouse.c', name:\"Farmhouse Adventure\"},\n  {id:'yum.c', name:\"Yum Dice Game\"},\n  {id:'lz4test.c', name:\"LZ4 Decompressor\"},\n  {id:'hgrtest.a', name:\"HGR Test\", category:\"Assembly Language\"},\n  {id:'conway.a', name:\"Conway's Game of Life\"},\n  {id:'lz4fh.a', name:\"LZ4FH Decompressor\"},\n  {id:'deltamod.dasm', name:\"Delta Modulation Audio\"},\n//  {id:'zap.dasm', name:\"ZAP!\"},\n//  {id:'tb_6502.s', name:'Tom Bombem (assembler game)'},\n];\n\n/// MAME support\n\nclass Apple2MAMEPlatform extends BaseMAME6502Platform implements Platform {\n\n  start () {\n    this.startModule(this.mainElement, {\n      jsfile:'mame8bitpc.js',\n      biosfile:['apple2e.zip'],\n      //cfgfile:'nes.cfg',\n      driver:'apple2e',\n      width:280*2,\n      height:192*2,\n      //romfn:'/emulator/cart.nes',\n      //romsize:romSize,\n      //romdata:new lzgmini().decode(lzgRom).slice(0, romSize),\n      preInit:function(_self) {\n      },\n    });\n  }\n\n  getOpcodeMetadata = getOpcodeMetadata_6502;\n  getDefaultExtension () { return \".c\"; };\n  getToolForFilename = getToolForFilename_6502;\n\n  getPresets () { return APPLE2_PRESETS; }\n\n  loadROM (title, data) {\n    this.loadROMFile(data);\n    // TODO\n  }\n}\n\n///\n\nclass NewApple2Platform extends Base6502MachinePlatform<AppleII> implements Platform {\n\n  newMachine()          { return new AppleII(); }\n  getPresets()          { return APPLE2_PRESETS; }\n  getDefaultExtension() { return \".c\"; };\n  readAddress(a)        { return this.machine.readConst(a); }\n  // TODO loadBIOS(bios)\t{ this.machine.loadBIOS(a); }\n  getMemoryMap = function() { return { main:[\n      {name:'Zero Page RAM',start:0x0,size:0x100,type:'ram'},\n      {name:'Line Input RAM',start:0x200,size:0x100,type:'ram'},\n      {name:'RAM',start:0x300,size:0xc0,type:'ram'},\n      {name:'DOS Vectors',start:0x3c0,size:0x40,type:'ram'},\n      {name:'Text/Lores Page 1',start:0x400,size:0x400,type:'ram'},\n      {name:'RAM',start:0x800,size:0x1800,type:'ram'},\n      {name:'Hires Page 1',start:0x2000,size:0x2000,type:'ram'},\n      {name:'Hires Page 2',start:0x4000,size:0x2000,type:'ram'},\n      {name:'RAM',start:0x6000,size:0x6000,type:'ram'},\n      {name:'I/O',start:0xc000,size:0x1000,type:'io'},\n      {name:'ROM',start:0xd000,size:0x3000,type:'rom'},\n  ] } };\n  getROMExtension(rom:Uint8Array) {\n    if (rom && rom.length == 35*16*256) return \".dsk\"; // DSK image\n    return \".bin\";\n  };\n  getToolForFilename = (fn:string) : string => {\n    if (fn.endsWith(\".lnk\")) return \"merlin32\";\n    else return getToolForFilename_6502(fn);\n  }\n  /*\n  newCodeAnalyzer() {\n    return new CodeAnalyzer_apple2(this);\n  }\n  getOriginPC() {\n    return 0x803; // TODO?\n  }\n  */\n}\n\nPLATFORMS['apple2.mame'] = Apple2MAMEPlatform;\nPLATFORMS['apple2'] = NewApple2Platform;\n"],
  "mappings": "4NA6BO,IAAMA,EAAN,cAAsBC,EAA4C,CAsFvE,aAAc,CACZ,MAAM,EApFR,kBAAe,QACf,gBAAa,KAAK,aAClB,sBAAmB,GACnB,uBAAoB,KAAK,iBAAmB,IAC5C,iBAAc,IACd,yBAAsB,IACtB,uBAAoB,IACpB,oBAAiB,MAGjB,eAAY,EACZ,cAAW,EAEX,SAAM,IAAI,WAAW,KAAO,EAE5B,SAAM,IAAIC,GACV,aAAU,IAAI,MAAM,GAAW,EAC/B,cAAW,CAAC,MAAM,KAAK,QAAS,SAASC,EAAW,IAAI,KAAK,GAAG,EAEhE,cAAW,EACX,gBAAa,EAEb,oBAAiB,GACjB,gBAAa,EACb,kBAAe,GAGf,mBAAc,EACd,mBAAc,EAEd,WAAuB,IAAI,MAAM,CAAC,EAElC,eAAyB,CACvB,QAAUC,GAAM,CACd,IAAIC,EAAK,KAAK,IAAI,MAAM,EACxB,GAAIA,GAAM,OAAUA,EAAK,MAKrB,OAAQD,EAAG,CAET,IAAK,GAGH,MAAO,GACT,IAAK,GAAG,OAAO,KAAK,UAAU,IAC9B,IAAK,GAAG,OAAQ,KAAK,WAAW,EAAG,IACnC,QAAS,MAAO,EAClB,KAOA,QAAQA,EAAG,CACT,IAAK,GAOH,OAAI,KAAK,KACP,KAAK,mBAAmB,EAEnB,GACT,IAAK,GAAG,MAAO,IACf,IAAK,GAAG,MAAO,GACf,IAAK,GAAG,MAAO,GACf,IAAK,GAAG,MAAO,IACf,QAAS,MAAO,EAClB,CAEN,EACA,UAAYA,GACF,EAEV,KAAOA,GAAe,KAAK,SAAS,EACpC,MAAO,CAACA,EAAEE,IAAM,CAAE,CACpB,EAIE,KAAK,SAAS,IAAIC,EAAQ,EAAE,OAAOC,GAAkB,KAAKC,EAAa,CAAC,CAAC,CAAC,EAC1E,KAAK,oBAAoB,IAAI,EAK7B,KAAK,KAAK,OAAU,MAAU,KAAK,KAAK,OAAO,EAAI,EACrD,CACA,WAA2B,CAEzB,MAAO,CACL,EAAG,KAAK,IAAI,UAAU,EACtB,IAAK,KAAK,IAAI,MAAM,EACpB,SAAU,KAAK,SACf,WAAY,KAAK,WACjB,SAAU,KAAK,SAAS,SACxB,eAAgB,KAAK,eACrB,WAAY,KAAK,WACjB,aAAc,KAAK,aACnB,MAAO,KAAK,MAAM,IAAKC,GAAkBA,GAAQA,EAAK,WAAgBA,EAAK,UAAa,CAAG,EAC3F,OAAQ,KAAK,IAAI,MAAM,EAAE,CAAC,CAC5B,CACF,CACA,UAAUC,EAAgB,CACxB,KAAK,IAAI,UAAUA,EAAE,CAAC,EACtB,KAAK,IAAI,IAAIA,EAAE,GAAG,EAClB,KAAK,SAAWA,EAAE,SAClB,KAAK,WAAaA,EAAE,WACpB,KAAK,SAAS,SAAWA,EAAE,SAC3B,KAAK,eAAiBA,EAAE,eACxB,KAAK,WAAaA,EAAE,WACpB,KAAK,aAAeA,EAAE,aACtB,KAAK,2BAA2B,EAChC,QAASC,EAAE,EAAGA,EAAE,KAAK,MAAM,OAAQA,IAC5B,KAAK,MAAMA,CAAC,GAAK,KAAK,MAAMA,CAAC,EAAE,WAChC,KAAK,MAAMA,CAAC,EAAE,UAAaD,EAAE,MAAMC,CAAC,CAAC,EAC3C,KAAK,QAAQ,WAAW,CAC1B,CACA,mBAA2C,CACzC,MAAO,CAAC,OAAO,KAAK,SAAS,KAAK,QAAQ,CAC5C,CACA,kBAAkBD,EAAwB,CACxC,KAAK,SAAWA,EAAE,QACpB,CACA,SAASE,EAAMC,EAAQ,CACfD,EAAK,QAAU,QACf,QAAQ,IAAI,sEAAsEC,CAAK,kBAAkBD,EAAK,OAAO,SAAS,EAAE,CAAC,EAAE,EACnI,QAAQ,IAAI,2CAA2C,GAE3D,KAAK,KAAO,WAAW,KAAKA,CAAI,CACpC,CACC,QAAQA,EAAM,CAEX,GAAIA,EAAK,QAAU,IAAU,IAAK,CAC/B,IAAIE,EAAS,IAAIC,EAAO,KAAMH,CAAI,EAClC,KAAK,MAAM,CAAC,EAAIE,EAChB,KAAK,MAAM,CACd,KAAO,CAIJ,GAFA,MAAM,QAAQF,CAAI,EAEdI,EAAa,KAAK,IAAI,MAAM,EAAG,CAAC,EAAG,CAAC,EAAM,EAAM,GAAM,CAAI,CAAC,EAC5D,KAAK,UAAY,KAAK,IAAI,EAAI,EAAK,KAAK,IAAI,EAAI,GAAK,EACrD,KAAK,SAAW,OACZ,CAEJ,IAAMC,EAAS,KAAK,IAAI,CAAC,EAAK,KAAK,IAAI,CAAC,GAAK,EACvCC,EAAO,KAAK,IAAI,CAAC,EAAK,KAAK,IAAI,CAAC,GAAK,EACvCC,EAAcF,EAAS,OACrBA,EAASC,EAAO,QACfD,GAAU,OAAUA,EAAS,MAAS,GACzCC,GAAQN,EAAK,OAAS,GAAKO,GAC5B,KAAK,UAAYF,EACjB,KAAK,SAAW,IAGhB,KAAK,UAAY,KACjB,KAAK,SAAW,EAEtB,CACA,KAAK,MAAM,CAAC,EAAI,KAAK,SACxB,CACH,CACA,oBAAqB,CAClB,QAAQ,IAAI,yCAA0C,KAAK,UAAU,SAAS,EAAE,CAAC,EAAE,EAEnF,IAAMG,EAAU,KAAK,IAAI,MAAM,KAAK,SAAU,KAAK,SAAW,KAAK,IAAI,OAAS,KAAK,SAAS,EAC9F,KAAK,IAAI,IAAIA,EAAS,KAAK,SAAS,EAEhC,KAAK,UAAY,KAClB,KAAK,IAAI,KAAM,EAAI,GACnB,KAAK,IAAI,KAAM,EAAI,EAEzB,CACD,OAAQ,CACN,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,KAAK,IAAI,KAAK,EAAG,IAAO,IAAK,EAE7B,MAAM,MAAM,EACZ,KAAK,SAAS,CAChB,CACA,UAAW,CAET,QAAST,EAAE,EAAGA,EAAE,MACd,KAAK,IAAI,aAAa,EACjB,KAAK,IAAI,MAAM,GAAG,GAAM,KAFNA,IAEvB,CAGF,QAASA,EAAE,EAAGA,EAAE,MACd,KAAK,IAAI,aAAa,EACjB,OAAK,IAAI,MAAM,GAAG,EAAK,MAFLA,IAEvB,CAEJ,CACC,UAAUU,EAAyB,CAChC,GAAIA,EAAU,MACX,OAAO,KAAK,IAAIA,CAAO,EACnB,GAAIA,GAAW,MACnB,OAAK,KAAK,eAEDA,GAAW,MACV,KAAK,IAAIA,CAAO,EAEhB,KAAK,IAAIA,EAAU,KAAK,aAAa,EAJrC,KAAK,KAAKA,GAAW,MAAU,KAAK,KAAK,OAAO,EAKtD,GAAIA,GAAW,OAAUA,EAAU,MAAQ,CAC/C,IAAIZ,EAAQY,GAAW,EAAK,EAC5B,OAAQ,KAAK,MAAMZ,CAAI,GAAK,KAAK,MAAMA,CAAI,EAAE,UAAUY,EAAU,GAAI,GAAK,CAC7E,KACG,OAAO,EAEb,CACD,KAAKA,EAAyB,CAE5B,GADAA,GAAW,MACPA,EAAU,OAAUA,GAAW,MACjC,OAAO,KAAK,UAAUA,CAAO,EACxB,GAAIA,EAAU,MAAQ,CAC3B,KAAK,MAAM,UAAUA,EAAS,CAAC,EAC/B,IAAIZ,EAAQY,GAAW,EAAK,GAC5B,OAAQZ,EACR,CACG,IAAK,GACF,OAAO,KAAK,SACf,IAAK,GACF,KAAK,UAAY,IACjB,MACH,IAAK,GACF,KAAK,WAAa,KAAK,WAAa,EACpC,MACH,IAAK,IACGY,EAAU,IAAQ,KAEfA,EAAU,IAAM,EAClB,KAAK,SAAS,UAAY,IAAOA,GAAW,EAAK,GAEjD,KAAK,SAAS,UAAY,EAAE,IAAOA,GAAW,EAAK,KAEzD,MACH,IAAK,GAEF,OAAQA,EAAU,EAAG,CAElB,IAAK,GACL,IAAK,GACL,IAAK,GACF,OAAO,KAAK,SAAS,EAAI,IAE5B,IAAK,GACL,IAAK,GACF,OAAO,KAAK,SAAS,EAAI,IAC5B,QACG,OAAO,KAAK,SAAS,CAC3B,CACH,IAAK,GAEF,GAAIA,GAAW,MACZ,OAAO,KAAK,SAAS,EAAI,IAC/B,IAAK,GACF,OAAO,KAAK,iBAAiBA,CAAO,EACvC,IAAK,GAAG,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IACvD,OAAQ,KAAK,MAAMZ,EAAK,CAAC,GAAK,KAAK,MAAMA,EAAK,CAAC,EAAE,KAAKY,EAAU,EAAG,GAAK,CAC9E,CACF,SAAWA,GAAW,OAAUA,EAAU,MAAQ,CAChD,IAAIZ,EAAQY,GAAW,EAAK,EAC5B,OAAQ,KAAK,MAAMZ,CAAI,GAAK,KAAK,MAAMA,CAAI,EAAE,QAAQY,EAAU,GAAI,GAAK,CAC1E,CACA,OAAO,KAAK,SAAS,CACvB,CACA,MAAMA,EAAgBC,EAAmB,CAGvC,GAFAD,GAAW,MACXC,GAAO,IACHD,EAAU,MACZ,KAAK,IAAIA,CAAO,EAAIC,EACpB,KAAK,QAAQD,GAAS,CAAC,EAAI,UAClBA,EAAU,MACnB,KAAK,KAAKA,CAAO,UACRA,EAAU,MAAQ,CAC1B,IAAIZ,EAAQY,GAAW,EAAK,GAC5B,KAAK,MAAMZ,EAAK,CAAC,GAAK,KAAK,MAAMA,EAAK,CAAC,EAAE,MAAMY,EAAU,GAAKC,CAAG,EACjE,KAAK,MAAM,WAAWD,EAASC,CAAG,CACrC,MAAWD,GAAW,OAAU,CAAC,KAAK,eAChCA,GAAW,MACb,KAAK,IAAIA,CAAO,EAAIC,EAEpB,KAAK,IAAID,EAAU,KAAK,aAAa,EAAIC,EAE/C,CAMA,UAAoB,CACjB,IAAIC,EAAO,KAAK,YACZC,EAAQ,KAAK,MAAMD,EAAO,EAAE,EAC5BE,EAAO,KAAK,MAAMF,EAAO,EAAE,EAC3BG,EAAO,KAAK,QAAQ,sBAAsBF,CAAK,EACnD,OAAO,KAAK,UAAUE,EAAOD,CAAI,CACpC,CAEA,aAAaE,EAAoB,CAC/B,MAAM,aAAaA,CAAM,EACzB,KAAK,QAAU,KAAK,QAAU,IAAIC,GAAc,KAAK,OAAQ,KAAK,QAAQ,CAC5E,CACA,eAAgB,CAChB,CACA,cAAe,CAEf,CACA,aAAaC,EAAe,CAC1B,IAAIC,EAAS,MAAM,aAAaD,CAAI,EACpC,YAAK,SAAW,KAAK,QAAQ,aAAa,EACnCC,CACT,CACA,YAAa,CACX,YAAK,MAAM,WAAW,KAAK,WAAY,CAAC,EACjC,MAAM,WAAW,CAC1B,CAEA,YAAYC,EAAYC,EAAaC,EAAqB,CAEzD,GADA,QAAQ,IAAI,gBAAgBF,CAAG,IAAIC,CAAI,IAAIC,CAAK,EAAE,EAC9CA,EAAQ,EAAkB,CAE3B,OADAD,EAAO,EACCD,EAAK,CACV,IAAK,IAAI,IAAK,IAAI,IAAK,IAAI,IAAK,IAC7B,OACJ,IAAK,GAEH,GADAC,EAAK,EACDC,EAAQ,EAAgB,CAE1B,KAAK,IAAI,MAAM,EACf,MACF,CACA,MACF,IAAK,IAAID,EAAK,GAAI,MAClB,IAAK,IAAIA,EAAK,GAAI,MAClB,IAAK,IAAIA,EAAK,EAAG,MACjB,IAAK,IAAIA,EAAK,GAAI,MAClB,IAAK,IAAIA,EAAK,GAAI,MAClB,IAAK,IAAIA,EAAK,GAAI,MAClB,IAAK,IAAIA,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,IAAID,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACxD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MACzD,IAAK,KAAKD,EAAQC,EAAQ,EAAkB,GAAO,GAAM,MAC3D,QACGD,EAAOD,EAEHC,GAAQ,IAAQA,GAAQ,MAAMA,GAAQ,IAEtCA,GAAQ,IAAMA,EAAO,IAClBC,EAAQ,IAAeD,GAAQ,GAEzC,CACIA,IACF,KAAK,UAAYA,EAAO,KAAQ,IAEpC,CACF,CAEA,iBAAiBX,EAAgB,CAE9B,OAAQA,EAAU,GAAM,CAErB,IAAK,GACL,IAAK,GACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,MAEH,IAAK,GACL,IAAK,GACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,MAEH,IAAK,GACL,IAAK,GACL,IAAK,IACL,IAAK,IACF,KAAK,eAAiB,GACtB,KAAK,aAAe,GACpB,MAEH,IAAK,GACL,IAAK,GACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,MAEH,IAAK,GACL,IAAK,IACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,MAEH,IAAK,GACL,IAAK,IACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,MAEH,IAAK,IACL,IAAK,IACF,KAAK,eAAiB,GACtB,KAAK,WAAa,EAClB,KAAK,aAAe,GACpB,KACN,CACA,YAAK,2BAA2B,EACzB,KAAK,SAAS,CACxB,CAEA,4BAA6B,CAEtB,KAAK,YAAc,EACpB,KAAK,cAAgB,MAErB,KAAK,cAAgB,MACpB,KAAK,YAAc,EACpB,KAAK,cAAgB,MAErB,KAAK,cAAgB,KAC3B,CAEA,oBAAqB,CACnB,MAAO,CAAC,MAAM,QAAQ,MAAM,MAAM,CACpC,CACA,aAAaa,EAAiBC,EAAoB,CAChD,OAAQD,EAAU,CAChB,IAAK,MAAQ,MAAO,mBAAqBC,EAAM,WAC5C;AAAA,kBAAuBA,EAAM,eAC7B;AAAA,kBAAuB,CAACA,EAAM,aAC9B;AAAA;AAAA,eAAsBC,GAAWD,EAAM,SAAU,CAAC,WAAW,QAAQ,QAAQ,OAAO,EAAG,EAAK,EAC5F;AAAA,EACH,IAAK,OAAQ,OAAQ,KAAK,MAAM,CAAC,GAAK,KAAK,MAAM,CAAC,EAAE,cAAmB,KAAK,MAAM,CAAC,EAAE,aAAgB,GAAM;AAAA,CAC7G,CACF,CACF,EAEMjC,EAAc,EACdmC,EAAc,EACdC,EAAc,EACdC,EAAc,EAIhBX,GAAgB,SAASD,EAAsBa,EAAuB,CACxE,IAAIC,EAAQ,IACRC,EAAQ,IACRC,EAAU,WACVC,EAAW,WAEXC,EAAY,GACZC,EAAU,IAAI,MAAM,GAAK,EAE7B,IAAMC,EAAgB,IAGhBC,EAAa,CAChBC,EAAK,EAAG,EAAG,CAAC,EACZA,EAAK,IAAK,GAAI,EAAE,EAChBA,EAAK,GAAI,GAAI,GAAG,EAChBA,EAAK,IAAK,GAAI,GAAG,EACjBA,EAAK,EAAG,IAAK,EAAE,EACfA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,GAAI,IAAK,GAAG,EACjBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,GAAI,IAAK,CAAC,EACfA,EAAK,IAAK,IAAK,EAAE,EACjBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,GAAI,IAAK,EAAE,EAChBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,IAAK,GAAG,EAClBA,EAAK,IAAK,IAAK,GAAG,CACrB,EAEMC,EAAW,CACd,EAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IACjD,GAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IACjD,GAAO,IAAO,IAAO,IAAO,IAAO,IAAO,IAAO,GACpD,EAEMC,EAAY,CACf,EAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,GAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,GAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAExD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,IAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KAAQ,KACxD,EAAQ,KAAQ,KAAQ,KAAQ,KAAQ,IAC1C,EAED,IAAIC,EASJ,CACGA,EAAa,IAAI,MAAM,IAAI,EAAE,EAAE,CAAC,EAChC,IAAIzC,EAAE0C,EACFC,EAAGC,EAAGC,GAAK,GACXC,EAAO,EAGX,IAAKJ,EAAE,EAAGA,EAAE,EAAGA,IAGZ,QAASK,EAAG,EAAGA,EAAG,KAAMA,IACxB,EAEQA,EAAK,MAAS,GAEhBJ,EAAK,EAAGC,EAAK,KAGbD,EAAK,EAAGC,EAAK,GAIhB,IAAII,GAAMD,EAAK,MAAU,GAAOA,EAAK,MAAS,GACpCA,EAAK,MAAU,EAEzB,IAAK/C,EAAE,EAAGA,EAAE,EAAGA,IACf,CACG,IAAIiD,GAEE,GAAGjD,EAAGgD,IAAM,GAGT,GAAGhD,EAAGgD,IAAO,GAAGhD,EAEnBiD,EAAI,GAIJA,IAAQP,EAAI1C,GAAK,IAAM,EAAK2C,EAAKC,GAK9B,GAAG5C,EAAGgD,IAAO,GAAGhD,EAEnBiD,IAAQP,EAAI1C,GAAK,IAAM,EAAK2C,EAAKC,EAEjCK,EAAI,EAEVR,EAAWK,CAAI,EAAIT,EAAWY,CAAC,EAC/BH,GACH,CACH,CAEN,CAEA,SAASI,GAAcC,EAAGC,EAAG,EAC7B,CACG,IAAIpD,EAAE8C,EAAKO,EAAIJ,EAGf,IAFAH,GAAQM,GAAG,GAAGtB,EAAQqB,EAAE,EACxBF,EAAIZ,EAAW,EAAI,EAAI,EAClBrC,EAAE,EAAGA,EAAE,EAAGA,IAEZgB,EAAO8B,CAAI,EACX9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EAAIG,EACjBH,GAAQhB,EAGX,IADAmB,EAAIZ,EAAW,GAAK,CAAC,EAChBrC,EAAE,EAAGA,EAAE,EAAGA,IAEZgB,EAAO8B,CAAI,EACX9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EACb9B,EAAO8B,EAAK,CAAC,EAAIG,EACjBH,GAAQhB,CAEd,CAEA,SAASwB,GAAaH,EAAGC,EAAG,EAAGG,EAC/B,CACG,IAAIT,GAAQM,GAAG,GAAGtB,EAAQqB,EAAE,EACxBK,EAAGC,EACHF,GAEDC,EAAKvB,EACLwB,EAAMzB,IAGNwB,EAAKxB,EACLyB,EAAMxB,GAGT,QAASyB,EAAG,EAAGA,EAAG,EAAGA,IACrB,CACG,IAAIC,EAAMC,IAAgB,GAAG,GAAGF,CAAE,EAClC1C,EAAO8B,CAAI,GAAMa,EAAM,IAAM,EAAGH,EAAGC,EACnCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,IAAM,EAAGH,EAAGC,EACrCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,IAAM,EAAGH,EAAGC,EACrCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,GAAK,EAAGH,EAAGC,EACpCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,GAAK,EAAGH,EAAGC,EACpCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,GAAK,EAAGH,EAAGC,EACpCzC,EAAO8B,EAAK,CAAC,GAAMa,EAAM,GAAK,EAAGH,EAAGC,EACpCX,GAAQhB,CACX,CACH,CAEC,KAAK,sBAAwB,SAASsB,EAAmB,CACtD,IAAIN,EAAON,EAAUY,CAAC,EACtB,OAAKvB,EAAM,SAAWD,IAAcwB,EAAI,KAAO,EAAEvB,EAAM,SAAWH,IAC/DoB,EAAOA,GAASjB,EAAM,SAAWF,EAAY,MAAS,MAEtDmB,EAAQA,EAAO,MAAWjB,EAAM,SAAWF,EAAY,KAAQ,MAC3DmB,CACV,EAED,SAASe,EAAeT,EAAGU,EAC3B,CAEG,QADIC,EAAKX,EAAEtB,EACJsB,EAAIU,EAAMV,IACjB,CACG,IAAIN,EAAON,EAAUY,CAAC,IAAOvB,EAAM,SAAWF,IAAa,EAAK,MAAS,MACzE,GAAI,CAACE,EAAM,MAAMiB,GAAQ,CAAC,EAC1B,CACGiB,GAAMjC,EACN,QACH,CAIA,QAHIa,EAAIC,EACJI,EAAI,EACJD,EAAKlB,EAAM,IAAIiB,CAAI,EAAI,IAClBkB,EAAG,EAAGA,EAAG,GAAIA,IACtB,CAIG,QAHIC,EAAKpC,EAAM,IAAIiB,EAAK,CAAC,EAAI,IACzBoB,EAAKrC,EAAM,IAAIiB,EAAK,CAAC,EAAI,IACzBqB,KAAQnB,EAAE,KAAO,EAAKD,EAAKkB,GAAI,GAAK,KAC/BjE,EAAE,EAAGA,EAAE,EAAGA,IAChBgB,EAAO+C,EAAG/D,CAAC,EAAIyC,EAAW0B,GAAG,EAAEnE,CAAC,EAEnC,QADIoE,KAAQrB,EAAG,KAAO,EAAKkB,EAAKC,GAAI,GAAK,KAChClE,EAAE,EAAGA,EAAE,EAAGA,IAChBgB,EAAO+C,EAAG,EAAE/D,CAAC,EAAIyC,EAAW2B,GAAG,EAAE,KAAKpE,CAAC,EAC1C+D,GAAM,GACNjB,GAAQ,EACRE,EAAIiB,EACJlB,EAAKmB,CACR,CACH,CACH,CAEA,SAASG,EAAcjB,EACvB,CAMG,QAJIN,EAAOP,EAASa,CAAC,IACPvB,EAAM,SAAWF,IAAa,EAAK,KAAQ,MAGhDwB,EAAE,EAAGA,EAAE,GAAIA,IACpB,CACG,IAAIH,EAAInB,EAAM,IAAIiB,EAAKK,CAAC,EAAI,IAExBH,GAAKb,EAAQiB,EAAE,GAAGD,CAAC,IAEpBD,GAAcC,EAAGC,EAAGJ,CAAC,EACrBb,EAAQiB,EAAE,GAAGD,CAAC,EAAIH,EAExB,CACH,CAEA,SAASsB,EAAalB,EAAGmB,EACzB,CAMG,QAJIzB,EAAOP,EAASa,CAAC,IACPvB,EAAM,SAAWF,IAAa,EAAK,KAAQ,MAGhDwB,EAAE,EAAGA,EAAE,GAAIA,IACpB,CACG,IAAIH,EAAInB,EAAM,IAAIiB,EAAKK,CAAC,EAAI,IACxBI,EAEAP,GAAK,IAENO,EAAS,GACDP,GAAK,IAEbO,EAASgB,EACLA,EACDvB,GAAK,GAELA,GAAK,IAERO,EAAS,GAERP,GAAKb,EAAQiB,EAAE,GAAGD,CAAC,IAEpBG,GAAaH,EAAGC,EAAGJ,EAAI,IAAMO,CAAM,EACnCpB,EAAQiB,EAAE,GAAGD,CAAC,EAAIH,EAExB,CACH,CAEA,KAAK,aAAe,SAASwB,EAC7B,CACG,IAAIpB,EACAmB,EAAS,IAAI,KAAK,EAAE,QAAQ,GAAKnC,GAAe,GAAMA,EAQ1D,GALIP,EAAM,UAAYK,IAEnBA,EAAYL,EAAM,SAClB2C,EAAe,IAEdA,EACJ,CAEG,IAAK3C,EAAM,SAAWtC,IAAc,IAAMsC,EAAM,SAAWH,IAAe,EAEvE,IAAK0B,EAAE,EAAGA,EAAE,GAAIA,IACb,QAASD,EAAE,EAAGA,EAAE,GAAIA,IACjBhB,EAAQiB,EAAE,GAAGD,CAAC,EAAI,GAE3B,QAASnD,EAAE,EAAGA,EAAE6B,EAAM,MAAM,OAAQ7B,IACjC6B,EAAM,MAAM7B,CAAC,EAAI,EACvB,CAGA,IAAK6B,EAAM,SAAWtC,IAAc,EAEjC,IAAK6D,EAAE,EAAGA,EAAE,GAAIA,IACbkB,EAAalB,EAAGmB,CAAK,WAGnB1C,EAAM,SAAWD,IAAa,EAChCiC,EAAe,EAAG,GAAG,MAErB,KAAKT,EAAE,EAAGA,EAAE,GAAIA,IACbiB,EAAcjB,CAAC,EAIxB,IAAKvB,EAAM,SAAWtC,IAAc,IAAMsC,EAAM,SAAWH,IAAe,EAEvE,IAAK0B,EAAE,GAAIA,EAAE,GAAIA,IACdkB,EAAalB,EAAGmB,CAAK,WAGnB1C,EAAM,SAAWD,IAAa,EAChCiC,EAAe,IAAK,GAAG,MAEvB,KAAKT,EAAE,GAAIA,EAAE,GAAIA,IACdiB,EAAcjB,CAAC,EAExB,QAASpD,EAAE,EAAGA,EAAE6B,EAAM,MAAM,OAAQ7B,IACjC6B,EAAM,MAAM7B,CAAC,EAAI,EACvB,EAEA,KAAK,WAAa,UAAW,CAC3BkC,EAAY,EACd,CACF,EAIM0B,GAAiB,CACnB,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,EACnC,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,GAAK,EAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EACnC,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,EACnC,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,GAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,GAAK,GAAK,EACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,GAAK,GAAK,EAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,GAAK,EAAK,GAAK,GACnC,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EACnC,EAAK,GAAK,GAAK,GAAK,EAAK,EAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,EAAK,EAAK,EAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GAAK,GACnC,EAAK,GAAK,GAAK,GAAK,GAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EACnC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,EAAK,EAAK,GAAK,GAAK,GAAK,EAAK,EACnC,EAAK,EAAK,EAAK,GAAK,EAAK,GAAK,EAAK,EACnC,EAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACnC,EAAK,GAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACvC,EAGM/D,GAAgB,+3DAOnB,IAAM4E,EAAa,GACbC,EAAa,KACbC,GAAc,IAEdC,GAAc,CACjB,IAAK,GAAK,IAAK,EAAK,IAAK,EAAK,IAAK,GAAK,IAAK,GAAK,GAAK,GAAK,IAAK,GAAK,EAAK,GAC1E,GAAK,IAAK,GAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,EAAK,IAAK,IAAK,GAC3E,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,EAAK,EAAK,GAAK,GAAK,GAAK,GAAK,IAAK,GAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAC3E,IAAK,GAAK,EAAK,GAAK,EAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GACrC,IAAK,EAAK,IAAK,IACjC,GAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,GAAK,EAAK,IAAK,IAC3E,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAC3E,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,EAAK,GAAK,IAAK,IAAK,GAAK,IAAK,IAC3E,GAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,IAAK,IAAK,GAAK,IAAK,GAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAC3E,IAAK,EAAK,IAAK,GAAK,IAAK,IAAK,EAAK,EAAK,IAAK,IAAK,IAAK,GAAK,IAAK,IAAK,IAAK,GAC3E,IAAK,GAAK,IAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,EAAK,IAAK,IAAK,IAAK,EAAK,IAAK,GAAK,IAAK,GAAK,IAAK,IAAK,GAAK,GAAK,EAC3E,EAAK,GAAK,GAAK,EAAK,EAAK,GAAK,IAAK,GAAK,IAAK,IAAK,IAAK,IAAK,GAAK,IAAK,GAAK,IAC3E,GAAK,IAAK,EAAK,EAAK,IAAK,GAAK,IAAK,IAAK,GAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAA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",
  "names": ["AppleII", "BasicScanlineMachine", "MOS6502", "GR_TXMODE", "a", "pc", "v", "lzgmini", "stringToByteArray", "APPLEIIGO_LZG", "slot", "s", "i", "data", "title", "diskii", "DiskII", "arrayCompare", "origin", "size", "isPlausible", "exedata", "address", "val", "fcyc", "yline", "xcyc", "addr", "pixels", "Apple2Display", "trap", "clocks", "key", "code", "flags", "category", "state", "printFlags", "GR_MIXMODE", "GR_PAGE1", "GR_HIRES", "apple", "XSIZE", "YSIZE", "PIXELON", "PIXELOFF", "oldgrmode", "textbuf", "flashInterval", "loresColor", "RGBA", "text_lut", "hires_lut", "colors_lut", "j", "c1", "c2", "c3", "base", "b1", "b", "c", "drawLoresChar", "x", "y", "adr", "drawTextChar", "invert", "on", "off", "yy", "chr", "apple2_charset", "drawHiresLines", "maxy", "yb", "x1", "b2", "b3", "d1", "d2", "drawLoresLine", "drawTextLine", "flash", "totalrepaint", "NUM_TRACKS", "TRACK_SIZE", "SECTOR_SIZE", "DISKII_PROM", "DiskIIState", "DiskII", "emu", "image", "i", "ofs", "nibblizeTrack", "s", "hex", "value", "address", "phase", "lastphase", "new_track", "byte_translation", "skewing_table", "nibblizeSector", "vol", "trk", "sector", "inn", "in_ofs", "out", "loop", "checksum", "prev_value", "sector_buffer", "out_pos", "APPLE2_PRESETS", "Apple2MAMEPlatform", "BaseMAME6502Platform", "getOpcodeMetadata_6502", "getToolForFilename_6502", "_self", "title", "data", "NewApple2Platform", "Base6502MachinePlatform", "fn", "AppleII", "a", "rom", "PLATFORMS"]
}
