{
  "version": 3,
  "sources": ["../src/platform/x86.ts"],
  "sourcesContent": ["\nimport { Platform  } from \"../common/baseplatform\";\nimport { PLATFORMS, RasterVideo } from \"../common/emu\";\nimport { loadScript } from \"../common/util\";\n\n// PC emulator: https://github.com/copy/v86\n\ndeclare var V86Starter : any;\ndeclare var V86 : any;\ndeclare var CPU : any;\ndeclare var fatfs : any;\n\nconst PC_PRESETS = [\n    {id:'hello.asm', name:'Hello World (ASM)'},\n    {id:'mandelg.asm', name:'Mandelbrot (ASM)'},\n    {id:'snake.c', name:'Snake Game (C)'},\n];\n\nclass FATFSArrayBufferDriver {\n    buffer : ArrayBuffer;\n    data : DataView;\n    sectorSize : number;\n    numSectors : number;\n    constructor(buffer : ArrayBuffer) {\n        this.buffer = buffer;\n        this.data = new DataView(this.buffer);\n        this.sectorSize = 512;\n        this.numSectors = this.buffer.byteLength / this.sectorSize;\n    }\n    readSectors(sector, dest, cb) {\n        var ofs = this.sectorSize * sector;\n        for (var i=0; i<dest.length; i++) {\n            dest[i] = this.data.getUint8(i + ofs);\n        }\n        //console.log('read', sector, dest, cb);\n        cb(null);\n    }\n    writeSectors(sector, data, cb) {\n        var ofs = this.sectorSize * sector;\n        for (var i=0; i<data.length; i++) {\n            this.data.setUint8(i + ofs, data[i]);\n        }\n        //console.log('write', sector, data, cb);\n        cb(null);\n    }\n}\n  \nclass X86PCPlatform implements Platform {\n\n    mainElement : HTMLElement;\n    video : RasterVideo;\n    console_div : HTMLElement;\n\n    emulator;\n    v86;\n    fda_image;\n    fda_driver;\n    fda_fs;\n\n    constructor(mainElement) {\n        //super();\n        this.mainElement = mainElement;\n    }\n    getToolForFilename(s: string): string {\n        if (s.endsWith(\".c\")) return \"smlrc\";\n        return \"yasm\";\n    }\n    getDefaultExtension(): string {\n        return \".asm\";\n    }\n    getPresets() {\n        return PC_PRESETS;\n    }\n    pause(): void {\n        if (this.isRunning()) this.emulator.stop();\n    }\n    resume(): void {\n        if (!this.isRunning()) this.emulator.run();\n    }\n    reset() {\n        this.emulator.restart();\n    }\n    isRunning() {\n        return this.emulator.is_running();\n    }\n    loadROM(title: string, rom: any) {\n        this.fda_fs.writeFile('main.exe', rom, {encoding:'binary'}, (e) => {\n            if (e) throw e;\n            else this.reset();\n        });\n    }\n    async start() {\n        await loadScript('./lib/libv86.js');\n        await loadScript('./lib/fatfs.js');\n\n        this.video = new RasterVideo(this.mainElement,640,480,{overscan:false});\n        this.video.create();\n\n        var div = document.createElement('div');\n        div.classList.add('pc-console');\n        div.classList.add('emuvideo');\n        this.mainElement.appendChild(div);\n        this.console_div = div;\n        this.resize(); // set font size\n\n        this.emulator = new V86Starter({\n            memory_size: 2 * 1024 * 1024,\n            vga_memory_size: 1 * 1024 * 1024,\n            screen_container: this.mainElement,\n            bios: {\n                url: \"./res/seabios.bin\",\n            },\n            vga_bios: {\n                url: \"./res/vgabios.bin\",\n            },\n            fda: {\n                url: \"./res/freedos722.img\",\n                size: 737280,\n            },\n            autostart: true,\n        });\n        return new Promise<void>( (resolve, reject) => {\n            this.emulator.add_listener(\"emulator-ready\", () => {\n                console.log(\"emulator ready\");\n                console.log(this.emulator);\n                this.v86 = this.emulator.v86;\n                this.fda_image = this.v86.cpu.devices.fdc.fda_image;\n                this.fda_driver = new FATFSArrayBufferDriver(this.fda_image.buffer);\n                this.fda_fs = fatfs.createFileSystem(this.fda_driver);\n                resolve();\n            });\n        });\n    }\n\n    resize() {\n        // set font size proportional to window width\n        var charwidth = $(this.console_div).width() * 1.7 / 80;\n        $(this.console_div).css('font-size', charwidth+'px');\n    }\n\n    getDebugTree() {\n        return this.v86;\n    }\n    readAddress(addr:number) {\n        return this.v86.cpu.mem8[addr];\n    }\n    getMemoryMap() { return { main:[\n        {name:'Real Mode IVT',start:0x0,size:0x400,type:'ram'},\n        {name:'BIOS Data Area',start:0x400,size:0x100,type:'ram'},\n        {name:'User RAM',start:0x500,size:0x80000-0x500,type:'ram'},\n        {name:'Extended BIOS Data Area',start:0x80000,size:0x20000,type:'ram'},\n        {name:'Video RAM',start:0xa0000,size:0x20000,type:'ram'},\n        {name:'Video BIOS',start:0xc0000,size:0x8000,type:'rom'},\n        {name:'BIOS Expansions',start:0xc8000,size:0x28000,type:'rom'},\n        {name:'PC BIOS',start:0xf0000,size:0x10000,type:'rom'},\n    ] } };\n\n    getROMExtension(rom : Uint8Array) {\n        return \".exe\";\n    }\n}\n\nPLATFORMS['x86'] = X86PCPlatform;\n"],
  "mappings": "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",
  "names": ["PC_PRESETS", "FATFSArrayBufferDriver", "buffer", "sector", "dest", "cb", "ofs", "i", "data", "X86PCPlatform", "mainElement", "s", "title", "rom", "e", "loadScript", "RasterVideo", "div", "resolve", "reject", "charwidth", "addr", "PLATFORMS"]
}
