{
  "version": 3,
  "sources": ["../src/common/basic/runtime.ts", "../src/platform/basic.ts"],
  "sourcesContent": ["\nimport * as basic from \"./compiler\";\nimport { EmuHalt } from \"../emu\";\nimport { SourceLocation } from \"../workertypes\";\nimport { isArray } from \"../util\";\n\nfunction isLiteral(arg: basic.Expr): arg is basic.Literal {\n    return (arg as any).value != null;\n}\nfunction isLookup(arg: basic.Expr): arg is basic.IndOp {\n    return (arg as any).name != null;\n}\nfunction isBinOp(arg: basic.Expr): arg is basic.BinOp {\n    return (arg as any).op != null && (arg as any).left != null && (arg as any).right != null;\n}\nfunction isUnOp(arg: basic.Expr): arg is basic.UnOp {\n    return (arg as any).op != null && (arg as any).expr != null;\n}\n\nexport interface InputResponse {\n    line: string;\n    vals: string[];\n    elapsed?: number;\n}\n\n// expr2js() options\nclass ExprOptions {\n    isconst?: boolean;      // only allow constant operations\n    novalid?: boolean;      // check for valid values when fetching\n    locals?: string[];      // pass local variable names when defining functions\n}\n\ninterface CompiledStatement {\n    $run?: () => void;\n}\n\nclass RNG {\n    next : () => number;\n    seed : (aa,bb,cc,dd) => void;\n    seedfloat : (n) => void;\n    randomize() {\n        this.seed(Math.random()*0x7fffffff, Math.random()*0x7fffffff, Math.random()*0x7fffffff, Math.random()*0x7fffffff);\n    }\n    constructor() {\n        let f = () => {\n            var a, b, c, d : number;\n            this.seed = function(aa,bb,cc,dd) {\n                a = aa; b = bb; c = cc; d = dd;\n            }\n            this.seedfloat = function(n) {\n                this.seed(n, n*4294, n*429496, n*4294967296);\n                this.next(); this.next(); this.next();\n            }\n            this.next = function() {\n                // sfc32\n                a >>>= 0; b >>>= 0; c >>>= 0; d >>>= 0; \n                var t = (a + b) | 0;\n                a = b ^ b >>> 9;\n                b = c + (c << 3) | 0;\n                c = (c << 21 | c >>> 11);\n                d = d + 1 | 0;\n                t = t + d | 0;\n                c = c + t | 0;\n                return (t >>> 0) / 4294967296;\n            }\n        };\n        f();\n        this.seedfloat(-1);\n    }\n};\n\nconst DEFAULT_MAX_ARRAY_ELEMENTS = 1024*1024;\n\nexport class BASICRuntime {\n\n    program : basic.BASICProgram;\n    allstmts : basic.Statement[];\n    pc2label : Map<number,string>;\n    label2pc : {[label : string] : number};\n    label2dataptr : {[label : string] : number};\n    datums : basic.Literal[];\n    builtins : {};\n    opts : basic.BASICOptions;\n    margin : number = 80; // number of columns\n\n    curpc : number;\n    dataptr : number;\n    vars : {[name:string] : any}; // actually Value, but += doesn't work\n    globals : {[name:string] : any};\n    arrays : {};\n    defs : {};\n    subroutines : {};\n    forLoops : { [varname:string] : { $next:(name:string) => void } };\n    forLoopStack: string[];\n    whileLoops : number[];\n    returnStack : number[];\n    column : number;\n    rng : RNG;\n\n    running : boolean = false;\n    exited : boolean = true;\n    trace : boolean = false;\n\n    load(program: basic.BASICProgram) : boolean {\n        // get previous label and offset for hot reload\n        let prevlabel = null;\n        let prevpcofs = 0;\n        if (this.pc2label != null) {\n            let pc = this.curpc;\n            while (pc > 0 && (prevlabel = this.pc2label.get(pc)) == null) {\n                pc--;\n            }\n            prevpcofs = this.curpc - pc;\n            console.log('oldpc=', this.curpc, 'restart @ label', prevlabel, '+', prevpcofs);\n        }\n        // initialize program\n        this.program = program;\n        this.opts = program.opts;\n        if (!this.opts.maxArrayElements) this.opts.maxArrayElements = DEFAULT_MAX_ARRAY_ELEMENTS;\n        this.allstmts = program.stmts;\n        this.label2pc = program.labels;\n        this.label2dataptr = {};\n        this.pc2label = new Map();\n        this.datums = [];\n        this.subroutines = {};\n        this.builtins = this.getBuiltinFunctions();\n        // TODO: detect undeclared vars\n        // build PC -> label lookup\n        for (var label in program.labels) {\n            var targetpc = program.labels[label];\n            this.pc2label.set(targetpc, label);\n        }\n        // iterate through all the statements\n        this.allstmts.forEach((stmt, pc) => {\n            // compile statements ahead of time\n            this.curpc = pc + 1; // for error reporting\n            this.compileStatement(stmt);\n            // parse DATA literals\n            if (stmt.command == 'DATA') {\n                this.label2dataptr[stmt.$loc.label] = this.datums.length;\n                (stmt as basic.DATA_Statement).datums.forEach(datum => {\n                    this.curpc = stmt.$loc.offset; // for error reporting\n                    this.datums.push(datum);\n                });\n            }\n        });\n        // try to resume where we left off after loading\n        if (this.label2pc[prevlabel] != null) {\n            this.curpc = this.label2pc[prevlabel] + prevpcofs;\n            return true;\n        } else {\n            this.curpc = 0;\n            return false;\n        }\n    }\n\n    reset() {\n        this.curpc = 0;\n        this.dataptr = 0;\n        this.clearVars();\n        this.returnStack = [];\n        this.column = 0;\n        this.running = true;\n        this.exited = false;\n    }\n    clearVars() {\n        this.globals = this.vars = {};\n        this.arrays = {};\n        this.defs = {}; // TODO? only in interpreters\n        this.forLoops = {};\n        this.forLoopStack = [];\n        this.whileLoops = [];\n        this.rng = new RNG();\n        // initialize arrays?\n        if (this.opts && this.opts.staticArrays) {\n            this.allstmts.filter((stmt) => stmt.command == 'DIM').forEach((dimstmt: basic.DIM_Statement) => {\n                dimstmt.args.forEach( (arg) => this.compileJS(this._DIM(arg))() );\n            });\n        }\n    }\n    \n    // TODO: saveState(), loadState()\n    saveState() {\n        // TODO: linked list loop?\n        return $.extend(true, {}, this);\n    }\n    loadState(state) {\n        $.extend(true, this, state);\n    }\n    \n    getBuiltinFunctions() {\n        var fnames = this.program && this.opts.validFunctions;\n        // if no valid function list, look for ABC...() functions in prototype\n        if (!fnames) fnames = Object.getOwnPropertyNames(BASICRuntime.prototype).filter((name) => /^[A-Z]{3,}[$]?$/.test(name));\n        var dict = {};\n        for (var fn of fnames) if (this.supportsFunction(fn)) dict[fn] = this[fn].bind(this);\n        return dict;\n    }\n    supportsFunction(fnname: string) {\n        return typeof this[fnname] === 'function';\n    }\n\n    runtimeError(msg : string) {\n        this.curpc--; // we did curpc++ before executing statement\n        throw new EmuHalt(msg, this.getCurrentSourceLocation());\n    }\n    \n    dialectError(what : string) {\n        this.runtimeError(`I can't ${what} in this dialect of BASIC.`);\n    }\n\n    getLineForPC(pc:number) {\n        var stmt = this.allstmts[pc];\n        return stmt && stmt.$loc && stmt.$loc.line;\n    }\n\n    getLabelForPC(pc:number) {\n        var stmt = this.allstmts[pc];\n        return stmt && stmt.$loc && stmt.$loc.label;\n    }\n\n    getCurrentSourceLocation() : SourceLocation {\n        var stmt = this.getStatement();\n        return stmt && stmt.$loc;\n    }\n\n    getCurrentLabel() : string {\n        var loc = this.getCurrentSourceLocation();\n        return loc && loc.label;\n    }\n\n    getStatement() {\n        return this.allstmts[this.curpc];\n    }\n\n    step() : boolean {\n        if (!this.running) return false;\n        var stmt = this.getStatement();\n        // end of program?\n        if (!stmt) {\n            this.running = false;\n            this.exited = true;\n            return false;\n        }\n        if (this.trace) console.log(this.curpc, stmt, this.vars, Object.keys(this.arrays));\n        // skip to next statment\n        this.curpc++;\n        // compile (unless cached) and execute statement\n        this.executeStatement(stmt);\n        return this.running;\n    }\n\n    compileStatement(stmt: basic.Statement & CompiledStatement) {\n        if (stmt.$run == null) {\n            try {\n                var stmtfn = this['do__' + stmt.command];\n                if (stmtfn == null) this.runtimeError(`I don't know how to \"${stmt.command}\".`);\n                var functext = stmtfn.bind(this)(stmt);\n                if (this.trace) console.log(functext);\n                stmt.$run = this.compileJS(functext);\n            } catch (e) {\n                if (functext) console.log(functext);\n                throw e;\n            }\n        }\n    }\n    compileJS(functext: string) : () => void {\n        return new Function(functext).bind(this);\n    }\n    executeStatement(stmt: basic.Statement & CompiledStatement) {\n        // compile (unless cached)\n        this.compileStatement(stmt);\n        // run compiled statement\n        stmt.$run();\n    }\n\n    // TODO: this only works because each line has a label\n    skipToEOL() {\n        do {\n            this.curpc++;\n        } while (this.curpc < this.allstmts.length && !this.pc2label.get(this.curpc));\n    }\n\n    skipToElse() {\n        while (this.curpc < this.allstmts.length) {\n            // in Altair BASIC, ELSE is bound to the right-most IF\n            // TODO: this is complicated, we should just have nested expressions\n            var cmd = this.allstmts[this.curpc].command;\n            if (cmd == 'ELSE') { this.curpc++; break; }\n            else if (cmd == 'IF') return this.skipToEOL();\n            this.curpc++;\n            if (this.pc2label.get(this.curpc))\n                break;\n        }\n    }\n\n    skipToEOF() {\n        this.curpc = this.allstmts.length;\n    }\n\n    skipToAfterNext(forname: string) : void {\n        var pc = this.curpc;\n        while (pc < this.allstmts.length) {\n            var stmt = this.allstmts[pc];\n            if (stmt.command == 'NEXT') {\n                var nextlexpr = (stmt as basic.NEXT_Statement).lexpr;\n                if (nextlexpr && nextlexpr.name == forname) {\n                    this.curpc = pc + 1;\n                    return;\n                }\n            }\n            pc++;\n        }\n        this.runtimeError(`I couldn't find a matching NEXT ${forname} to skip this for loop.`);\n    }\n\n    skipToAfterWend() {\n        var pc = this.curpc - 1;\n        var nesting = 0;\n        while (pc < this.allstmts.length) {\n            var stmt = this.allstmts[pc];\n            //console.log(nesting, pc, stmt);\n            if (stmt.command == 'WHILE') {\n                nesting++;\n            } else if (stmt.command == 'WEND') {\n                nesting--;\n                if (nesting == 0) {\n                    this.curpc = pc + 1;\n                    return;\n                }\n            }\n            pc++;\n        }\n        this.runtimeError(`I couldn't find a matching WEND for this WHILE.`);\n    }\n\n    gotoLabel(label) {\n        var pc = this.label2pc[label];\n        if (pc >= 0) {\n            this.curpc = pc;\n        } else {\n            this.runtimeError(`I tried to go to the label \"${label}\" but couldn't find it.`);\n        }\n    }\n\n    newLocalScope() {\n        this.vars = Object.create(this.vars);\n    }\n    \n    popLocalScope() {\n        if (this.vars !== this.globals)\n            this.vars = Object.getPrototypeOf(this.vars);\n    }\n\n    gosubLabel(label) {\n        if (this.returnStack.length > 32767) // TODO: const?\n            this.runtimeError(`I did too many GOSUBs without a RETURN.`)\n        this.returnStack.push(this.curpc);\n        this.gotoLabel(label);\n    }\n\n    returnFromGosub() {\n        if (this.returnStack.length == 0)\n            this.runtimeError(\"I tried to RETURN, but there wasn't a corresponding GOSUB.\"); // RETURN BEFORE GOSUB\n        var pc = this.returnStack.pop();\n        this.curpc = pc;\n        this.popLocalScope();\n    }\n\n    popReturnStack() {\n        if (this.returnStack.length == 0)\n            this.runtimeError(\"I tried to POP, but there wasn't a corresponding GOSUB.\");\n        this.returnStack.pop();\n    }\n\n    valueToString(obj:basic.Value, padding:boolean) : string {\n        var str;\n        if (typeof obj === 'number') {\n            var numstr = this.float2str(obj, this.opts.printZoneLength - 4);\n            if (!padding)\n                return numstr;\n            else if (numstr.startsWith('-'))\n                return `${numstr} `;\n            else\n                return ` ${numstr} `;\n        } else if (obj == '\\n') {\n            this.column = 0;\n            str = obj;\n        } else if (obj == '\\t') {\n            var l = this.opts.printZoneLength;\n            var curgroup = Math.floor(this.column / l);\n            var nextcol = (curgroup + 1) * this.opts.printZoneLength;\n            if (nextcol+l > this.margin) { this.column = 0; str = \"\\n\"; } // return to left margin\n            else str = this.TAB(nextcol); // next column\n        } else {\n            str = `${obj}`;\n        }\n        return str;\n    }\n\n    float2str(arg: number, numlen: number) : string {\n        var numstr = arg.toString().toUpperCase();\n        if (numlen > 0) {\n            var prec = numlen;\n            while (numstr.length > numlen) {\n                numstr = arg.toPrecision(prec--);\n            }\n            if (numstr.startsWith('0.'))\n                numstr = numstr.substr(1);\n            else if (numstr.startsWith('-0.'))\n                numstr = '-'+numstr.substr(2);\n        }\n        return numstr;\n    }\n\n    printExpr(obj) {\n        var str = this.valueToString(obj, this.opts.numericPadding);\n        this.column += str.length;\n        this.print(str);\n    }\n\n    // override this\n    print(str: string) {\n        console.log(str);\n    }\n\n    // override this\n    async input(prompt: string, nargs: number) : Promise<InputResponse> {\n        return {line:\"\", vals:[]};\n    }\n\n    // override this\n    resume() { }\n\n    expr2js(expr: basic.Expr, opts?: ExprOptions) : string {\n        if (!opts) opts = {};\n        if (isLiteral(expr)) {\n            return JSON.stringify(expr.value);\n        } else if (isLookup(expr)) {\n            if (!expr.args && opts.locals && opts.locals.indexOf(expr.name) >= 0) {\n                return expr.name; // local arg in DEF\n            } else {\n                if (opts.isconst)\n                    this.runtimeError(`I expected a constant value here.`); // TODO: check at compile-time?\n                var s = '';\n                var qname = JSON.stringify(expr.name);\n                let jsargs = expr.args ? expr.args.map((arg) => this.expr2js(arg, opts)).join(', ') : [];\n                if (expr.name.startsWith(\"FN\")) { // is it a user-defined function?\n                    // TODO: check argument count?\n                    s += `this.getDef(${qname})(${jsargs})`;\n                    // TODO: detect recursion?\n                } else if (this.builtins[expr.name]) { // is it a built-in function?\n                    this.checkFuncArgs(expr, this.builtins[expr.name]);\n                    s += `this.builtins.${expr.name}(${jsargs})`;\n                } else if (expr.args) {\n                    // get array slice (HP BASIC)\n                    if (this.opts.arraysContainChars && expr.name.endsWith('$'))\n                        s += `this.getStringSlice(this.vars.${expr.name}, ${jsargs})`;\n                    else\n                        s += `this.arrayGet(${qname}, ${jsargs})`;\n                } else { // just a variable\n                    s += `this.vars.${expr.name}`;\n                }\n                return opts.novalid ? s : `this.checkValue(${s}, ${qname})`;\n            }\n        } else if (isBinOp(expr)) {\n            var left = this.expr2js(expr.left, opts);\n            var right = this.expr2js(expr.right, opts);\n            return `this.${expr.op}(${left}, ${right})`;\n        } else if (isUnOp(expr)) {\n            var e = this.expr2js(expr.expr, opts);\n            return `this.${expr.op}(${e})`;\n        }\n    }\n\n    assign2js(expr: basic.IndOp, opts?: ExprOptions) : string {\n        if (!opts) opts = {};\n        var s = '';\n         // is it a function? not allowed\n        if (expr.name.startsWith(\"FN\") || this.builtins[expr.name])\n            this.runtimeError(`I can't call a function here.`);\n        // is it a subscript?\n        if (expr.args) {\n            // TODO: set array slice (HP BASIC)\n            if (this.opts.arraysContainChars && expr.name.endsWith('$')) {\n                this.runtimeError(`I can't set array slices via this command yet.`);\n            } else {\n                s += this.array2js(expr, opts);\n            }\n        } else { // just a variable\n            s = `this.globals.${expr.name}`;\n        }\n        return s;\n    }\n\n    array2js(expr: basic.IndOp, opts?: ExprOptions) : string {\n        var qname = JSON.stringify(expr.name);\n        var args = expr.args || [];\n        return this.expr2js(expr, {novalid:true}) // check array bounds\n             + `;this.getArray(${qname}, ${args.length})`\n             + args.map((arg) => '[this.ROUND('+this.expr2js(arg, opts)+')]').join('');\n    }\n\n    checkFuncArgs(expr: basic.IndOp, fn: Function) {\n        // TODO: check types?\n        var nargs = expr.args ? expr.args.length : 0;\n        // exceptions\n        if (expr.name == 'RND' && nargs == 0) return;\n        if (expr.name == 'MID$' && nargs == 2) return;\n        if (expr.name == 'INSTR' && nargs == 2) return;\n        if (fn.length != nargs)\n            this.runtimeError(`I expected ${fn.length} arguments for the ${expr.name} function, but I got ${nargs}.`);\n    }\n\n    startForLoop(forname:string, init:number, targ:number, step?:number, endpc?:number) {\n        // save start PC and label in case of hot reload (only works if FOR is first stmt in line)\n        var looppc = this.curpc - 1;\n        var looplabel = this.pc2label.get(looppc);\n        if (!step) step = 1;\n        this.vars[forname] = init;\n        if (this.trace) console.log(`FOR ${forname} = ${init} TO ${targ} STEP ${step}`);\n        // create done function\n        var loopdone = () => {\n            return step >= 0 ? this.vars[forname] > targ : this.vars[forname] < targ;\n        }\n        // skip entire for loop before first iteration? (Minimal BASIC)\n        if (this.opts.testInitialFor && loopdone()) {\n            if (endpc != null)\n                this.curpc = endpc+1;\n            else\n                this.skipToAfterNext(forname);\n        }\n        // save for var name on stack, remove existing entry\n        if (this.forLoopStack[forname] != null)\n            this.forLoopStack = this.forLoopStack.filter((n) => n == forname);\n        this.forLoopStack.push(forname);\n        // create for loop record\n        this.forLoops[forname] = {\n            $next: (nextname:string) => {\n                if (nextname && forname != nextname)\n                    this.runtimeError(`I executed NEXT \"${nextname}\", but the last FOR was for \"${forname}\".`)\n                this.vars[forname] += step;\n                var done = loopdone();\n                if (done) {\n                    // delete entry, pop FOR off the stack and continue\n                    this.forLoopStack.pop();\n                    delete this.forLoops[forname];\n                } else {\n                    // go back to FOR loop, adjusting for hot reload (fetch pc by label)\n                    this.curpc = ((looplabel != null && this.label2pc[looplabel]) || looppc) + 1;\n                }\n                if (this.trace) console.log(`NEXT ${forname}: ${this.vars[forname]} TO ${targ} STEP ${step} DONE=${done}`);\n            }\n        };\n    }\n\n    nextForLoop(name) {\n        // get FOR loop entry, or get top of stack if NEXT var is optional \n        var fl = this.forLoops[name || (this.opts.optionalNextVar && this.forLoopStack[this.forLoopStack.length-1])];\n        if (!fl) this.runtimeError(`I couldn't find a matching FOR for this NEXT.`)\n        fl.$next(name);\n    }\n\n    whileLoop(cond) {\n        if (cond) {\n            this.whileLoops.push(this.curpc-1);\n        } else {\n            this.skipToAfterWend();\n        }\n    }\n\n    nextWhileLoop() {\n        var pc = this.whileLoops.pop();\n        if (pc == null) this.runtimeError(`I couldn't find a matching WHILE for this WEND.`);\n        else this.curpc = pc;\n    }\n\n    // converts a variable to string/number based on var name\n    assign(name: string, right: number|string, isRead?:boolean) : number|string {\n        // convert data? READ always converts if read into string\n        if (isRead && name.endsWith(\"$\"))\n            return this.checkValue(this.convert(name, right), name);\n        // TODO: use options\n        if (name.endsWith(\"$\")) {\n            return this.convertToString(right, name);\n        } else {\n            return this.convertToNumber(right, name);\n        }\n    }\n\n    convert(name: string, right: number|string) : number|string {\n        if (name.endsWith(\"$\")) {\n            return right == null ? \"\" : right.toString();\n        } else if (typeof right === 'number') {\n            return right;\n        } else {\n            return parseFloat(right+\"\");\n        }\n    }\n\n    convertToString(right: number|string, name?: string) {\n        if (typeof right !== 'string') this.runtimeError(`I can't convert ${right} to a string.`);\n        else return right;\n    }\n\n    convertToNumber(right: number|string, name?: string) {\n        if (typeof right !== 'number') this.runtimeError(`I can't convert ${right} to a number.`);\n        else return this.checkNum(right);\n    }\n\n    // dimension array\n    dimArray(name: string, ...dims:number[]) {\n        // TODO: maybe do this check at compile-time?\n        dims = dims.map(Math.round);\n        if (this.arrays[name] != null) {\n            if (this.opts.staticArrays) return;\n            else this.runtimeError(`I already dimensioned this array (${name}) earlier.`)\n        }\n        var total = this.getTotalArrayLength(dims);\n        if (total > this.opts.maxArrayElements)\n            this.runtimeError(`I can't create an array with this many elements.`);\n        var isstring = name.endsWith('$');\n        // if numeric value, we use Float64Array which inits to 0\n        var arrcons = isstring ? Array : Float64Array;\n        if (dims.length == 1) {\n            this.arrays[name] = new arrcons(dims[0]+1);\n        } else if (dims.length == 2) {\n            this.arrays[name] = new Array(dims[0]+1);\n            for (var i=0; i<dims[0]+1; i++) {\n                this.arrays[name][i] = new arrcons(dims[1]+1);\n            }\n        } else {\n            this.runtimeError(`I only support arrays of one or two dimensions.`)\n        }\n    }\n\n    getTotalArrayLength(dims:number[]) {\n        var n = 1;\n        for (var i=0; i<dims.length; i++) {\n            if (dims[i] < this.opts.defaultArrayBase)\n                this.runtimeError(`I can't create an array with a dimension less than ${this.opts.defaultArrayBase}.`);\n            n *= dims[i];\n        }\n        return n;\n    }\n\n    getArray(name: string, order: number) : [] {\n        if (!this.arrays[name]) {\n            if (this.opts.defaultArraySize == 0)\n                this.dialectError(`automatically declare arrays without a DIM statement (or did you mean to call a function?)`);\n            if (order == 1)\n                this.dimArray(name, this.opts.defaultArraySize-1);\n            else if (order == 2)\n                this.dimArray(name, this.opts.defaultArraySize-1, this.opts.defaultArraySize-1);\n            else\n                this.runtimeError(`I only support arrays of one or two dimensions.`); // TODO\n        }\n        return this.arrays[name];\n    }\n\n    arrayGet(name: string, ...indices: number[]) : basic.Value {\n        var arr = this.getArray(name, indices.length);\n        indices = indices.map(this.ROUND.bind(this));\n        var v = arr;\n        for (var i=0; i<indices.length; i++) {\n            var idx = indices[i];\n            if (!isArray(v))\n                this.runtimeError(`I tried to lookup ${name}(${indices}) but used too many dimensions.`);\n            if (idx < this.opts.defaultArrayBase)\n                this.runtimeError(`I tried to lookup ${name}(${indices}) but an index was less than ${this.opts.defaultArrayBase}.`);\n            if (idx >= v.length) // TODO: also can happen when mispelling function name\n                this.runtimeError(`I tried to lookup ${name}(${indices}) but it exceeded the dimensions of the array.`);\n            v = v[indices[i]];\n        }\n        if (isArray(v)) // i.e. is an array?\n            this.runtimeError(`I tried to lookup ${name}(${indices}) but used too few dimensions.`);\n        return (v as any) as basic.Value;\n    }\n\n    // for HP BASIC string slicing (TODO?)\n    modifyStringSlice(orig: string, add: string, start: number, end: number) : string {\n        orig = orig || \"\";\n        this.checkString(orig);\n        this.checkString(add);\n        if (!end) end = start;\n        start = this.ROUND(start);\n        end = this.ROUND(end);\n        if (start < 1) this.dialectError(`accept a string slice index less than 1`);\n        if (end < start) this.dialectError(`accept a string slice index less than the starting index`);\n        return (orig + ' '.repeat(start)).substr(0, start-1) + add.substr(0, end+1-start) + orig.substr(end);\n    }\n\n    getStringSlice(s: string, start: number, end: number) {\n        s = this.checkString(s);\n        start = this.ROUND(start);\n        if (start < 1) this.dialectError(`accept a string slice index less than 1`);\n        if (end != null) {\n            end = this.ROUND(end);\n            if (end < start) this.dialectError(`accept a string slice index less than the starting index`);\n            return s.substr(start-1, end+1-start);\n        } else {\n            return s.substr(start-1);\n        }\n    }\n\n    checkOnGoto(value: number, labels: string[]) {\n        value = this.ROUND(value);\n        if (value < 0) // > 255 ?\n            this.runtimeError(`I needed a number between 1 and ${labels.length}, but I got ${value}.`);\n        if (this.opts.checkOnGotoIndex && (value < 1 || value > labels.length))\n            this.runtimeError(`I needed a number between 1 and ${labels.length}, but I got ${value}.`);\n        if (value < 1 || value > labels.length)\n            return 0;\n        return value;\n    }\n    \n    onGotoLabel(value: number, ...labels: string[]) {\n        value = this.checkOnGoto(value, labels);\n        if (value) this.gotoLabel(labels[value-1]);\n    }\n    onGosubLabel(value: number, ...labels: string[]) {\n        value = this.checkOnGoto(value, labels);\n        if (value) this.gosubLabel(labels[value-1]);\n    }\n\n    nextDatum() : basic.Value {\n        if (this.dataptr >= this.datums.length)\n            this.runtimeError(\"I tried to READ, but ran out of data.\");\n        return this.datums[this.dataptr++].value;\n    }\n\n    //// STATEMENTS\n\n    do__PRINT(stmt : basic.PRINT_Statement) {\n        var s = '';\n        for (var arg of stmt.args) {\n            var expr = this.expr2js(arg);\n            var name = (expr as any).name;\n            s += `this.printExpr(this.checkValue(${expr}, ${JSON.stringify(name)}));`;\n        }\n        return s;\n    }\n\n    preInput() {\n        this.running=false;\n        this.curpc--;\n    }\n\n    postInput(valid : boolean) {\n        if (valid) this.curpc++;\n        this.running = true;\n        this.resume();\n    }\n\n    do__INPUT(stmt : basic.INPUT_Statement) {\n        var prompt = stmt.prompt != null ? this.expr2js(stmt.prompt) : '\"\"';\n        var elapsed = stmt.elapsed != null ? this.assign2js(stmt.elapsed) : \"let ___\";\n        var setvals = '';\n        stmt.args.forEach((arg, index) => {\n            var lexpr = this.assign2js(arg);\n            setvals += `\n            var value = this.convert(${JSON.stringify(arg.name)}, response.vals[${index}]);\n            valid &= this.isValid(value);\n            ${lexpr} = value;\n            `\n        });\n        return `this.preInput();\n                this.input(${prompt}, ${stmt.args.length}).then((response) => {\n                    let valid = 1;\n                    ${setvals}\n                    this.postInput(valid);\n                    this.column = 0; // assume linefeed\n                    ${elapsed} = response.elapsed;\n                })`;\n    }\n\n    do__LET(stmt : basic.LET_Statement) {\n        var right = this.expr2js(stmt.right);\n        var s = `let _right = ${right};`;\n        for (var lexpr of stmt.lexprs) {\n            // HP BASIC string-slice syntax?\n            if (this.opts.arraysContainChars && lexpr.args && lexpr.name.endsWith('$')) {\n                s += `this.globals.${lexpr.name} = this.modifyStringSlice(this.vars.${lexpr.name}, _right, `\n                s += lexpr.args.map((arg) => this.expr2js(arg)).join(', ');\n                s += ');';\n            } else {\n                var ljs = this.assign2js(lexpr);\n                s += `${ljs} = this.assign(${JSON.stringify(lexpr.name)}, _right);`;\n            }\n        }\n        return s;\n    }\n\n    do__FOR(stmt : basic.FOR_Statement) {\n        var name = JSON.stringify(stmt.lexpr.name);\n        var init = this.expr2js(stmt.initial);\n        var targ = this.expr2js(stmt.target);\n        var step = stmt.step ? this.expr2js(stmt.step) : 'null';\n        return `this.startForLoop(${name}, ${init}, ${targ}, ${step}, ${stmt.endpc})`;\n    }\n\n    do__NEXT(stmt : basic.NEXT_Statement) {\n        var name = stmt.lexpr && JSON.stringify(stmt.lexpr.name);\n        return `this.nextForLoop(${name})`;\n    }\n\n    do__IF(stmt : basic.IF_Statement) {\n        var cond = this.expr2js(stmt.cond);\n        if (stmt.endpc != null)\n            return `if (!(${cond})) { this.curpc = ${stmt.endpc}; }`\n        else\n            return `if (!(${cond})) { this.skipToElse(); }`\n    }\n\n    do__ELSE(stmt : basic.ELSE_Statement) {\n        if (stmt.endpc != null)\n            return `this.curpc = ${stmt.endpc}`\n        else\n            return `this.skipToEOL()`\n    }\n\n    do__WHILE(stmt : basic.WHILE_Statement) {\n        var cond = this.expr2js(stmt.cond);\n        if (stmt.endpc != null)\n            return `if (!(${cond})) { this.curpc = ${stmt.endpc+1}; }`;\n        else\n            return `this.whileLoop(${cond})`;\n    }\n\n    do__WEND(stmt : basic.WEND_Statement) {\n        if (stmt.startpc != null)\n            return `this.curpc = ${stmt.startpc}`;\n        else\n            return `this.nextWhileLoop()`\n    }\n\n    do__DEF(stmt : basic.DEF_Statement) {\n        var args = [];\n        for (var arg of stmt.lexpr.args || []) {\n            if (isLookup(arg)) {\n                args.push(arg.name);\n            } else {\n                this.runtimeError(\"I found a DEF statement with arguments other than variable names.\");\n            }\n        }\n        var functext = this.expr2js(stmt.def, {locals:args});\n        //this.defs[stmt.lexpr.name] = new Function(args.join(','), functext).bind(this);\n        return `this.defs.${stmt.lexpr.name} = function(${args.join(',')}) { return ${functext}; }.bind(this)`;\n    }\n\n    _DIM(dim : basic.IndOp) {\n        // HP BASIC doesn't really have string arrays, just strings\n        if (this.opts.arraysContainChars && dim.name.endsWith('$'))\n            return '';\n        // dimension an array\n        var argsstr = '';\n        for (var arg of dim.args) {\n            argsstr += ', ' + this.expr2js(arg, {isconst: this.opts.staticArrays});\n        }\n        return `this.dimArray(${JSON.stringify(dim.name)}${argsstr});`;\n    }\n\n    do__DIM(stmt : basic.DIM_Statement) {\n        if (this.opts.staticArrays) return; // DIM at reset()\n        var s = '';\n        stmt.args.forEach((dim) => s += this._DIM(dim));\n        return s;\n    }\n\n    do__GOTO(stmt : basic.GOTO_Statement) {\n        var label = this.expr2js(stmt.label);\n        return `this.gotoLabel(${label})`;\n    }\n\n    do__GOSUB(stmt : basic.GOSUB_Statement) {\n        var label = this.expr2js(stmt.label);\n        return `this.gosubLabel(${label})`;\n    }\n\n    do__RETURN(stmt : basic.RETURN_Statement) {\n        return `this.returnFromGosub()`;\n    }\n\n    do__ONGOTO(stmt : basic.ONGO_Statement) {\n        var expr = this.expr2js(stmt.expr);\n        var labels = stmt.labels.map((arg) => this.expr2js(arg, {isconst:true})).join(', ');\n        if (stmt.command == 'ONGOTO')\n            return `this.onGotoLabel(${expr}, ${labels})`;\n        else\n            return `this.onGosubLabel(${expr}, ${labels})`;\n    }\n\n    do__ONGOSUB(stmt : basic.ONGO_Statement) {\n        return this.do__ONGOTO(stmt);\n    }\n\n    do__DATA() {\n        // data is preprocessed\n    }\n\n    do__READ(stmt : basic.READ_Statement) {\n        var s = '';\n        stmt.args.forEach((arg) => {\n            s += `${this.assign2js(arg)} = this.assign(${JSON.stringify(arg.name)}, this.nextDatum(), true);`;\n        });\n        return s;\n    }\n\n    do__RESTORE(stmt : basic.RESTORE_Statement) {\n        if (stmt.label != null)\n            return `this.dataptr = this.label2dataptr[${this.expr2js(stmt.label, {isconst:true})}] || 0`;\n        else\n            return `this.dataptr = 0`;\n    }\n\n    do__END() {\n        return `this.skipToEOF()`;\n    }\n\n    do__STOP() {\n        return `this.skipToEOF()`;\n    }\n\n    do__OPTION(stmt: basic.OPTION_Statement) {\n        // already parsed in compiler\n    }\n\n    do__POP() {\n        return `this.popReturnStack()`;\n    }\n\n    do__GET(stmt : basic.GET_Statement) {\n        var lexpr = this.assign2js(stmt.lexpr);\n        // TODO: single key input\n        return `this.preInput();\n                this.input().then((vals) => {\n                    ${lexpr} = this.convert(${JSON.stringify(stmt.lexpr.name)}, vals[0]);\n                    this.postInput(true);\n                })`;\n    }\n\n    do__CLEAR() {\n        return 'this.clearVars()';\n    }\n\n    do__RANDOMIZE() {\n        return `this.rng.randomize()`;\n    }\n\n    do__CHANGE(stmt : basic.CHANGE_Statement) {\n        var arr2str = stmt.dest.name.endsWith('$');\n        if (arr2str) { // array -> string\n            let arrname = (stmt.src as basic.IndOp).name || this.runtimeError(\"I can only change to a string from an array.\");\n            let dest = this.assign2js(stmt.dest);\n            return `\n            let arrname = ${JSON.stringify(arrname)};\n            let len = this.arrayGet(arrname, 0);\n            let s = '';\n            for (let i=0; i<len; i++) {\n                s += String.fromCharCode(this.arrayGet(arrname, i+1));\n            }\n            ${dest} = s;\n            `;\n        } else { // string -> array\n            let src = this.expr2js(stmt.src);\n            let dest = this.array2js(stmt.dest);\n            return `\n            let src = ${src}+\"\";\n            ${dest}[0] = src.length;\n            for (let i=0; i<src.length; i++) {\n                ${dest}[i+1] = src.charCodeAt(i);\n            }\n            `;\n        }\n    }\n\n    do__CONVERT(stmt : basic.CONVERT_Statement) {\n        var num2str = stmt.dest.name.endsWith('$');\n        let src = this.expr2js(stmt.src);\n        let dest = this.assign2js(stmt.dest);\n        if (num2str) {\n            return `${dest} = this.valueToString(${src}, false)`;\n        } else {\n            return `${dest} = this.VAL(${src})`;\n        }\n    }\n\n    do__SUB(stmt: basic.SUB_Statement) {\n        this.subroutines[stmt.lexpr.name] = stmt;\n        // skip the SUB definition\n        return `this.curpc = ${stmt.endpc}`\n    }\n\n    do__CALL(stmt: basic.CALL_Statement) {\n        var substmt : basic.SUB_Statement = this.subroutines[stmt.call.name];\n        if (substmt == null)\n            this.runtimeError(`I can't find a subroutine named \"${stmt.call.name}\".`);\n        var subargs = substmt.lexpr.args || [];\n        var callargs = stmt.call.args || [];\n        if (subargs.length != callargs.length)\n            this.runtimeError(`I tried to call ${stmt.call.name} with the wrong number of parameters.`);\n        var s = '';\n        s += `this.gosubLabel(${JSON.stringify(stmt.call.name)});`\n        s += `this.newLocalScope();`\n        for (var i=0; i<subargs.length; i++) {\n            var arg = subargs[i] as basic.IndOp;\n            s += `this.vars.${arg.name} = ${this.expr2js(callargs[i])};`\n        }\n        return s;\n    }\n\n    // TODO: ONERR, ON ERROR GOTO\n    // TODO: memory quota\n    // TODO: useless loop (! 4th edition)\n    // TODO: other 4th edition errors\n    // TODO: ecma55 all-or-none input checking?\n\n    // FUNCTIONS\n\n    isValid(obj:number|string) : boolean {\n        if (typeof obj === 'number' && !isNaN(obj) && (!this.opts.checkOverflow || isFinite(obj)))\n            return true;\n        else if (typeof obj === 'string')\n            return true;\n        else\n            return false;\n    }\n    checkValue(obj:number|string, exprname:string) : number|string {\n        // check for unreferenced value\n        if (typeof obj !== 'number' && typeof obj !== 'string') {\n            // assign default value?\n            if (obj == null && this.opts.defaultValues) {\n                return exprname.endsWith(\"$\") ? \"\" : 0;\n            }\n            if (exprname != null && obj == null) {\n                this.runtimeError(`I haven't assigned a value to ${exprname}.`);\n            } else if (exprname != null) {\n                this.runtimeError(`I got an invalid value for ${exprname}: ${obj}`);\n            } else {\n                this.runtimeError(`I got an invalid value: ${obj}`);\n            }\n        }\n        return obj;\n    }\n    getDef(exprname: string) {\n        var fn = this.defs[exprname];\n        if (!fn) this.runtimeError(`I haven't run a DEF statement for ${exprname}.`);\n        return fn;\n    }\n    checkNum(n:number) : number {\n        this.checkValue(n, 'this');\n        if (n === Infinity) this.runtimeError(`I computed a number too big to store.`);\n        if (isNaN(n)) this.runtimeError(`I computed an invalid number.`);\n        return n;\n    }\n    checkString(s:string) : string {\n        this.checkValue(s, 'this');\n        if (typeof s !== 'string')\n            this.runtimeError(`I expected a string here.`);\n        else if (s.length > this.opts.maxStringLength)\n            this.dialectError(`create strings longer than ${this.opts.maxStringLength} characters`);\n        return s;\n    }\n    \n    add(a, b) : number|string {\n        // TODO: if string-concat\n        if (typeof a === 'number' && typeof b === 'number')\n            return this.checkNum(a + b);\n        else if (this.opts.stringConcat)\n            return this.checkString(a + b);\n        else\n            this.dialectError(`use the \"+\" operator to concatenate strings`)\n    }\n    sub(a:number, b:number) : number {\n        return this.checkNum(a - b);\n    }\n    mul(a:number, b:number) : number {\n        return this.checkNum(a * b);\n    }\n    div(a:number, b:number) : number {\n        if (b == 0) this.runtimeError(`I can't divide by zero.`);\n        return this.checkNum(a / b);\n    }\n    idiv(a:number, b:number) : number {\n        return this.FIX(this.INT(a) / this.INT(b));\n    }\n    mod(a:number, b:number) : number {\n        return this.checkNum(a % b);\n    }\n    pow(a:number, b:number) : number {\n        if (a == 0 && b < 0) this.runtimeError(`I can't raise zero to a negative power.`);\n        return this.checkNum(Math.pow(a, b));\n    }\n    band(a:number, b:number) : number {\n        return a & b;\n    }\n    bor(a:number, b:number) : number {\n        return a | b;\n    }\n    bnot(a:number) : number {\n        return ~a;\n    }\n    bxor(a:number, b:number) : number {\n        return a ^ b;\n    }\n    bimp(a:number, b:number) : number {\n        return this.bor(this.bnot(a), b);\n    }\n    beqv(a:number, b:number) : number {\n        return this.bnot(this.bxor(a, b));\n    }\n    land(a:number, b:number) : number {\n        return a && b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    lor(a:number, b:number) : number {\n        return a || b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    lnot(a:number) : number {\n        return a ? 0 : (this.opts.bitwiseLogic ? -1 : 1);\n    }\n    neg(a:number) : number {\n        return -a;\n    }\n    eq(a:number, b:number) : number {\n        return a == b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    ne(a:number, b:number) : number {\n        return a != b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    lt(a:number, b:number) : number {\n        return a < b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    gt(a:number, b:number) : number {\n        return a > b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    le(a:number, b:number) : number {\n        return a <= b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    ge(a:number, b:number) : number {\n        return a >= b ? (this.opts.bitwiseLogic ? -1 : 1) : 0;\n    }\n    min(a:number, b:number) : number {\n        return a < b ? a : b;\n    }\n    max(a:number, b:number) : number {\n        return a > b ? a : b;\n    }\n\n    // FUNCTIONS (uppercase)\n    // TODO: swizzle names for type-checking\n\n    ABS(arg : number) : number {\n        return this.checkNum(Math.abs(arg));\n    }\n    ASC(arg : string) : number {\n        arg = this.checkString(arg);\n        if (arg == '') this.runtimeError(`I tried to call ASC() on an empty string.`);\n        return arg.charCodeAt(0);\n    }\n    ATN(arg : number) : number {\n        return this.checkNum(Math.atan(arg));\n    }\n    CHR$(arg : number) : string {\n        return String.fromCharCode(this.checkNum(arg));\n    }\n    CINT(arg : number) : number {\n        return this.ROUND(arg);\n    }\n    COS(arg : number) : number {\n        return this.checkNum(Math.cos(arg));\n    }\n    COT(arg : number) : number {\n        return this.checkNum(1.0 / Math.tan(arg)); // 4th edition only\n    }\n    CTL(arg : number) : string {\n        return this.CHR$(arg);\n    }\n    EXP(arg : number) : number {\n        return this.checkNum(Math.exp(arg));\n    }\n    FIX(arg : number) : number {\n        return this.checkNum(arg < 0 ? Math.ceil(arg) : Math.floor(arg));\n    }\n    HEX$(arg : number) : string {\n        return this.ROUND(arg).toString(16);\n    }\n    INSTR(a, b, c) : number {\n        if (c != null) {\n            return this.checkString(b).indexOf(this.checkString(c), this.checkNum(a) - 1) + 1;\n        } else {\n            return this.checkString(a).indexOf(this.checkString(b)) + 1;\n        }\n    }\n    INT(arg : number) : number {\n        return this.checkNum(Math.floor(arg));\n    }\n    LEFT$(arg : string, count : number) : string {\n        arg = this.checkString(arg);\n        count = this.ROUND(count);\n        return arg.substr(0, count);\n    }\n    LEN(arg : string) : number {\n        return this.checkString(arg).length;\n    }\n    LIN(arg : number) : string {\n        return this.STRING$(arg, '\\n');\n    }\n    LOG(arg : number) : number {\n        if (arg == 0) this.runtimeError(`I can't take the logarithm of zero (${arg}).`)\n        if (arg < 0) this.runtimeError(`I can't take the logarithm of a negative number (${arg}).`)\n        return this.checkNum(Math.log(arg));\n    }\n    LOG10(arg : number) : number {\n        if (arg == 0) this.runtimeError(`I can't take the logarithm of zero (${arg}).`)\n        if (arg < 0) this.runtimeError(`I can't take the logarithm of a negative number (${arg}).`)\n        return this.checkNum(Math.log10(arg));\n    }\n    MID$(arg : string, start : number, count : number) : string {\n        arg = this.checkString(arg);\n        if (!count) count = arg.length;\n        start = this.ROUND(start);\n        count = this.ROUND(count);\n        if (start < 1) this.runtimeError(`I can't compute MID$ if the starting index is less than 1.`)\n        return arg.substr(start-1, count);\n    }\n    OCT$(arg : number) : string {\n        return this.ROUND(arg).toString(8);\n    }\n    PI() : number {\n        return Math.PI;\n    }\n    // TODO: POS(haystack, needle, start)\n    POS(arg1, arg2) { // arg ignored\n        if (typeof arg1 == 'string' && typeof arg2 == 'string')\n            return arg1.indexOf(arg2) >= 0 + 1;\n        else\n            return this.column + 1;\n    }\n    RIGHT$(arg : string, count : number) : string {\n        arg = this.checkString(arg);\n        count = this.ROUND(count);\n        return arg.substr(arg.length - count, count);\n    }\n    RND(arg : number) : number {\n        // TODO: X<0 restart w/ seed, X=0 repeats\n        if (arg < 0) this.rng.seedfloat(arg);\n        return this.rng.next();\n    }\n    ROUND(arg : number) : number {\n        return this.checkNum(Math.round(arg));\n    }\n    SGN(arg : number) : number {\n        this.checkNum(arg);\n        return (arg < 0) ? -1 : (arg > 0) ? 1 : 0;\n    }\n    SIN(arg : number) : number {\n        return this.checkNum(Math.sin(arg));\n    }\n    SPACE$(arg : number) : string {\n        return this.STRING$(arg, ' ');\n    }\n    SPC(arg : number) : string {\n        return this.SPACE$(arg);\n    }\n    SQR(arg : number) : number {\n        if (arg < 0) this.runtimeError(`I can't take the square root of a negative number (${arg}).`)\n        return this.checkNum(Math.sqrt(arg));\n    }\n    STR$(arg : number) : string {\n        return this.valueToString(this.checkNum(arg), false);\n    }\n    STRING$(len : number, chr : number|string) : string {\n        len = this.ROUND(len);\n        if (len <= 0) return '';\n        if (len > this.opts.maxStringLength)\n            this.dialectError(`create a string longer than ${this.opts.maxStringLength} characters`);\n        if (typeof chr === 'string')\n            return chr.substr(0,1).repeat(len);\n        else\n            return String.fromCharCode(chr).repeat(len);\n    }\n    TAB(arg : number) : string {\n        if (arg < 1) { arg = 1; } // TODO: SYSTEM MESSAGE IDENTIFYING THE EXCEPTION\n        var spaces = this.ROUND(arg) - 1 - this.column;\n        return this.SPACE$(spaces);\n    }\n    TAN(arg : number) : number {\n        return this.checkNum(Math.tan(arg));\n    }\n    TIM(arg : number) : number { // only HP BASIC?\n        var d = new Date();\n        switch (this.ROUND(arg)) {\n            case 0: return d.getMinutes();\n            case 1: return d.getHours();\n            case 2:\n                var dayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n                var mn = d.getMonth();\n                var dn = d.getDate();\n                var dayOfYear = dayCount[mn] + dn;\n                var isLeapYear = (d.getFullYear() & 3) == 0; // TODO: wrong\n                if(mn > 1 && isLeapYear) dayOfYear++;\n                return dayOfYear;\n            case 3: return d.getFullYear() % 100; // Y@K!\n            case 4: return d.getSeconds();\n            default: return 0;\n        }\n    }\n    TIMER() : number {\n        return Date.now() / 1000;\n    }\n    UPS$(arg : string) : string {\n        return this.checkString(arg).toUpperCase();\n    }\n    VAL(arg : string) : number {\n        var n = parseFloat(this.checkString(arg));\n        return isNaN(n) ? 0 : n; // TODO? altair works this way\n    }\n    LPAD$(arg : string, len : number) : string {\n        arg = this.checkString(arg);\n        while (arg.length < len) arg = \" \" + arg;\n        return arg;\n    }\n    RPAD$(arg : string, len : number) : string {\n        arg = this.checkString(arg);\n        while (arg.length < len) arg = arg + \" \";\n        return arg;\n    }\n    NFORMAT$(arg : number, numlen : number) : string {\n        var s = this.float2str(arg, numlen);\n        return (numlen > 0) ? this.LPAD$(s, numlen) : this.RPAD$(s, -numlen);\n    }\n}\n", "\nimport { Platform, BreakpointCallback, DebugCondition, DebugEvalCondition } from \"../common/baseplatform\";\nimport { PLATFORMS, AnimationTimer, EmuHalt } from \"../common/emu\";\nimport * as editors from \"../ide/views/editors\";\nimport { BASICRuntime } from \"../common/basic/runtime\";\nimport { BASICProgram } from \"../common/basic/compiler\";\nimport { TeleTypeWithKeyboard } from \"../common/teletype\";\nimport { lpad } from \"../common/util\";\nimport { FileData } from \"../common/workertypes\";\nimport { haltEmulation } from \"../ide/ui\"; // TODO: make this a callback\n\nconst BASIC_PRESETS = [\n    { id: 'hello.bas', name: 'Hello' },\n    { id: 'tutorial.bas', name: 'Tutorial' },\n    { id: 'sieve.bas', name: 'Sieve Benchmark' },\n    { id: 'mortgage.bas', name: 'Interest Calculator' },\n    { id: '23match.bas', name: '23 Matches' },\n    { id: 'craps.bas', name: 'Craps' },\n    { id: 'lander.bas', name: 'Lander' },\n    { id: 'hamurabi.bas', name: 'Hammurabi' },\n    { id: 'wumpus.bas', name: 'Hunt The Wumpus' },\n    { id: 'startrader.bas', name: 'Star Trader' },\n    { id: 'haunted.bas', name: 'Haunted House' },\n];\n\nclass BASICPlatform implements Platform {\n    mainElement: HTMLElement;\n    program: BASICProgram;\n    runtime: BASICRuntime;\n    clock: number = 0;\n    timer: AnimationTimer;\n    tty: TeleTypeWithKeyboard;\n    hotReload: boolean = true;\n    animcount: number = 0;\n    internalFiles : {[path:string] : FileData} = {};\n    transcript: string[];\n\n    constructor(mainElement: HTMLElement) {\n        //super();\n        this.mainElement = mainElement;\n        mainElement.style.overflowY = 'auto';\n    }\n\n    async start() {\n        // create runtime\n        this.runtime = new BASICRuntime();\n        this.runtime.reset();\n        // create divs\n        var parent = this.mainElement;\n        // TODO: input line should be always flush left\n        var gameport = $('<div id=\"gameport\" style=\"margin-top:calc(100vh - 8em)\"/>').appendTo(parent);\n        var windowport = $('<div id=\"windowport\" class=\"transcript transcript-style-2\"/>').appendTo(gameport);\n        var inputport = $('<div id=\"inputport\" class=\"transcript-bottom\"/>').appendTo(gameport);\n        var inputline = $('<input class=\"transcript-input transcript-style-2\" type=\"text\" style=\"max-width:95%\"/>').appendTo(inputport);\n        //var printhead = $('<div id=\"printhead\" class=\"transcript-print-head\"/>').appendTo(parent);\n        //var printshield = $('<div id=\"printhead\" class=\"transcript-print-shield\"/>').appendTo(parent);\n        this.tty = new TeleTypeWithKeyboard(windowport[0], true, inputline[0] as HTMLInputElement);\n        this.tty.keepinput = true; // input stays @ bottom\n        this.tty.splitInput = true; // split into arguments\n        this.tty.keephandler = false; // set handler each input\n        this.tty.hideinput();\n        this.tty.scrolldiv = parent;\n        this.tty.bell = new Audio('res/ttybell.mp3');\n        this.runtime.input = async (prompt:string, nargs:number) => {\n            return new Promise( (resolve, reject) => {\n                if (prompt != null) {\n                    this.tty.addtext(prompt, 0);\n                    this.tty.addtext('? ', 0);\n                    this.tty.waitingfor = 'line';\n                } else {\n                    this.tty.waitingfor = 'char';\n                }\n                this.tty.focusinput();\n                this.tty.resolveInput = resolve;\n            });\n        }\n        this.timer = new AnimationTimer(60, this.animate.bind(this));\n        this.resize = () => {\n            this.tty.resize(80);\n        }\n        this.resize();\n        this.runtime.print = (s:string) => {\n            // TODO: why null sometimes?\n            this.animcount = 0; // exit advance loop when printing\n            this.tty.print(s);\n            this.transcript.push(s);\n        }\n        this.runtime.resume = this.resume.bind(this);\n    }\n\n    animate() {\n        if (this.tty.isBusy()) return;\n        var ips = this.program.opts.commandsPerSec || 1000;\n        this.animcount += ips / 60;\n        while (this.runtime.running && this.animcount-- > 0) {\n            if (!this.advance())\n                break;\n        }\n    }\n\n    // should not depend on tty state\n    advance(novideo?: boolean) : number {\n        if (this.runtime.running) {\n            if (this.checkDebugTrap())\n                return 0;\n            var more = this.runtime.step();\n            if (!more) {\n                this.pause();\n                if (this.runtime.exited) {\n                    this.exitmsg();\n                    this.didExit();\n                }\n            }\n            this.clock++;\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n    \n    exitmsg() {\n        this.tty.print(\"\\n\\n\");\n        this.tty.addtext(\"*** END OF PROGRAM ***\", 1);\n        this.tty.showPrintHead(false);\n    }\n\n    resize: () => void;\n\n    loadROM(title, data) {\n        // TODO: disable hot reload if error\n        // TODO: only hot reload when we hit a label?\n        var didExit = this.runtime.exited;\n        this.program = data;\n        var resumePC = this.runtime.load(data);\n        this.tty.uppercaseOnly = true; // this.program.opts.uppercaseOnly; //TODO?\n        // map editor to uppercase-only if need be\n        editors.textMapFunctions.input = this.program.opts.uppercaseOnly ? (s) => s.toUpperCase() : null;\n        // only reset if we exited, or couldn't restart at label (PC reset to 0)\n        if (!this.hotReload || didExit || !resumePC)\n            this.reset();\n    }\n\n    getROMExtension() {\n        return \".json\";\n    }\n\n    reset(): void {\n        this.tty.clear();\n        this.runtime.reset();\n        this.clock = 0;\n        this.transcript = [];\n    }\n\n    pause(): void {\n        this.timer.stop();\n    }\n\n    resume(): void {\n        if (this.isBlocked()) return;\n        this.animcount = 0;\n        this.timer.start();\n    }\n\n    isBlocked() { return this.tty.waitingfor != null || this.runtime.exited; } // is blocked for input?\n    isRunning() { return this.timer.isRunning(); }\n    getDefaultExtension() { return \".bas\"; }\n    getToolForFilename() { return \"basic\"; }\n    getPresets() { return BASIC_PRESETS; }\n\n    getPC() {\n        return this.runtime.curpc;\n    }\n    getSP() {\n        return 0x1000 - this.runtime.returnStack.length;\n    }\n    isStable() {\n        return true;\n    }    \n    getCPUState() {\n        return { PC: this.getPC(), SP: this.getSP() }\n    }\n    saveState() {\n        return {\n            c: this.getCPUState(),\n            rt: this.runtime.saveState(),\n        }\n    }\n    loadState(state) {\n        this.runtime.loadState(state);\n    }\n    getDebugTree() {\n        return {\n            CurrentLine: this.runtime.getCurrentLabel(),\n            Variables: this.runtime.vars,\n            Arrays: this.runtime.arrays,\n            Functions: this.runtime.defs,\n            ForLoops: this.runtime.forLoops,\n            WhileLoops: this.runtime.whileLoops,\n            ReturnStack: this.runtime.returnStack,\n            NextDatum: this.runtime.datums[this.runtime.dataptr],\n            Clock: this.clock,\n            Options: this.runtime.opts,\n            Internals: this.runtime,\n        }\n    }\n    inspect(sym: string) {\n        let o = this.runtime.vars[sym];\n        if (o != null) return `${sym} = ${o}`;\n    }\n    showHelp() {\n        return \"https://8bitworkshop.com/docs/platforms/basic/\";\n    }\n\n    getDebugCategories() {\n        return ['Variables'];\n    }\n    getDebugInfo(category:string, state) : string {\n        switch (category) {\n            case 'Variables': return this.varsToLongString();\n        }\n    }\n    varsToLongString() : string {\n        var s = '';\n        var vars = Object.keys(this.runtime.vars);\n        vars.sort();\n        for (var name of vars) {\n            var value = this.runtime.vars[name];\n            var valstr = JSON.stringify(value);\n            if (valstr.length > 24) valstr = `${valstr.substr(0,24)}...(${valstr.length})`;\n            s += lpad(name,3) + \" = \" + valstr + \"\\n\";\n        }\n        return s;\n    }\n    \n    // TODO: debugging (get running state, etc)\n\n    onBreakpointHit : BreakpointCallback;\n    debugTrap : DebugCondition;\n\n    setupDebug(callback : BreakpointCallback) : void {\n        this.onBreakpointHit = callback;\n    }\n    clearDebug() {\n        this.onBreakpointHit = null;\n        this.debugTrap = null;\n    }\n    checkDebugTrap() : boolean {\n        if (this.debugTrap && this.debugTrap()) {\n            this.pause();\n            this.break();\n            return true;\n        }\n        return false;\n    }\n    break() {\n        // TODO: why doesn't highlight go away on resume?\n        if (this.onBreakpointHit) {\n            this.onBreakpointHit(this.saveState());\n        }\n    }\n    step() {\n        var prevClock = this.clock;\n        this.debugTrap = () => {\n            return this.clock > prevClock;\n        };\n        this.resume();\n    }\n    stepOver() {\n        var stmt = this.runtime.getStatement();\n        if (stmt && (stmt.command == 'GOSUB' || stmt.command == 'ONGOSUB')) {\n            var nextPC = this.getPC() + 1;\n            this.runEval(() => this.getPC() == nextPC);\n        } else {\n            this.step();\n        }\n    }\n    runUntilReturn() {\n        var prevSP = this.getSP();\n        this.runEval(() => this.getSP() > prevSP);\n    }\n    runEval(evalfunc : DebugEvalCondition) {\n        this.debugTrap = () => evalfunc(this.getCPUState());\n        this.resume();\n    }\n    restartAtPC?(pc:number) : boolean {\n        pc = Math.round(pc);\n        if (pc >= 0 && pc < this.runtime.allstmts.length) {\n            this.runtime.curpc = pc;\n            this.tty.cancelinput();\n            this.clock = 0;\n            return true;\n        } else {\n            return false;\n        }\n    }\n    readFile(path: string) : FileData {\n        return this.internalFiles[path];\n    }\n    writeFile(path: string, data: FileData) : boolean {\n        this.internalFiles[path] = data;\n        return true;\n    }\n    didExit() {\n        this.internalFiles['stdout.txt'] = this.transcript.join(\"\");\n        haltEmulation();\n    }\n}\n\n//\n\nPLATFORMS['basic'] = BASICPlatform;\n"],
  "mappings": "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",
  "names": ["isLiteral", "arg", "isLookup", "isBinOp", "isUnOp", "RNG", "a", "b", "c", "d", "aa", "bb", "cc", "dd", "n", "t", "DEFAULT_MAX_ARRAY_ELEMENTS", "BASICRuntime", "_BASICRuntime", "program", "prevlabel", "prevpcofs", "pc", "label", "targetpc", "stmt", "datum", "dimstmt", "arg", "state", "fnames", "name", "dict", "fn", "fnname", "msg", "EmuHalt", "what", "loc", "stmtfn", "functext", "e", "cmd", "forname", "nextlexpr", "nesting", "obj", "padding", "str", "numstr", "l", "curgroup", "nextcol", "numlen", "prec", "prompt", "nargs", "expr", "opts", "isLiteral", "isLookup", "s", "qname", "jsargs", "isBinOp", "left", "right", "isUnOp", "args", "init", "targ", "step", "endpc", "looppc", "looplabel", "loopdone", "nextname", "done", "fl", "cond", "isRead", "dims", "total", "isstring", "arrcons", "i", "order", "indices", "arr", "v", "idx", "isArray", "orig", "add", "start", "end", "value", "labels", "valid", "elapsed", "setvals", "index", "lexpr", "ljs", "dim", "argsstr", "arr2str", "arrname", "dest", "src", "num2str", "substmt", "subargs", "callargs", "exprname", "count", "arg1", "arg2", "len", "chr", "spaces", "dayCount", "mn", "dn", "dayOfYear", "isLeapYear", "BASIC_PRESETS", "BASICPlatform", "mainElement", "BASICRuntime", "parent", "gameport", "windowport", "inputport", "inputline", "TeleTypeWithKeyboard", "prompt", "nargs", "resolve", "reject", "AnimationTimer", "ips", "novideo", "more", "title", "data", "didExit", "resumePC", "textMapFunctions", "s", "state", "sym", "o", "category", "vars", "name", "value", "valstr", "lpad", "callback", "prevClock", "stmt", "nextPC", "prevSP", "evalfunc", "pc", "path", "haltEmulation", "PLATFORMS"]
}
